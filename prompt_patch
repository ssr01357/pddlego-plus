You will be given a naturalistic domain description and problem description. 
Your task is to generate domain file and problem file in Planning Domain Definition Language (PDDL) with appropriate tags.
Domain file should be inside <domain_file> ... </domain_file> and Problem file should be inside <problem_file> ... </problem_file>

PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible. 
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example PDDL domain file is given below:

<domain_file>
(define
	; let's think step by step and correctly define all the aspects of a domain file
	; making sure that the list of types, predicates, and actions comprehensively define the give domain
	(domain domain_name)
	(:requirements :strips :typing)
	(:types
		type1
		type2
	)
	; making sure that all the predicates needed are defined below
	; predicates have all the arguments needed along with the types
	(:predicates
		(predicate1 ?arg1 - type1 ?arg2 - type2)
		(predicate2 ?arg1 - type1 ?arg2 - type2)
	)
	; let's define a list of actions that comprehensively define the given domain
	; the names for actions are always given precisely in the domain description, using only those actions
	; making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	; writing the definition of action1 which is one of the action given in domain description
	; first defining all the parameters needed for predicates in preconditions and effects
	; making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	; making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
	(:action action1
		:parameters (?arg1 - type1 ?arg2 - type2 ?arg3 - type2)
		:precondition (predicate1 ?arg1 ?arg2)
		:effect (and (predicate1 ?arg1 ?arg2) (predicate2 ?arg1 ?arg3))
	)
	; writing the definition of action1 which is one of the action given in domain description
	; first defining all the parameters needed for predicates in preconditions and effects
	; making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	; making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
	(:action action2
		:parameters (?arg1 - type1 ?arg2 - type2 ?arg3 - type2)
		:precondition (and (predicate1 ?arg1 ?arg2) (predicate2 ?arg1 ?arg3))
		:effect (predicate2 ?arg1 ?arg3)
	)

)
</domain_file>

Notes for generating domain file: 
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- predicates with proper arguments could be combined to combine complex boolean expression to represent predicondition and effect. 
- The braces should be balanced for each section of the PDDL program.
- Use predicates with arguments of the right type as declared in domain file.
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments.
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions.


PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example PDDL problem file is given below.

<problem_file>
(define
	; let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state
	(problem problem_name)
	(:domain domain_name)
	; making sure of defining all the objects that are required to define init state and goal state
	(:objects
		obj1 obj2 - type1
		obj3, obj4 - type2
	)
	; reasoning about the validity of init state that captures the properties of objects in the initial state
	; defining the correct init state that represent the problem file below
	(:init (predicate1 obj1 obj3) (predicate2 obj2 obj3))
	; reasoning about the validity of init state that captures the properties of objects in the initial state
	; defining the correct init state that represent the problem file below
	(:goal (and (predicate1 obj1 obj4) (predicate2 obj2 obj3)))
)
</problem_file>

Notes for generating problem file:
- obj1, obj2, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state.
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state.
- predicates with proper arguments could be combined to combine complex boolean expression to represent init and goal states.
- The braces should be balanced for each section of the PDDL program.
- Use predicates with arguments of the right type as declared in domain file.
- All the objects that would be arguments of predicates in init and goal states should be declared in :objects.