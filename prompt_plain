PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible. 
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example PDDL domain file is given below:

<domain_file>
(define
	(domain domain_name)
	(:requirements :strips :typing)
	(:types
		type1
		type2
	)
	(:predicates
		(predicate1 ?arg1 - type1 ?arg2 - type2)
		(predicate2 ?arg1 - type1 ?arg2 - type2)
	)
	(:action action1
		:parameters (?arg1 - type1 ?arg2 - type2 ?arg3 - type2)
		:precondition (predicate1 ?arg1 ?arg2)
		:effect (and (predicate1 ?arg1 ?arg2) (predicate2 ?arg1 ?arg3))
	)
	(:action action2
		:parameters (?arg1 - type1 ?arg2 - type2 ?arg3 - type2)
		:precondition (and (predicate1 ?arg1 ?arg2) (predicate2 ?arg1 ?arg3))
		:effect (predicate2 ?arg1 ?arg3)
	)
)
</domain_file>

Notes for generating domain file: 
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- predicates with proper arguments could be combined to combine complex boolean expression to represent predicondition and effect. 
- The braces should be balanced for each section of the PDDL program.
- Use predicates with arguments of the right type as declared in domain file.
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments.
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions.


PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example PDDL problem file is given below.

<problem_file>
(define
	(problem problem_name)
	(:domain domain_name)
	(:objects
		obj1 obj2 - type1
		obj3, obj4 - type2
	)
	(:init (predicate1 obj1 obj3) (predicate2 obj2 obj3))
	(:goal (and (predicate1 obj1 obj4) (predicate2 obj2 obj3)))
)
</problem_file>

Notes for generating problem file:
- obj1, obj2, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state.
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state.
- predicates with proper arguments could be combined to combine complex boolean expression to represent init and goal states.
- The braces should be balanced for each section of the PDDL program.
- Use predicates with arguments of the right type as declared in domain file.
- All the objects that would be arguments of predicates in init and goal states should be declared in :objects.