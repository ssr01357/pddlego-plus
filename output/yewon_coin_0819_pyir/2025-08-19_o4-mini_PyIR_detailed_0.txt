Observations: You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. 
To the South you see a closed patio door. To the West you see a closed plain door.  
Gold path: ['look around', 'open door to south', 'open door to west', 'move south', 'open door to west', 'move north', 'move west', 'move east', 'move west', 'move east', 'move south', 'move east', 'open door to north', 'move west', 'move west', 'open door to south', 'move south', 'open door to south', 'open door to west', 'move north', 'move east', 'move east', 'move north', 'take coin'] 
Valid Actions: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west'] 
taskDescription: Your task is to search the environment and find the coin.  Once you find the coin, take it. 
brief_obs: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 
 


====Step 0==== 

----Larger Loop No. 0---- 
successful_actions: [] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreDomain(Domain):
    Location = create_type("Location")
    Door = create_type("Door")

    @predicate(Location)
    def at(self, loc):
        """Agent is at a location"""

    @predicate(Location)
    def visited(self, loc):
        """Location has been visited"""

    @predicate(Door, Location, Location)
    def connects(self, door, loc1, loc2):
        """Door connects two locations"""

    @predicate(Door)
    def open(self, door):
        """Door is open"""

    @predicate(Door)
    def closed(self, door):
        """Door is closed"""

    @action(Location, Location, Door)
    def move(self, frm, to, door):
        precond = [self.at(frm), self.open(door), self.connects(door, frm, to)]
        effect = [~self.at(frm), self.at(to), self.visited(to)]
        return precond, effect

    @action(Door, Location, Location)
    def open_door(self, door, loc1, loc2):
        precond = [self.at(loc1), self.connects(door, loc1, loc2), self.closed(door)]
        effect = [~self.closed(door), self.open(door)]
        return precond, effect

    @action(Door, Location, Location)
    def close_door(self, door, loc1, loc2):
        precond = [self.at(loc1), self.connects(door, loc1, loc2), self.open(door)]
        effect = [~self.open(door), self.closed(door)]
        return precond, effect
Generated py_problem:
from py2pddl import goal, init

class ExploreProblem(ExploreDomain):
    def __init__(self):
        super().__init__()
        self.locationObjs = ExploreDomain.Location.create_objs(["kitchen", "patio", "room_west"])
        self.doorObjs = ExploreDomain.Door.create_objs(["door_south", "door_west"])

    @init
    def init(self):
        return [
            self.at(self.locationObjs["kitchen"]),
            self.closed(self.doorObjs["door_south"]),
            self.closed(self.doorObjs["door_west"]),
            self.connects(self.doorObjs["door_south"], self.locationObjs["kitchen"], self.locationObjs["patio"]),
            self.connects(self.doorObjs["door_west"], self.locationObjs["kitchen"], self.locationObjs["room_west"]),
            self.visited(self.locationObjs["kitchen"]),
        ]

    @goal
    def goal(self):
        return [
            self.visited(self.locationObjs["patio"]),
            self.visited(self.locationObjs["room_west"]),
        ]

--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)


- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
N/A

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreDomain(Domain):
    Location = create_type("Location")
    Door = create_type("Door")

    @predicate(Location)
    def at(self, loc):
        """Agent is at a location"""

    @predicate(Location)
    def visited(self, loc):
        """Location has been visited"""

    @predicate(Door, Location, Location)
    def connects(self, door, loc1, loc2):
        """Door connects two locations"""

    @predicate(Door)
    def open(self, door):
        """Door is open"""

    @predicate(Door)
    def closed(self, door):
        """Door is closed"""

    @action(Location, Location, Door)
    def move(self, frm, to, door):
        precond = [self.at(frm), self.open(door), self.connects(door, frm, to)]
        effect = [~self.at(frm), self.at(to), self.visited(to)]
        return precond, effect

    @action(Door, Location, Location)
    def open_door(self, door, loc1, loc2):
        precond = [self.at(loc1), self.connects(door, loc1, loc2), self.closed(door)]
        effect = [~self.closed(door), self.open(door)]
        return precond, effect

    @action(Door, Location, Location)
    def close_door(self, door, loc1, loc2):
        precond = [self.at(loc1), self.connects(door, loc1, loc2), self.open(door)]
        effect = [~self.open(door), self.closed(door)]
        return precond, effect

### Python IR: problem class
from py2pddl import goal, init

class ExploreProblem(ExploreDomain):
    def __init__(self):
        super().__init__()
        self.locationObjs = ExploreDomain.Location.create_objs(["kitchen", "patio", "room_west"])
        self.doorObjs = ExploreDomain.Door.create_objs(["door_south", "door_west"])

    @init
    def init(self):
        return [
            self.at(self.locationObjs["kitchen"]),
            self.closed(self.doorObjs["door_south"]),
            self.closed(self.doorObjs["door_west"]),
            self.connects(self.doorObjs["door_south"], self.locationObjs["kitchen"], self.locationObjs["patio"]),
            self.connects(self.doorObjs["door_west"], self.locationObjs["kitchen"], self.locationObjs["room_west"]),
            self.visited(self.locationObjs["kitchen"]),
        ]

    @goal
    def goal(self):
        return [
            self.visited(self.locationObjs["patio"]),
            self.visited(self.locationObjs["room_west"]),
        ]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain explore-domain)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (connects ?dir - direction ?loc1 - location ?loc2 - location)
    (open ?dir - direction)
    (closed ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (connects ?dir ?loc1 ?loc2) (closed ?dir))
    :effect (and (not (closed ?dir)) (open ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (open ?dir) (connects ?dir ?from ?to))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[PDDL pf]
(define (problem explore-problem)
  (:domain explore-domain)
  (:objects
    kitchen patio room_west - location
    door_south door_west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (closed door_south)
    (closed door_west)
    (connects door_south kitchen patio)
    (connects door_west kitchen room_west)
  )
  (:goal (and (visited patio) (visited room_west)))
)
Actions from solver: None 
Raw plan text:  
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORE-DOMAIN
	Problem: EXPLORE-PROBLEM
	#Actions: 4
	#Fluents: 9
Goals found: 2
Goals_Edges found: 2
Starting search with 1-BFWS...
--[2 / 0]--
--[2 / 1]--
--[1 / 0]--
--[1 / 3]--
--[1 / 4]--
Total time: 0.000165
Nodes generated during search: 8
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
Fast-BFS search completed in 0.000165 secs
Starting search with BFWS(novel,land,h_(add)ff)...
Landmarks found: 4
Landmarks_Edges found: 6
--[6 / 4294967295]--
--[6 / 4]--
--[6 / 3]--
--[5 / 3]--
--[5 / 2]--
--[4 / 2]--
Total time: 6.4e-05
Nodes generated during search: 5
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
BFS search completed in 6.4e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    No validation log.


--- Attempting to Plan (Small Loop Try #2) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)


- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain explore-domain)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (connects ?dir - direction ?loc1 - location ?loc2 - location)
    (open ?dir - direction)
    (closed ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (connects ?dir ?loc1 ?loc2) (closed ?dir))
    :effect (and (not (closed ?dir)) (open ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (open ?dir) (connects ?dir ?from ?to))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[Problem file]
(define (problem explore-problem)
  (:domain explore-domain)
  (:objects
    kitchen patio room_west - location
    door_south door_west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (closed door_south)
    (closed door_west)
    (connects door_south kitchen patio)
    (connects door_west kitchen room_west)
  )
  (:goal (and (visited patio) (visited room_west)))
)

### (Optional) Planner/validator feedback to fix
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORE-DOMAIN
	Problem: EXPLORE-PROBLEM
	#Actions: 4
	#Fluents: 9
Goals found: 2
Goals_Edges found: 2
Starting search with 1-BFWS...
--[2 / 0]--
--[2 / 1]--
--[1 / 0]--
--[1 / 3]--
--[1 / 4]--
Total time: 0.000165
Nodes generated during search: 8
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
Fast-BFS search completed in 0.000165 secs
Starting search with BFWS(novel,land,h_(add)ff)...
Landmarks found: 4
Landmarks_Edges found: 6
--[6 / 4294967295]--
--[6 / 4]--
--[6 / 3]--
--[5 / 3]--
--[5 / 2]--
--[4 / 2]--
Total time: 6.4e-05
Nodes generated during search: 5
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
BFS search completed in 6.4e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    No validation log.


### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreDomain(Domain):
    Location = create_type("Location")
    Door = create_type("Door")

    @predicate(Location)
    def at(self, loc):
        """Agent is at a location"""

    @predicate(Location)
    def visited(self, loc):
        """Location has been visited"""

    @predicate(Door, Location, Location)
    def connects(self, door, loc1, loc2):
        """Door connects two locations"""

    @predicate(Door)
    def open(self, door):
        """Door is open"""

    @predicate(Door)
    def closed(self, door):
        """Door is closed"""

    @action(Location, Location, Door)
    def move(self, frm, to, door):
        precond = [self.at(frm), self.open(door), self.connects(door, frm, to)]
        effect = [~self.at(frm), self.at(to), self.visited(to)]
        return precond, effect

    @action(Door, Location, Location)
    def open_door(self, door, loc1, loc2):
        precond = [self.at(loc1), self.connects(door, loc1, loc2), self.closed(door)]
        effect = [~self.closed(door), self.open(door)]
        return precond, effect

    @action(Door, Location, Location)
    def close_door(self, door, loc1, loc2):
        precond = [self.at(loc1), self.connects(door, loc1, loc2), self.open(door)]
        effect = [~self.open(door), self.closed(door)]
        return precond, effect

### Python IR: problem class
from py2pddl import goal, init

class ExploreProblem(ExploreDomain):
    def __init__(self):
        super().__init__()
        self.locationObjs = ExploreDomain.Location.create_objs(["kitchen", "patio", "room_west"])
        self.doorObjs = ExploreDomain.Door.create_objs(["door_south", "door_west"])

    @init
    def init(self):
        return [
            self.at(self.locationObjs["kitchen"]),
            self.closed(self.doorObjs["door_south"]),
            self.closed(self.doorObjs["door_west"]),
            self.connects(self.doorObjs["door_south"], self.locationObjs["kitchen"], self.locationObjs["patio"]),
            self.connects(self.doorObjs["door_west"], self.locationObjs["kitchen"], self.locationObjs["room_west"]),
            self.visited(self.locationObjs["kitchen"]),
        ]

    @goal
    def goal(self):
        return [
            self.visited(self.locationObjs["patio"]),
            self.visited(self.locationObjs["room_west"]),
        ]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain explore-domain)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (connects ?dir - direction ?loc1 - location ?loc2 - location)
    (open ?dir - direction)
    (closed ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (connects ?dir ?loc1 ?loc2) (closed ?dir))
    :effect (and (not (closed ?dir)) (open ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (open ?dir) (connects ?dir ?from ?to))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[PDDL pf]
(define (problem explore-problem)
  (:domain explore-domain)
  (:objects
    kitchen patio room_west - location
    door_south door_west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (closed door_south)
    (closed door_west)
    (connects door_south kitchen patio)
    (connects door_west kitchen room_west)
  )
  (:goal (and (visited patio) (visited room_west)))
)
Actions from solver: None 
Raw plan text:  
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORE-DOMAIN
	Problem: EXPLORE-PROBLEM
	#Actions: 4
	#Fluents: 9
Goals found: 2
Goals_Edges found: 2
Starting search with 1-BFWS...
--[2 / 0]--
--[2 / 1]--
--[1 / 0]--
--[1 / 3]--
--[1 / 4]--
Total time: 6.69999e-05
Nodes generated during search: 8
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
Fast-BFS search completed in 6.69999e-05 secs
Starting search with BFWS(novel,land,h_(add)ff)...
Landmarks found: 4
Landmarks_Edges found: 6
--[6 / 4294967295]--
--[6 / 4]--
--[6 / 3]--
--[5 / 3]--
--[5 / 2]--
--[4 / 2]--
Total time: 2.4e-05
Nodes generated during search: 5
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
BFS search completed in 2.4e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    No validation log.

[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreDomain(Domain):
    Location = create_type("Location")
    Door = create_type("Door")

    @predicate(Location)
    def at(self, loc):
        """Agent is at a location"""

    @predicate(Location)
    def visited(self, loc):
        """Location has been visited"""

    @predicate(Door, Location, Location)
    def connects(self, door, loc1, loc2):
        """Door connects two locations"""

    @predicate(Door)
    def open(self, door):
        """Door is open"""

    @predicate(Door)
    def closed(self, door):
        """Door is closed"""

    @action(Location, Location, Door)
    def move(self, frm, to, door):
        precond = [self.at(frm), self.open(door), self.connects(door, frm, to)]
        effect = [~self.at(frm), self.at(to), self.visited(to)]
        return precond, effect

    @action(Door, Location, Location)
    def open_door(self, door, loc1, loc2):
        precond = [self.at(loc1), self.connects(door, loc1, loc2), self.closed(door)]
        effect = [~self.closed(door), self.open(door)]
        return precond, effect

    @action(Door, Location, Location)
    def close_door(self, door, loc1, loc2):
        precond = [self.at(loc1), self.connects(door, loc1, loc2), self.open(door)]
        effect = [~self.open(door), self.closed(door)]
        return precond, effect

[py_problem]
from py2pddl import goal, init

class ExploreProblem(ExploreDomain):
    def __init__(self):
        super().__init__()
        self.locationObjs = ExploreDomain.Location.create_objs(["kitchen", "patio", "room_west"])
        self.doorObjs = ExploreDomain.Door.create_objs(["door_south", "door_west"])

    @init
    def init(self):
        return [
            self.at(self.locationObjs["kitchen"]),
            self.closed(self.doorObjs["door_south"]),
            self.closed(self.doorObjs["door_west"]),
            self.connects(self.doorObjs["door_south"], self.locationObjs["kitchen"], self.locationObjs["patio"]),
            self.connects(self.doorObjs["door_west"], self.locationObjs["kitchen"], self.locationObjs["room_west"]),
            self.visited(self.locationObjs["kitchen"]),
        ]

    @goal
    def goal(self):
        return [
            self.visited(self.locationObjs["patio"]),
            self.visited(self.locationObjs["room_west"]),
        ]

### Previous PDDL (generated from the IR)
[df]
(define (domain explore-domain)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (connects ?dir - direction ?loc1 - location ?loc2 - location)
    (open ?dir - direction)
    (closed ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (connects ?dir ?loc1 ?loc2) (closed ?dir))
    :effect (and (not (closed ?dir)) (open ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (open ?dir) (connects ?dir ?from ?to))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[pf]
(define (problem explore-problem)
  (:domain explore-domain)
  (:objects
    kitchen patio room_west - location
    door_south door_west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (closed door_south)
    (closed door_west)
    (connects door_south kitchen patio)
    (connects door_west kitchen room_west)
  )
  (:goal (and (visited patio) (visited room_west)))
)
### Planner Error from previous PDDL (if any)
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORE-DOMAIN
	Problem: EXPLORE-PROBLEM
	#Actions: 4
	#Fluents: 9
Goals found: 2
Goals_Edges found: 2
Starting search with 1-BFWS...
--[2 / 0]--
--[2 / 1]--
--[1 / 0]--
--[1 / 3]--
--[1 / 4]--
Total time: 6.69999e-05
Nodes generated during search: 8
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
Fast-BFS search completed in 6.69999e-05 secs
Starting search with BFWS(novel,land,h_(add)ff)...
Landmarks found: 4
Landmarks_Edges found: 6
--[6 / 4294967295]--
--[6 / 4]--
--[6 / 3]--
--[5 / 3]--
--[5 / 2]--
--[4 / 2]--
Total time: 2.4e-05
Nodes generated during search: 5
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
BFS search completed in 2.4e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    No validation log.

### Environment feedback from previous action (if any)
N/A

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreDomain(Domain):
    Location = create_type("Location")
    Door = create_type("Door")

    @predicate(Location)
    def at(self, loc):
        """Agent is at a location"""

    @predicate(Location)
    def visited(self, loc):
        """Location has been visited"""

    @predicate(Door, Location, Location)
    def connects(self, door, loc1, loc2):
        """Door connects two locations"""

    @predicate(Door)
    def open(self, door):
        """Door is open"""

    @predicate(Door)
    def closed(self, door):
        """Door is closed"""

    @action(Location, Location, Door)
    def move(self, frm, to, door):
        precond = [self.at(frm), self.open(door), self.connects(door, frm, to)]
        effect = [~self.at(frm), self.at(to), self.visited(to)]
        return precond, effect

    @action(Door, Location, Location)
    def open_door(self, door, loc1, loc2):
        precond = [self.at(loc1), self.connects(door, loc1, loc2), self.closed(door)]
        effect = [~self.closed(door), self.open(door)]
        return precond, effect

    @action(Door, Location, Location)
    def close_door(self, door, loc1, loc2):
        precond = [self.at(loc1), self.connects(door, loc1, loc2), self.open(door)]
        effect = [~self.open(door), self.closed(door)]
        return precond, effect
Generated py_problem:
from py2pddl import goal, init

class ExploreProblem(ExploreDomain):
    def __init__(self):
        super().__init__()
        self.locationObjs = ExploreDomain.Location.create_objs(["kitchen", "patio", "room_west"])
        self.doorObjs = ExploreDomain.Door.create_objs(["door_south", "door_west"])

    @init
    def init(self):
        return [
            self.at(self.locationObjs["kitchen"]),
            self.closed(self.doorObjs["door_south"]),
            self.closed(self.doorObjs["door_west"]),
            self.connects(self.doorObjs["door_south"], self.locationObjs["kitchen"], self.locationObjs["patio"]),
            self.connects(self.doorObjs["door_west"], self.locationObjs["kitchen"], self.locationObjs["room_west"]),
            self.visited(self.locationObjs["kitchen"]),
        ]

    @goal
    def goal(self):
        return [
            self.visited(self.locationObjs["patio"]),
            self.visited(self.locationObjs["room_west"]),
        ]


--- Attempting to Plan (Small Loop Try #3) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)


- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain explore-domain)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (connects ?dir - direction ?loc1 - location ?loc2 - location)
    (open ?dir - direction)
    (closed ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (connects ?dir ?loc1 ?loc2) (closed ?dir))
    :effect (and (not (closed ?dir)) (open ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (open ?dir) (connects ?dir ?from ?to))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[Problem file]
(define (problem explore-problem)
  (:domain explore-domain)
  (:objects
    kitchen patio room_west - location
    door_south door_west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (closed door_south)
    (closed door_west)
    (connects door_south kitchen patio)
    (connects door_west kitchen room_west)
  )
  (:goal (and (visited patio) (visited room_west)))
)

### (Optional) Planner/validator feedback to fix
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORE-DOMAIN
	Problem: EXPLORE-PROBLEM
	#Actions: 4
	#Fluents: 9
Goals found: 2
Goals_Edges found: 2
Starting search with 1-BFWS...
--[2 / 0]--
--[2 / 1]--
--[1 / 0]--
--[1 / 3]--
--[1 / 4]--
Total time: 6.69999e-05
Nodes generated during search: 8
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
Fast-BFS search completed in 6.69999e-05 secs
Starting search with BFWS(novel,land,h_(add)ff)...
Landmarks found: 4
Landmarks_Edges found: 6
--[6 / 4294967295]--
--[6 / 4]--
--[6 / 3]--
--[5 / 3]--
--[5 / 2]--
--[4 / 2]--
Total time: 2.4e-05
Nodes generated during search: 5
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
BFS search completed in 2.4e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    No validation log.


### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreDomain(Domain):
    Location = create_type("Location")
    Door = create_type("Door")

    @predicate(Location)
    def at(self, loc):
        """Agent is at a location"""

    @predicate(Location)
    def visited(self, loc):
        """Location has been visited"""

    @predicate(Door, Location, Location)
    def connects(self, door, loc1, loc2):
        """Door connects two locations"""

    @predicate(Door)
    def open(self, door):
        """Door is open"""

    @predicate(Door)
    def closed(self, door):
        """Door is closed"""

    @action(Location, Location, Door)
    def move(self, frm, to, door):
        precond = [self.at(frm), self.open(door), self.connects(door, frm, to)]
        effect = [~self.at(frm), self.at(to), self.visited(to)]
        return precond, effect

    @action(Door, Location, Location)
    def open_door(self, door, loc1, loc2):
        precond = [self.at(loc1), self.connects(door, loc1, loc2), self.closed(door)]
        effect = [~self.closed(door), self.open(door)]
        return precond, effect

    @action(Door, Location, Location)
    def close_door(self, door, loc1, loc2):
        precond = [self.at(loc1), self.connects(door, loc1, loc2), self.open(door)]
        effect = [~self.open(door), self.closed(door)]
        return precond, effect

### Python IR: problem class
from py2pddl import goal, init

class ExploreProblem(ExploreDomain):
    def __init__(self):
        super().__init__()
        self.locationObjs = ExploreDomain.Location.create_objs(["kitchen", "patio", "room_west"])
        self.doorObjs = ExploreDomain.Door.create_objs(["door_south", "door_west"])

    @init
    def init(self):
        return [
            self.at(self.locationObjs["kitchen"]),
            self.closed(self.doorObjs["door_south"]),
            self.closed(self.doorObjs["door_west"]),
            self.connects(self.doorObjs["door_south"], self.locationObjs["kitchen"], self.locationObjs["patio"]),
            self.connects(self.doorObjs["door_west"], self.locationObjs["kitchen"], self.locationObjs["room_west"]),
            self.visited(self.locationObjs["kitchen"]),
        ]

    @goal
    def goal(self):
        return [
            self.visited(self.locationObjs["patio"]),
            self.visited(self.locationObjs["room_west"]),
        ]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain explore-domain)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (connects ?dir - direction ?loc1 - location ?loc2 - location)
    (open ?dir - direction)
    (closed ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (connects ?dir ?loc1 ?loc2) (closed ?dir))
    :effect (and (not (closed ?dir)) (open ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (open ?dir) (connects ?dir ?from ?to))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)


[PDDL pf]
(define (problem explore-problem)
  (:domain explore-domain)
  (:objects
    kitchen patio room_west - location
    door_south door_west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (closed door_south)
    (closed door_west)
    (connects door_south kitchen patio)
    (connects door_west kitchen room_west)
  )
  (:goal (and (visited patio) (visited room_west)))
)

Actions from solver: None 
Raw plan text:  
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORE-DOMAIN
	Problem: EXPLORE-PROBLEM
	#Actions: 4
	#Fluents: 9
Goals found: 2
Goals_Edges found: 2
Starting search with 1-BFWS...
--[2 / 0]--
--[2 / 1]--
--[1 / 0]--
--[1 / 3]--
--[1 / 4]--
Total time: 0.000135
Nodes generated during search: 8
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
Fast-BFS search completed in 0.000135 secs
Starting search with BFWS(novel,land,h_(add)ff)...
Landmarks found: 4
Landmarks_Edges found: 6
--[6 / 4294967295]--
--[6 / 4]--
--[6 / 3]--
--[5 / 3]--
--[5 / 2]--
--[4 / 2]--
Total time: 6.09999e-05
Nodes generated during search: 5
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
BFS search completed in 6.09999e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    No validation log.


--- Attempting to Plan (Small Loop Try #4) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)


- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain explore-domain)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (connects ?dir - direction ?loc1 - location ?loc2 - location)
    (open ?dir - direction)
    (closed ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (connects ?dir ?loc1 ?loc2) (closed ?dir))
    :effect (and (not (closed ?dir)) (open ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (open ?dir) (connects ?dir ?from ?to))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)


[Problem file]
(define (problem explore-problem)
  (:domain explore-domain)
  (:objects
    kitchen patio room_west - location
    door_south door_west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (closed door_south)
    (closed door_west)
    (connects door_south kitchen patio)
    (connects door_west kitchen room_west)
  )
  (:goal (and (visited patio) (visited room_west)))
)


### (Optional) Planner/validator feedback to fix
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORE-DOMAIN
	Problem: EXPLORE-PROBLEM
	#Actions: 4
	#Fluents: 9
Goals found: 2
Goals_Edges found: 2
Starting search with 1-BFWS...
--[2 / 0]--
--[2 / 1]--
--[1 / 0]--
--[1 / 3]--
--[1 / 4]--
Total time: 0.000135
Nodes generated during search: 8
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
Fast-BFS search completed in 0.000135 secs
Starting search with BFWS(novel,land,h_(add)ff)...
Landmarks found: 4
Landmarks_Edges found: 6
--[6 / 4294967295]--
--[6 / 4]--
--[6 / 3]--
--[5 / 3]--
--[5 / 2]--
--[4 / 2]--
Total time: 6.09999e-05
Nodes generated during search: 5
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
BFS search completed in 6.09999e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    No validation log.


### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreDomain(Domain):
    Location = create_type("Location")
    Door = create_type("Door")

    @predicate(Location)
    def at(self, loc):
        """Agent is at a location"""

    @predicate(Location)
    def visited(self, loc):
        """Location has been visited"""

    @predicate(Door, Location, Location)
    def connects(self, door, loc1, loc2):
        """Door connects two locations"""

    @predicate(Door)
    def open(self, door):
        """Door is open"""

    @predicate(Door)
    def closed(self, door):
        """Door is closed"""

    @action(Location, Location, Door)
    def move(self, frm, to, door):
        precond = [self.at(frm), self.open(door), self.connects(door, frm, to)]
        effect = [~self.at(frm), self.at(to), self.visited(to)]
        return precond, effect

    @action(Door, Location, Location)
    def open_door(self, door, loc1, loc2):
        precond = [self.at(loc1), self.connects(door, loc1, loc2), self.closed(door)]
        effect = [~self.closed(door), self.open(door)]
        return precond, effect

    @action(Door, Location, Location)
    def close_door(self, door, loc1, loc2):
        precond = [self.at(loc1), self.connects(door, loc1, loc2), self.open(door)]
        effect = [~self.open(door), self.closed(door)]
        return precond, effect

### Python IR: problem class
from py2pddl import goal, init

class ExploreProblem(ExploreDomain):
    def __init__(self):
        super().__init__()
        self.locationObjs = ExploreDomain.Location.create_objs(["kitchen", "patio", "room_west"])
        self.doorObjs = ExploreDomain.Door.create_objs(["door_south", "door_west"])

    @init
    def init(self):
        return [
            self.at(self.locationObjs["kitchen"]),
            self.closed(self.doorObjs["door_south"]),
            self.closed(self.doorObjs["door_west"]),
            self.connects(self.doorObjs["door_south"], self.locationObjs["kitchen"], self.locationObjs["patio"]),
            self.connects(self.doorObjs["door_west"], self.locationObjs["kitchen"], self.locationObjs["room_west"]),
            self.visited(self.locationObjs["kitchen"]),
        ]

    @goal
    def goal(self):
        return [
            self.visited(self.locationObjs["patio"]),
            self.visited(self.locationObjs["room_west"]),
        ]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain explore-domain)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (connects ?dir - direction ?loc1 - location ?loc2 - location)
    (open ?dir - direction)
    (closed ?dir - direction)
  )
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (connects ?dir ?loc1 ?loc2) (closed ?dir))
    :effect (and (not (closed ?dir)) (open ?dir))
  )
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (open ?dir) (connects ?dir ?from ?to))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[PDDL pf]
(define (problem explore-problem)
  (:domain explore-domain)
  (:objects
    kitchen patio room_west - location
    door_south door_west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (closed door_south)
    (closed door_west)
    (connects door_south kitchen patio)
    (connects door_west kitchen room_west)
  )
  (:goal (and (visited patio) (visited room_west)))
)
Actions from solver: None 
Raw plan text:  
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORE-DOMAIN
	Problem: EXPLORE-PROBLEM
	#Actions: 4
	#Fluents: 9
Goals found: 2
Goals_Edges found: 2
Starting search with 1-BFWS...
--[2 / 0]--
--[2 / 1]--
--[1 / 0]--
--[1 / 3]--
--[1 / 4]--
Total time: 0.000114
Nodes generated during search: 8
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
Fast-BFS search completed in 0.000114 secs
Starting search with BFWS(novel,land,h_(add)ff)...
Landmarks found: 4
Landmarks_Edges found: 6
--[6 / 4294967295]--
--[6 / 4]--
--[6 / 3]--
--[5 / 3]--
--[5 / 2]--
--[4 / 2]--
Total time: 4.80001e-05
Nodes generated during search: 5
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
BFS search completed in 4.80001e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    No validation log.

[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreDomain(Domain):
    Location = create_type("Location")
    Door = create_type("Door")

    @predicate(Location)
    def at(self, loc):
        """Agent is at a location"""

    @predicate(Location)
    def visited(self, loc):
        """Location has been visited"""

    @predicate(Door, Location, Location)
    def connects(self, door, loc1, loc2):
        """Door connects two locations"""

    @predicate(Door)
    def open(self, door):
        """Door is open"""

    @predicate(Door)
    def closed(self, door):
        """Door is closed"""

    @action(Location, Location, Door)
    def move(self, frm, to, door):
        precond = [self.at(frm), self.open(door), self.connects(door, frm, to)]
        effect = [~self.at(frm), self.at(to), self.visited(to)]
        return precond, effect

    @action(Door, Location, Location)
    def open_door(self, door, loc1, loc2):
        precond = [self.at(loc1), self.connects(door, loc1, loc2), self.closed(door)]
        effect = [~self.closed(door), self.open(door)]
        return precond, effect

    @action(Door, Location, Location)
    def close_door(self, door, loc1, loc2):
        precond = [self.at(loc1), self.connects(door, loc1, loc2), self.open(door)]
        effect = [~self.open(door), self.closed(door)]
        return precond, effect

[py_problem]
from py2pddl import goal, init

class ExploreProblem(ExploreDomain):
    def __init__(self):
        super().__init__()
        self.locationObjs = ExploreDomain.Location.create_objs(["kitchen", "patio", "room_west"])
        self.doorObjs = ExploreDomain.Door.create_objs(["door_south", "door_west"])

    @init
    def init(self):
        return [
            self.at(self.locationObjs["kitchen"]),
            self.closed(self.doorObjs["door_south"]),
            self.closed(self.doorObjs["door_west"]),
            self.connects(self.doorObjs["door_south"], self.locationObjs["kitchen"], self.locationObjs["patio"]),
            self.connects(self.doorObjs["door_west"], self.locationObjs["kitchen"], self.locationObjs["room_west"]),
            self.visited(self.locationObjs["kitchen"]),
        ]

    @goal
    def goal(self):
        return [
            self.visited(self.locationObjs["patio"]),
            self.visited(self.locationObjs["room_west"]),
        ]


### Previous PDDL (generated from the IR)
[df]
(define (domain explore-domain)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (connects ?dir - direction ?loc1 - location ?loc2 - location)
    (open ?dir - direction)
    (closed ?dir - direction)
  )
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (connects ?dir ?loc1 ?loc2) (closed ?dir))
    :effect (and (not (closed ?dir)) (open ?dir))
  )
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (open ?dir) (connects ?dir ?from ?to))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[pf]
(define (problem explore-problem)
  (:domain explore-domain)
  (:objects
    kitchen patio room_west - location
    door_south door_west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (closed door_south)
    (closed door_west)
    (connects door_south kitchen patio)
    (connects door_west kitchen room_west)
  )
  (:goal (and (visited patio) (visited room_west)))
)
### Planner Error from previous PDDL (if any)
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORE-DOMAIN
	Problem: EXPLORE-PROBLEM
	#Actions: 4
	#Fluents: 9
Goals found: 2
Goals_Edges found: 2
Starting search with 1-BFWS...
--[2 / 0]--
--[2 / 1]--
--[1 / 0]--
--[1 / 3]--
--[1 / 4]--
Total time: 0.000114
Nodes generated during search: 8
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
Fast-BFS search completed in 0.000114 secs
Starting search with BFWS(novel,land,h_(add)ff)...
Landmarks found: 4
Landmarks_Edges found: 6
--[6 / 4294967295]--
--[6 / 4]--
--[6 / 3]--
--[5 / 3]--
--[5 / 2]--
--[4 / 2]--
Total time: 4.80001e-05
Nodes generated during search: 5
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
BFS search completed in 4.80001e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    No validation log.

### Environment feedback from previous action (if any)
N/A

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreDomain(Domain):
    Location = create_type("Location")
    Door = create_type("Door")

    @predicate(Location)
    def at(self, loc):
        """Agent is at a location"""

    @predicate(Location)
    def visited(self, loc):
        """Location has been visited"""

    @predicate(Door, Location, Location)
    def connects(self, door, loc1, loc2):
        """Door connects two locations"""

    @predicate(Door)
    def open(self, door):
        """Door is open"""

    @predicate(Door)
    def closed(self, door):
        """Door is closed"""

    @action(Location, Location, Door)
    def move(self, frm, to, door):
        precond = [self.at(frm), self.open(door), self.connects(door, frm, to)]
        effect = [~self.at(frm), self.at(to), self.visited(to)]
        return precond, effect

    @action(Door, Location, Location)
    def open_door(self, door, loc1, loc2):
        precond = [self.at(loc1), self.connects(door, loc1, loc2), self.closed(door)]
        effect = [~self.closed(door), self.open(door)]
        return precond, effect

    @action(Door, Location, Location)
    def close_door(self, door, loc1, loc2):
        precond = [self.at(loc1), self.connects(door, loc1, loc2), self.open(door)]
        effect = [~self.open(door), self.closed(door)]
        return precond, effect
Generated py_problem:
from py2pddl import goal, init

class ExploreProblem(ExploreDomain):
    def __init__(self):
        super().__init__()
        self.locationObjs = ExploreDomain.Location.create_objs(["kitchen", "patio", "room_west"])
        self.doorObjs = ExploreDomain.Door.create_objs(["door_south", "door_west"])

    @init
    def init(self):
        return [
            self.at(self.locationObjs["kitchen"]),
            self.closed(self.doorObjs["door_south"]),
            self.closed(self.doorObjs["door_west"]),
            self.connects(self.doorObjs["door_south"], self.locationObjs["kitchen"], self.locationObjs["patio"]),
            self.connects(self.doorObjs["door_west"], self.locationObjs["kitchen"], self.locationObjs["room_west"]),
            self.visited(self.locationObjs["kitchen"]),
        ]

    @goal
    def goal(self):
        return [
            self.visited(self.locationObjs["patio"]),
            self.visited(self.locationObjs["room_west"]),
        ]

--- Attempting to Plan (Small Loop Try #5) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)


- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain explore-domain)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (connects ?dir - direction ?loc1 - location ?loc2 - location)
    (open ?dir - direction)
    (closed ?dir - direction)
  )
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (connects ?dir ?loc1 ?loc2) (closed ?dir))
    :effect (and (not (closed ?dir)) (open ?dir))
  )
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (open ?dir) (connects ?dir ?from ?to))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[Problem file]
(define (problem explore-problem)
  (:domain explore-domain)
  (:objects
    kitchen patio room_west - location
    door_south door_west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (closed door_south)
    (closed door_west)
    (connects door_south kitchen patio)
    (connects door_west kitchen room_west)
  )
  (:goal (and (visited patio) (visited room_west)))
)

### (Optional) Planner/validator feedback to fix
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORE-DOMAIN
	Problem: EXPLORE-PROBLEM
	#Actions: 4
	#Fluents: 9
Goals found: 2
Goals_Edges found: 2
Starting search with 1-BFWS...
--[2 / 0]--
--[2 / 1]--
--[1 / 0]--
--[1 / 3]--
--[1 / 4]--
Total time: 0.000114
Nodes generated during search: 8
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
Fast-BFS search completed in 0.000114 secs
Starting search with BFWS(novel,land,h_(add)ff)...
Landmarks found: 4
Landmarks_Edges found: 6
--[6 / 4294967295]--
--[6 / 4]--
--[6 / 3]--
--[5 / 3]--
--[5 / 2]--
--[4 / 2]--
Total time: 4.80001e-05
Nodes generated during search: 5
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
BFS search completed in 4.80001e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    No validation log.


### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreDomain(Domain):
    Location = create_type("Location")
    Door = create_type("Door")

    @predicate(Location)
    def at(self, loc):
        """Agent is at a location"""

    @predicate(Location)
    def visited(self, loc):
        """Location has been visited"""

    @predicate(Door, Location, Location)
    def connects(self, door, loc1, loc2):
        """Door connects two locations"""

    @predicate(Door)
    def open(self, door):
        """Door is open"""

    @predicate(Door)
    def closed(self, door):
        """Door is closed"""

    @action(Location, Location, Door)
    def move(self, frm, to, door):
        precond = [self.at(frm), self.open(door), self.connects(door, frm, to)]
        effect = [~self.at(frm), self.at(to), self.visited(to)]
        return precond, effect

    @action(Door, Location, Location)
    def open_door(self, door, loc1, loc2):
        precond = [self.at(loc1), self.connects(door, loc1, loc2), self.closed(door)]
        effect = [~self.closed(door), self.open(door)]
        return precond, effect

    @action(Door, Location, Location)
    def close_door(self, door, loc1, loc2):
        precond = [self.at(loc1), self.connects(door, loc1, loc2), self.open(door)]
        effect = [~self.open(door), self.closed(door)]
        return precond, effect

### Python IR: problem class
from py2pddl import goal, init

class ExploreProblem(ExploreDomain):
    def __init__(self):
        super().__init__()
        self.locationObjs = ExploreDomain.Location.create_objs(["kitchen", "patio", "room_west"])
        self.doorObjs = ExploreDomain.Door.create_objs(["door_south", "door_west"])

    @init
    def init(self):
        return [
            self.at(self.locationObjs["kitchen"]),
            self.closed(self.doorObjs["door_south"]),
            self.closed(self.doorObjs["door_west"]),
            self.connects(self.doorObjs["door_south"], self.locationObjs["kitchen"], self.locationObjs["patio"]),
            self.connects(self.doorObjs["door_west"], self.locationObjs["kitchen"], self.locationObjs["room_west"]),
            self.visited(self.locationObjs["kitchen"]),
        ]

    @goal
    def goal(self):
        return [
            self.visited(self.locationObjs["patio"]),
            self.visited(self.locationObjs["room_west"]),
        ]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain explore-domain)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (connects ?dir - direction ?loc1 - location ?loc2 - location)
    (open ?dir - direction)
    (closed ?dir - direction)
  )
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (connects ?dir ?loc1 ?loc2) (closed ?dir))
    :effect (and (not (closed ?dir)) (open ?dir))
  )
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (open ?dir) (connects ?dir ?from ?to))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[PDDL pf]
(define (problem explore-problem)
  (:domain explore-domain)
  (:objects
    kitchen patio room_west - location
    door_south door_west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (closed door_south)
    (closed door_west)
    (connects door_south kitchen patio)
    (connects door_west kitchen room_west)
  )
  (:goal (and (visited patio) (visited room_west)))
)
Actions from solver: None 
Raw plan text:  
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORE-DOMAIN
	Problem: EXPLORE-PROBLEM
	#Actions: 4
	#Fluents: 9
Goals found: 2
Goals_Edges found: 2
Starting search with 1-BFWS...
--[2 / 0]--
--[2 / 1]--
--[1 / 0]--
--[1 / 3]--
--[1 / 4]--
Total time: 0.00011
Nodes generated during search: 8
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
Fast-BFS search completed in 0.00011 secs
Starting search with BFWS(novel,land,h_(add)ff)...
Landmarks found: 4
Landmarks_Edges found: 6
--[6 / 4294967295]--
--[6 / 4]--
--[6 / 3]--
--[5 / 3]--
--[5 / 2]--
--[4 / 2]--
Total time: 4.69998e-05
Nodes generated during search: 5
Nodes expanded during search: 4
Plan found with cost: NOTFOUND
BFS search completed in 4.69998e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    No validation log.

