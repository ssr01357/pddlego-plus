Observations: You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. 
To the South you see a closed patio door. To the West you see a closed plain door.  
Gold path: ['look around', 'open door to south', 'open door to west', 'move south', 'open door to west', 'move north', 'move south', 'move west', 'open door to south', 'move east', 'move south', 'move north', 'move west', 'move east', 'move south', 'move north', 'move east', 'open door to north', 'move north', 'take coin'] 
Valid Actions: ['look around', 'close door to west', 'move west', 'open door to south', 'open door to west', 'inventory', 'move south', 'close door to south'] 
taskDescription: Your task is to search the environment and find the coin.  Once you find the coin, take it. 
brief_obs: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 
 


====Step 0==== 

----Larger Loop No. 0---- 
successful_actions: [] 
Small Loop, action_queue: [] 
[PyIR Prompt #1] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class HomeExploration(Domain):
    Location = create_type("Location")
    Door = create_type("Door")
    
    @predicate(Location)
    def visited(self, location):
        pass
        
    @predicate(Location, Door)
    def door_at(self, location, door):
        pass
    
    @predicate(Door)
    def door_open(self, door):
        pass
        
    @action(Location, Door)
    def open_door(self, location, door):
        precond = [self.door_at(location, door), ~self.door_open(door)]
        effect = [self.door_open(door)]
        return precond, effect
    
    @action(Location, Door)
    def close_door(self, location, door):
        precond = [self.door_at(location, door), self.door_open(door)]
        effect = [~self.door_open(door)]
        return precond, effect
    
    @action(Location, Location, Door)
    def move(self, current_location, new_location, door):
        precond = [self.visited(current_location), self.door_at(current_location, door), self.door_open(door)]
        effect = [self.visited(new_location), ~self.visited(current_location)]
        return precond, effect

Generated py_problem:
from py2pddl import goal, init

class HomeExplorationProblem(HomeExploration):
    def __init__(self):
        super().__init__()
        self.locations = HomeExploration.Location.create_objs(["kitchen", "patio", "unknown_room"])
        self.doors = HomeExploration.Door.create_objs(["patio_door", "plain_door"])

    @init
    def init(self):
        return [
            self.visited(self.locations["kitchen"]),
            self.door_at(self.locations["kitchen"], self.doors["patio_door"]),
            self.door_at(self.locations["kitchen"], self.doors["plain_door"]),
            ~self.door_open(self.doors["patio_door"]),
            ~self.door_open(self.doors["plain_door"])
        ]

    @goal
    def goal(self):
        return [
            self.visited(self.locations["patio"]),
            self.visited(self.locations["unknown_room"])
        ]

--Small Loop--: 0 
[IR→PDDL Prompt] 
You will be given a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class, along with the natrural language description of the domain and problem.
Your task is to generate syntactically correct domain file and problem file in Planning Domain Definition Language (PDDL), based on the provided information.

# Natural language description of the domain and problem
You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

# Python representation of PDDL domain file
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class HomeExploration(Domain):
    Location = create_type("Location")
    Door = create_type("Door")
    
    @predicate(Location)
    def visited(self, location):
        pass
        
    @predicate(Location, Door)
    def door_at(self, location, door):
        pass
    
    @predicate(Door)
    def door_open(self, door):
        pass
        
    @action(Location, Door)
    def open_door(self, location, door):
        precond = [self.door_at(location, door), ~self.door_open(door)]
        effect = [self.door_open(door)]
        return precond, effect
    
    @action(Location, Door)
    def close_door(self, location, door):
        precond = [self.door_at(location, door), self.door_open(door)]
        effect = [~self.door_open(door)]
        return precond, effect
    
    @action(Location, Location, Door)
    def move(self, current_location, new_location, door):
        precond = [self.visited(current_location), self.door_at(current_location, door), self.door_open(door)]
        effect = [self.visited(new_location), ~self.visited(current_location)]
        return precond, effect


# Python representation of PDDL problem file
from py2pddl import goal, init

class HomeExplorationProblem(HomeExploration):
    def __init__(self):
        super().__init__()
        self.locations = HomeExploration.Location.create_objs(["kitchen", "patio", "unknown_room"])
        self.doors = HomeExploration.Door.create_objs(["patio_door", "plain_door"])

    @init
    def init(self):
        return [
            self.visited(self.locations["kitchen"]),
            self.door_at(self.locations["kitchen"], self.doors["patio_door"]),
            self.door_at(self.locations["kitchen"], self.doors["plain_door"]),
            ~self.door_open(self.doors["patio_door"]),
            ~self.door_open(self.doors["plain_door"])
        ]

    @goal
    def goal(self):
        return [
            self.visited(self.locations["patio"]),
            self.visited(self.locations["unknown_room"])
        ]



Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain home_exploration)
  (:requirements :strips :typing)
  (:types Location Door)
  (:predicates
    (visited ?l - Location)
    (door_at ?l - Location ?d - Door)
    (door_open ?d - Door)
  )
  (:action open_door
    :parameters (?l - Location ?d - Door)
    :precondition (and (door_at ?l ?d) (not (door_open ?d)))
    :effect (door_open ?d)
  )
  (:action close_door
    :parameters (?l - Location ?d - Door)
    :precondition (and (door_at ?l ?d) (door_open ?d))
    :effect (not (door_open ?d))
  )
  (:action move
    :parameters (?cl - Location ?nl - Location ?d - Door)
    :precondition (and (visited ?cl) (door_at ?cl ?d) (door_open ?d))
    :effect (and (visited ?nl) (not (visited ?cl)))
  )
)

[PDDL pf]
(define (problem home_exploration_problem)
  (:domain home_exploration)
  (:objects
    kitchen patio unknown_room - Location
    patio_door plain_door - Door
  )
  (:init 
    (visited kitchen)
    (door_at kitchen patio_door)
    (door_at kitchen plain_door)
    (not (door_open patio_door))
    (not (door_open plain_door))
  )
  (:goal
    (and
      (visited patio)
      (visited unknown_room)
    )
  )
)
Actions from solver(df, pf): None 
--Small Loop--: 1 
[IR→PDDL Prompt Retry] 
You will be given a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class, along with the natrural language description of the domain and problem.
Your task is to generate syntactically correct domain file and problem file in Planning Domain Definition Language (PDDL), based on the provided information.

# Natural language description of the domain and problem
You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

# Python representation of PDDL domain file
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class HomeExploration(Domain):
    Location = create_type("Location")
    Door = create_type("Door")
    
    @predicate(Location)
    def visited(self, location):
        pass
        
    @predicate(Location, Door)
    def door_at(self, location, door):
        pass
    
    @predicate(Door)
    def door_open(self, door):
        pass
        
    @action(Location, Door)
    def open_door(self, location, door):
        precond = [self.door_at(location, door), ~self.door_open(door)]
        effect = [self.door_open(door)]
        return precond, effect
    
    @action(Location, Door)
    def close_door(self, location, door):
        precond = [self.door_at(location, door), self.door_open(door)]
        effect = [~self.door_open(door)]
        return precond, effect
    
    @action(Location, Location, Door)
    def move(self, current_location, new_location, door):
        precond = [self.visited(current_location), self.door_at(current_location, door), self.door_open(door)]
        effect = [self.visited(new_location), ~self.visited(current_location)]
        return precond, effect


# Python representation of PDDL problem file
from py2pddl import goal, init

class HomeExplorationProblem(HomeExploration):
    def __init__(self):
        super().__init__()
        self.locations = HomeExploration.Location.create_objs(["kitchen", "patio", "unknown_room"])
        self.doors = HomeExploration.Door.create_objs(["patio_door", "plain_door"])

    @init
    def init(self):
        return [
            self.visited(self.locations["kitchen"]),
            self.door_at(self.locations["kitchen"], self.doors["patio_door"]),
            self.door_at(self.locations["kitchen"], self.doors["plain_door"]),
            ~self.door_open(self.doors["patio_door"]),
            ~self.door_open(self.doors["plain_door"])
        ]

    @goal
    def goal(self):
        return [
            self.visited(self.locations["patio"]),
            self.visited(self.locations["unknown_room"])
        ]



Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain home_exploration)
  (:requirements :strips)
  (:types Location Door)
  (:predicates 
    (visited ?l - Location)
    (door_at ?l - Location ?d - Door)
    (door_open ?d - Door)
  )
  (:action open_door
    :parameters (?l - Location ?d - Door)
    :precondition (and (door_at ?l ?d) (not (door_open ?d)))
    :effect (door_open ?d)
  )
  (:action close_door
    :parameters (?l - Location ?d - Door)
    :precondition (and (door_at ?l ?d) (door_open ?d))
    :effect (not (door_open ?d))
  )
  (:action move
    :parameters (?cl - Location ?nl - Location ?d - Door)
    :precondition (and (visited ?cl) (door_at ?cl ?d) (door_open ?d))
    :effect (and (visited ?nl) (not (visited ?cl)))
  )
)

[PDDL pf]
(define (problem home_exploration_problem)
  (:domain home_exploration)
  (:objects
    kitchen patio unknown_room - Location
    patio_door plain_door - Door
  )
  (:init
    (visited kitchen)
    (door_at kitchen patio_door)
    (door_at kitchen plain_door)
    (not (door_open patio_door))
    (not (door_open plain_door))
  )
  (:goal
    (and
      (visited patio)
      (visited unknown_room)
    )
  )
)
Actions from solver(df, pf): None 
--Small Loop--: 2 
[IR→PDDL Prompt Retry] 
You will be given a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class, along with the natrural language description of the domain and problem.
Your task is to generate syntactically correct domain file and problem file in Planning Domain Definition Language (PDDL), based on the provided information.

# Natural language description of the domain and problem
You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

# Python representation of PDDL domain file
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class HomeExploration(Domain):
    Location = create_type("Location")
    Door = create_type("Door")
    
    @predicate(Location)
    def visited(self, location):
        pass
        
    @predicate(Location, Door)
    def door_at(self, location, door):
        pass
    
    @predicate(Door)
    def door_open(self, door):
        pass
        
    @action(Location, Door)
    def open_door(self, location, door):
        precond = [self.door_at(location, door), ~self.door_open(door)]
        effect = [self.door_open(door)]
        return precond, effect
    
    @action(Location, Door)
    def close_door(self, location, door):
        precond = [self.door_at(location, door), self.door_open(door)]
        effect = [~self.door_open(door)]
        return precond, effect
    
    @action(Location, Location, Door)
    def move(self, current_location, new_location, door):
        precond = [self.visited(current_location), self.door_at(current_location, door), self.door_open(door)]
        effect = [self.visited(new_location), ~self.visited(current_location)]
        return precond, effect


# Python representation of PDDL problem file
from py2pddl import goal, init

class HomeExplorationProblem(HomeExploration):
    def __init__(self):
        super().__init__()
        self.locations = HomeExploration.Location.create_objs(["kitchen", "patio", "unknown_room"])
        self.doors = HomeExploration.Door.create_objs(["patio_door", "plain_door"])

    @init
    def init(self):
        return [
            self.visited(self.locations["kitchen"]),
            self.door_at(self.locations["kitchen"], self.doors["patio_door"]),
            self.door_at(self.locations["kitchen"], self.doors["plain_door"]),
            ~self.door_open(self.doors["patio_door"]),
            ~self.door_open(self.doors["plain_door"])
        ]

    @goal
    def goal(self):
        return [
            self.visited(self.locations["patio"]),
            self.visited(self.locations["unknown_room"])
        ]



Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain home_exploration)
  (:requirements :strips :typing)
  (:types Location Door)
  (:predicates 
    (visited ?l - Location)
    (door_at ?l - Location ?d - Door)
    (door_open ?d - Door)
  )
  (:action open_door
    :parameters (?l - Location ?d - Door)
    :precondition (and (door_at ?l ?d) (not (door_open ?d)))
    :effect (door_open ?d)
  )
  (:action close_door
    :parameters (?l - Location ?d - Door)
    :precondition (and (door_at ?l ?d) (door_open ?d))
    :effect (not (door_open ?d))
  )
  (:action move
    :parameters (?cl - Location ?nl - Location ?d - Door)
    :precondition (and (visited ?cl) (door_at ?cl ?d) (door_open ?d))
    :effect (and (visited ?nl) (not (visited ?cl)))
  )
)

[PDDL pf]
(define (problem home_exploration_problem)
  (:domain home_exploration)
  (:objects 
    kitchen patio unknown_room - Location
    patio_door plain_door - Door
  )
  (:init 
    (visited kitchen)
    (door_at kitchen patio_door)
    (door_at kitchen plain_door)
    (not (door_open patio_door))
    (not (door_open plain_door))
  )
  (:goal (and
    (visited patio)
    (visited unknown_room)
  ))
)
Actions from solver(df, pf): None 
--Small Loop--: 3 
[IR→PDDL Prompt Retry] 
You will be given a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class, along with the natrural language description of the domain and problem.
Your task is to generate syntactically correct domain file and problem file in Planning Domain Definition Language (PDDL), based on the provided information.

# Natural language description of the domain and problem
You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

# Python representation of PDDL domain file
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class HomeExploration(Domain):
    Location = create_type("Location")
    Door = create_type("Door")
    
    @predicate(Location)
    def visited(self, location):
        pass
        
    @predicate(Location, Door)
    def door_at(self, location, door):
        pass
    
    @predicate(Door)
    def door_open(self, door):
        pass
        
    @action(Location, Door)
    def open_door(self, location, door):
        precond = [self.door_at(location, door), ~self.door_open(door)]
        effect = [self.door_open(door)]
        return precond, effect
    
    @action(Location, Door)
    def close_door(self, location, door):
        precond = [self.door_at(location, door), self.door_open(door)]
        effect = [~self.door_open(door)]
        return precond, effect
    
    @action(Location, Location, Door)
    def move(self, current_location, new_location, door):
        precond = [self.visited(current_location), self.door_at(current_location, door), self.door_open(door)]
        effect = [self.visited(new_location), ~self.visited(current_location)]
        return precond, effect


# Python representation of PDDL problem file
from py2pddl import goal, init

class HomeExplorationProblem(HomeExploration):
    def __init__(self):
        super().__init__()
        self.locations = HomeExploration.Location.create_objs(["kitchen", "patio", "unknown_room"])
        self.doors = HomeExploration.Door.create_objs(["patio_door", "plain_door"])

    @init
    def init(self):
        return [
            self.visited(self.locations["kitchen"]),
            self.door_at(self.locations["kitchen"], self.doors["patio_door"]),
            self.door_at(self.locations["kitchen"], self.doors["plain_door"]),
            ~self.door_open(self.doors["patio_door"]),
            ~self.door_open(self.doors["plain_door"])
        ]

    @goal
    def goal(self):
        return [
            self.visited(self.locations["patio"]),
            self.visited(self.locations["unknown_room"])
        ]



Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain home_exploration)
  (:requirements :strips :typing)
  (:types Location Door)
  
  (:predicates
    (visited ?l - Location)
    (door_at ?l - Location ?d - Door)
    (door_open ?d - Door)
  )
  
  (:action open_door
    :parameters (?l - Location ?d - Door)
    :precondition (and (door_at ?l ?d) (not (door_open ?d)))
    :effect (door_open ?d)
  )
  
  (:action close_door
    :parameters (?l - Location ?d - Door)
    :precondition (and (door_at ?l ?d) (door_open ?d))
    :effect (not (door_open ?d))
  )
  
  (:action move
    :parameters (?cl - Location ?nl - Location ?d - Door)
    :precondition (and (visited ?cl) (door_at ?cl ?d) (door_open ?d))
    :effect (and (visited ?nl) (not (visited ?cl)))
  )
)

[PDDL pf]
(define (problem explore_home)
  (:domain home_exploration)
  (:objects 
    kitchen patio unknown_room - Location
    patio_door plain_door - Door
  )
  
  (:init
    (visited kitchen)
    (door_at kitchen patio_door)
    (door_at kitchen plain_door)
    (not (door_open patio_door))
    (not (door_open plain_door))
  )
  
  (:goal
    (and
      (visited patio)
      (visited unknown_room)
    )
  )
)
Actions from solver(df, pf): None 
--Small Loop--: 4 
[IR→PDDL Prompt Retry] 
You will be given a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class, along with the natrural language description of the domain and problem.
Your task is to generate syntactically correct domain file and problem file in Planning Domain Definition Language (PDDL), based on the provided information.

# Natural language description of the domain and problem
You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

# Python representation of PDDL domain file
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class HomeExploration(Domain):
    Location = create_type("Location")
    Door = create_type("Door")
    
    @predicate(Location)
    def visited(self, location):
        pass
        
    @predicate(Location, Door)
    def door_at(self, location, door):
        pass
    
    @predicate(Door)
    def door_open(self, door):
        pass
        
    @action(Location, Door)
    def open_door(self, location, door):
        precond = [self.door_at(location, door), ~self.door_open(door)]
        effect = [self.door_open(door)]
        return precond, effect
    
    @action(Location, Door)
    def close_door(self, location, door):
        precond = [self.door_at(location, door), self.door_open(door)]
        effect = [~self.door_open(door)]
        return precond, effect
    
    @action(Location, Location, Door)
    def move(self, current_location, new_location, door):
        precond = [self.visited(current_location), self.door_at(current_location, door), self.door_open(door)]
        effect = [self.visited(new_location), ~self.visited(current_location)]
        return precond, effect


# Python representation of PDDL problem file
from py2pddl import goal, init

class HomeExplorationProblem(HomeExploration):
    def __init__(self):
        super().__init__()
        self.locations = HomeExploration.Location.create_objs(["kitchen", "patio", "unknown_room"])
        self.doors = HomeExploration.Door.create_objs(["patio_door", "plain_door"])

    @init
    def init(self):
        return [
            self.visited(self.locations["kitchen"]),
            self.door_at(self.locations["kitchen"], self.doors["patio_door"]),
            self.door_at(self.locations["kitchen"], self.doors["plain_door"]),
            ~self.door_open(self.doors["patio_door"]),
            ~self.door_open(self.doors["plain_door"])
        ]

    @goal
    def goal(self):
        return [
            self.visited(self.locations["patio"]),
            self.visited(self.locations["unknown_room"])
        ]



Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain home-exploration)
  (:requirements :strips :typing)
  (:types Location Door)
  (:predicates 
    (visited ?loc - Location)
    (door_at ?loc - Location ?door - Door)
    (door_open ?door - Door)
  )
  (:action open_door
    :parameters (?loc - Location ?door - Door)
    :precondition (and (door_at ?loc ?door) (not (door_open ?door)))
    :effect (and (door_open ?door))
  )
  (:action close_door
    :parameters (?loc - Location ?door - Door)
    :precondition (and (door_at ?loc ?door) (door_open ?door))
    :effect (and (not (door_open ?door)))
  )
  (:action move
    :parameters (?current_loc - Location ?new_loc - Location ?door - Door)
    :precondition (and (visited ?current_loc) (door_at ?current_loc ?door) (door_open ?door))
    :effect (and (visited ?new_loc) (not (visited ?current_loc)))
  )
)

[PDDL pf]
(define (problem home-exploration-problem)
  (:domain home-exploration)
  (:objects 
    kitchen patio unknown_room - Location
    patio_door plain_door - Door
  )
  (:init 
    (visited kitchen)
    (door_at kitchen patio_door)
    (door_at kitchen plain_door)
    (not (door_open patio_door))
    (not (door_open plain_door))
  )
  (:goal 
    (and 
      (visited patio)
      (visited unknown_room)
    )
  )
)
Actions from solver(df, pf): None 
--Small Loop--: 5 
[IR→PDDL Prompt Retry] 
You will be given a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class, along with the natrural language description of the domain and problem.
Your task is to generate syntactically correct domain file and problem file in Planning Domain Definition Language (PDDL), based on the provided information.

# Natural language description of the domain and problem
You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

# Python representation of PDDL domain file
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class HomeExploration(Domain):
    Location = create_type("Location")
    Door = create_type("Door")
    
    @predicate(Location)
    def visited(self, location):
        pass
        
    @predicate(Location, Door)
    def door_at(self, location, door):
        pass
    
    @predicate(Door)
    def door_open(self, door):
        pass
        
    @action(Location, Door)
    def open_door(self, location, door):
        precond = [self.door_at(location, door), ~self.door_open(door)]
        effect = [self.door_open(door)]
        return precond, effect
    
    @action(Location, Door)
    def close_door(self, location, door):
        precond = [self.door_at(location, door), self.door_open(door)]
        effect = [~self.door_open(door)]
        return precond, effect
    
    @action(Location, Location, Door)
    def move(self, current_location, new_location, door):
        precond = [self.visited(current_location), self.door_at(current_location, door), self.door_open(door)]
        effect = [self.visited(new_location), ~self.visited(current_location)]
        return precond, effect


# Python representation of PDDL problem file
from py2pddl import goal, init

class HomeExplorationProblem(HomeExploration):
    def __init__(self):
        super().__init__()
        self.locations = HomeExploration.Location.create_objs(["kitchen", "patio", "unknown_room"])
        self.doors = HomeExploration.Door.create_objs(["patio_door", "plain_door"])

    @init
    def init(self):
        return [
            self.visited(self.locations["kitchen"]),
            self.door_at(self.locations["kitchen"], self.doors["patio_door"]),
            self.door_at(self.locations["kitchen"], self.doors["plain_door"]),
            ~self.door_open(self.doors["patio_door"]),
            ~self.door_open(self.doors["plain_door"])
        ]

    @goal
    def goal(self):
        return [
            self.visited(self.locations["patio"]),
            self.visited(self.locations["unknown_room"])
        ]



Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain HomeExploration)
    (:requirements :strips)
    (:types Location Door)
    (:predicates 
        (visited ?l - Location)
        (door_at ?l - Location ?d - Door)
        (door_open ?d - Door)
    )
    (:action open_door
        :parameters (?loc - Location ?d - Door)
        :precondition (and (door_at ?loc ?d) (not (door_open ?d)))
        :effect (door_open ?d)
    )
    (:action close_door
        :parameters (?loc - Location ?d - Door)
        :precondition (and (door_at ?loc ?d) (door_open ?d))
        :effect (not (door_open ?d))
    )
    (:action move
        :parameters (?c - Location ?n - Location ?d - Door)
        :precondition (and (visited ?c) (door_at ?c ?d) (door_open ?d))
        :effect (and (visited ?n) (not (visited ?c)))
    )
)

[PDDL pf]
(define (problem HomeExplorationProblem)
    (:domain HomeExploration)
    (:objects 
        kitchen patio unknown_room - Location
        patio_door plain_door - Door
    )
    (:init 
        (visited kitchen)
        (door_at kitchen patio_door)
        (door_at kitchen plain_door)
        (not (door_open patio_door))
        (not (door_open plain_door))
    )
    (:goal 
        (and (visited patio) (visited unknown_room))
    )
)
Actions from solver(df, pf): None 
