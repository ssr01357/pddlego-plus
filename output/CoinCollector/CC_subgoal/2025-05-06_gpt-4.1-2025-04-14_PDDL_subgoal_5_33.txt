Observations: You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. There is also a coin. 
To the North you see the corridor. To the West you see a closed frosted-glass door.  
Gold path: ['look around', 'take coin'] 
Valid Actions: ['inventory', 'look around', 'move west', 'move north', 'take coin', 'open door to west', 'close door to west'] 
taskDescription: Your task is to search the environment and find the coin.  Once you find the coin, take it. 
brief_obs: Action: look around
You are in the kitchen. To the North you see the corridor. To the West you see a closed frosted-glass door. 
 


====Step 0==== 

----Larger Loop No. 0---- 
successful_actions: [] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: look around
You are in the kitchen. To the North you see the corridor. To the West you see a closed frosted-glass door. 

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
     
Generated df and pf: 
 (define (domain explore)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (connected ?from - location ?to - location ?dir - direction)
    (door-closed ?from - location ?to - location ?dir - direction)
    (door-open ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (door-closed ?loc1 ?loc2 ?dir))
    :effect (and (door-open ?loc1 ?loc2 ?dir) (not (door-closed ?loc1 ?loc2 ?dir)))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connected ?from ?to ?dir)
                  (or (not (door-closed ?from ?to ?dir)) (door-open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
) 
 (define (problem explore-1)
  (:domain explore)
  (:objects
    kitchen corridor - location
    north west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen corridor north)
    (connected kitchen unknown-west west)
    (door-closed kitchen unknown-west west)
  )
  (:goal (visited corridor))
) 
Actions from solver(df, pf): None 
--Small Loop--: 1 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: look around
You are in the kitchen. To the North you see the corridor. To the West you see a closed frosted-glass door. 

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
    
        This is previous domain file: (define (domain explore)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (connected ?from - location ?to - location ?dir - direction)
    (door-closed ?from - location ?to - location ?dir - direction)
    (door-open ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (door-closed ?loc1 ?loc2 ?dir))
    :effect (and (door-open ?loc1 ?loc2 ?dir) (not (door-closed ?loc1 ?loc2 ?dir)))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connected ?from ?to ?dir)
                  (or (not (door-closed ?from ?to ?dir)) (door-open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)
        This is previous problem file: (define (problem explore-1)
  (:domain explore)
  (:objects
    kitchen corridor - location
    north west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen corridor north)
    (connected kitchen unknown-west west)
    (door-closed kitchen unknown-west west)
  )
  (:goal (visited corridor))
)
        This is all the memory you have in this game including each action and its corresponding observations: None
    
        You made some mistakes when generating those files. Here is the error message: None; 
        Now modify those two files according to the error message.
     
Generated df and pf: 
 (define (domain explore)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (connected ?from - location ?to - location ?dir - direction)
    (door-closed ?from - location ?to - location ?dir - direction)
    (door-open ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (door-closed ?loc1 ?loc2 ?dir))
    :effect (and (door-open ?loc1 ?loc2 ?dir) (not (door-closed ?loc1 ?loc2 ?dir)))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connected ?from ?to ?dir)
                  (or (not (door-closed ?from ?to ?dir)) (door-open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
) 
 (define (problem explore-1)
  (:domain explore)
  (:objects
    kitchen corridor unknown-west - location
    north west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen corridor north)
    (connected kitchen unknown-west west)
    (door-closed kitchen unknown-west west)
  )
  (:goal (visited corridor))
) 
Actions from solver(df, pf): ['move north'] 
Current action_queue: ['move north'] 
> move north 
 You are in the corridor. In one part of the room you see a key holder, that has nothing on it. There is also a shoe cabinet that is closed. You also see a umbrella stand, that has nothing on it. In another part of the room you see a hat rack, that has nothing on it. In one part of the room you see a coat hanger, that has nothing on it. 
To the North you see a closed sliding patio door. To the South you see the kitchen. To the East you see a closed wood door.  


====Step 1==== 

----Larger Loop No. 0---- 
successful_actions: ['move north'] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: move north
You are in the corridor. To the North you see a closed sliding patio door. To the South you see the kitchen. To the East you see a closed wood door. 

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
    
        This is previous domain file: (define (domain explore)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (connected ?from - location ?to - location ?dir - direction)
    (door-closed ?from - location ?to - location ?dir - direction)
    (door-open ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (door-closed ?loc1 ?loc2 ?dir))
    :effect (and (door-open ?loc1 ?loc2 ?dir) (not (door-closed ?loc1 ?loc2 ?dir)))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connected ?from ?to ?dir)
                  (or (not (door-closed ?from ?to ?dir)) (door-open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)
        This is previous problem file: (define (problem explore-1)
  (:domain explore)
  (:objects
    kitchen corridor unknown-west - location
    north west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen corridor north)
    (connected kitchen unknown-west west)
    (door-closed kitchen unknown-west west)
  )
  (:goal (visited corridor))
)
        This is all the memory you have in this game including each action and its corresponding observations: Action: look around
You are in the kitchen. To the North you see the corridor. To the West you see a closed frosted-glass door. 
Action: move north
You are in the corridor. To the North you see a closed sliding patio door. To the South you see the kitchen. To the East you see a closed wood door. 

    
        Now modify those two files according to the new observations and notes. Fix any errors you made in the previous setting according to the new observation.
        Generate updated files based on your new observation.
     
Generated df and pf: 
 (define (domain explore)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (connected ?from - location ?to - location ?dir - direction)
    (door-closed ?from - location ?to - location ?dir - direction)
    (door-open ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (door-closed ?loc1 ?loc2 ?dir))
    :effect (and (door-open ?loc1 ?loc2 ?dir) (not (door-closed ?loc1 ?loc2 ?dir)))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connected ?from ?to ?dir)
                  (or (not (door-closed ?from ?to ?dir)) (door-open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
) 
 (define (problem explore-1)
  (:domain explore)
  (:objects
    kitchen corridor unknown-west unknown-north unknown-east - location
    north south east west - direction
  )
  (:init
    (at corridor)
    (visited kitchen)
    (visited corridor)
    (connected kitchen corridor north)
    (connected corridor kitchen south)
    (connected kitchen unknown-west west)
    (connected corridor unknown-north north)
    (connected corridor unknown-east east)
    (door-closed kitchen unknown-west west)
    (door-closed corridor unknown-north north)
    (door-closed corridor unknown-east east)
  )
  (:goal (visited unknown-north))
) 
Actions from solver(df, pf): ['open door to north', 'move north'] 
Current action_queue: ['open door to north', 'move north'] 
> open door to north 
 You open the sliding patio door, revealing the backyard.  
Small Loop, action_queue: ['move north'] 
Current action_queue: ['move north'] 
> move north 
 You are in the backyard. In one part of the room you see a barbeque. There is also a workbench, that has nothing on it. You also see a patio chair, that has nothing on it. In another part of the room you see a patio table, that has nothing on it. In one part of the room you see a clothes line, that has nothing on it. There is also a garden, that has nothing on it. 
Through an open sliding patio door, to the South you see the corridor.  


====Step 2==== 

----Larger Loop No. 0---- 
successful_actions: ['move north', 'open door to north', 'move north'] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: open door to north
You open the sliding patio door, revealing the backyard. 

Action: move north
You are in the backyard. Through an open sliding patio door, to the South you see the corridor. 

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
    
        This is previous domain file: (define (domain explore)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (connected ?from - location ?to - location ?dir - direction)
    (door-closed ?from - location ?to - location ?dir - direction)
    (door-open ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (door-closed ?loc1 ?loc2 ?dir))
    :effect (and (door-open ?loc1 ?loc2 ?dir) (not (door-closed ?loc1 ?loc2 ?dir)))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connected ?from ?to ?dir)
                  (or (not (door-closed ?from ?to ?dir)) (door-open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)
        This is previous problem file: (define (problem explore-1)
  (:domain explore)
  (:objects
    kitchen corridor unknown-west unknown-north unknown-east - location
    north south east west - direction
  )
  (:init
    (at corridor)
    (visited kitchen)
    (visited corridor)
    (connected kitchen corridor north)
    (connected corridor kitchen south)
    (connected kitchen unknown-west west)
    (connected corridor unknown-north north)
    (connected corridor unknown-east east)
    (door-closed kitchen unknown-west west)
    (door-closed corridor unknown-north north)
    (door-closed corridor unknown-east east)
  )
  (:goal (visited unknown-north))
)
        This is all the memory you have in this game including each action and its corresponding observations: Action: look around
You are in the kitchen. To the North you see the corridor. To the West you see a closed frosted-glass door. 
Action: move north
You are in the corridor. To the North you see a closed sliding patio door. To the South you see the kitchen. To the East you see a closed wood door. 
Action: open door to north
You open the sliding patio door, revealing the backyard. 
Action: move north
You are in the backyard. Through an open sliding patio door, to the South you see the corridor. 

    
        Now modify those two files according to the new observations and notes. Fix any errors you made in the previous setting according to the new observation.
        Generate updated files based on your new observation.
     
Generated df and pf: 
 (define (domain explore)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (connected ?from - location ?to - location ?dir - direction)
    (door-closed ?from - location ?to - location ?dir - direction)
    (door-open ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (door-closed ?loc1 ?loc2 ?dir))
    :effect (and (door-open ?loc1 ?loc2 ?dir) (not (door-closed ?loc1 ?loc2 ?dir)))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connected ?from ?to ?dir)
                  (or (not (door-closed ?from ?to ?dir)) (door-open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
) 
 (define (problem explore-1)
  (:domain explore)
  (:objects
    kitchen corridor backyard unknown-west unknown-east - location
    north south east west - direction
  )
  (:init
    (at backyard)
    (visited kitchen)
    (visited corridor)
    (visited backyard)
    (connected kitchen corridor north)
    (connected corridor kitchen south)
    (connected kitchen unknown-west west)
    (connected corridor backyard north)
    (connected corridor unknown-east east)
    (connected backyard corridor south)
    (door-closed kitchen unknown-west west)
    (door-open corridor backyard north)
    (door-open backyard corridor south)
    (door-closed corridor unknown-east east)
  )
  (:goal (visited unknown-east))
) 
Actions from solver(df, pf): ['move south', 'open door to east', 'move east'] 
Current action_queue: ['move south', 'open door to east', 'move east'] 
> move south 
 You are in the corridor. In one part of the room you see a key holder, that has nothing on it. There is also a shoe cabinet that is closed. You also see a umbrella stand, that has nothing on it. In another part of the room you see a hat rack, that has nothing on it. In one part of the room you see a coat hanger, that has nothing on it. 
Through an open sliding patio door, to the North you see the backyard. To the South you see the kitchen. To the East you see a closed wood door.  
Small Loop, action_queue: ['open door to east', 'move east'] 
Current action_queue: ['open door to east', 'move east'] 
> open door to east 
 You open the wood door, revealing the bedroom.  
Small Loop, action_queue: ['move east'] 
Current action_queue: ['move east'] 
> move east 
 You are in the bedroom. In one part of the room you see a dressing table, that has nothing on it. There is also a desk chair, that has nothing on it. You also see a desk, that has nothing on it. In another part of the room you see a chest of drawers that is closed. In one part of the room you see a wardrobe that is closed. There is also a night stand, that has nothing on it. You also see a bed, that has nothing on it. 
Through an open wood door, to the West you see the corridor.  


====Step 3==== 

----Larger Loop No. 0---- 
successful_actions: ['move north', 'open door to north', 'move north', 'move south', 'open door to east', 'move east'] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: move south
You are in the corridor. Through an open sliding patio door, to the North you see the backyard. To the South you see the kitchen. To the East you see a closed wood door. 

Action: open door to east
You open the wood door, revealing the bedroom. 

Action: move east
You are in the bedroom. Through an open wood door, to the West you see the corridor. 

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
    
        This is previous domain file: (define (domain explore)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (connected ?from - location ?to - location ?dir - direction)
    (door-closed ?from - location ?to - location ?dir - direction)
    (door-open ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (door-closed ?loc1 ?loc2 ?dir))
    :effect (and (door-open ?loc1 ?loc2 ?dir) (not (door-closed ?loc1 ?loc2 ?dir)))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connected ?from ?to ?dir)
                  (or (not (door-closed ?from ?to ?dir)) (door-open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)
        This is previous problem file: (define (problem explore-1)
  (:domain explore)
  (:objects
    kitchen corridor backyard unknown-west unknown-east - location
    north south east west - direction
  )
  (:init
    (at backyard)
    (visited kitchen)
    (visited corridor)
    (visited backyard)
    (connected kitchen corridor north)
    (connected corridor kitchen south)
    (connected kitchen unknown-west west)
    (connected corridor backyard north)
    (connected corridor unknown-east east)
    (connected backyard corridor south)
    (door-closed kitchen unknown-west west)
    (door-open corridor backyard north)
    (door-open backyard corridor south)
    (door-closed corridor unknown-east east)
  )
  (:goal (visited unknown-east))
)
        This is all the memory you have in this game including each action and its corresponding observations: Action: look around
You are in the kitchen. To the North you see the corridor. To the West you see a closed frosted-glass door. 
Action: move north
You are in the corridor. To the North you see a closed sliding patio door. To the South you see the kitchen. To the East you see a closed wood door. 
Action: open door to north
You open the sliding patio door, revealing the backyard. 
Action: move north
You are in the backyard. Through an open sliding patio door, to the South you see the corridor. 
Action: move south
You are in the corridor. Through an open sliding patio door, to the North you see the backyard. To the South you see the kitchen. To the East you see a closed wood door. 
Action: open door to east
You open the wood door, revealing the bedroom. 
Action: move east
You are in the bedroom. Through an open wood door, to the West you see the corridor. 

    
        Now modify those two files according to the new observations and notes. Fix any errors you made in the previous setting according to the new observation.
        Generate updated files based on your new observation.
     
Generated df and pf: 
 (define (domain explore)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (connected ?from - location ?to - location ?dir - direction)
    (door-closed ?from - location ?to - location ?dir - direction)
    (door-open ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (door-closed ?loc1 ?loc2 ?dir))
    :effect (and (door-open ?loc1 ?loc2 ?dir) (not (door-closed ?loc1 ?loc2 ?dir)))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connected ?from ?to ?dir)
                  (or (not (door-closed ?from ?to ?dir)) (door-open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)
 
 (define (problem explore-1)
  (:domain explore)
  (:objects
    kitchen corridor backyard bedroom unknown-west - location
    north south east west - direction
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (visited corridor)
    (visited backyard)
    (visited bedroom)
    (connected kitchen corridor north)
    (connected corridor kitchen south)
    (connected kitchen unknown-west west)
    (connected corridor backyard north)
    (connected backyard corridor south)
    (connected corridor bedroom east)
    (connected bedroom corridor west)
    (door-closed kitchen unknown-west west)
    (door-open corridor backyard north)
    (door-open backyard corridor south)
    (door-open corridor bedroom east)
    (door-open bedroom corridor west)
  )
  (:goal (visited unknown-west))
)
 
Actions from solver(df, pf): ['move west', 'move south', 'open door to west', 'move west'] 
Current action_queue: ['move west', 'move south', 'open door to west', 'move west'] 
> move west 
 You are in the corridor. In one part of the room you see a key holder, that has nothing on it. There is also a shoe cabinet that is closed. You also see a umbrella stand, that has nothing on it. In another part of the room you see a hat rack, that has nothing on it. In one part of the room you see a coat hanger, that has nothing on it. 
Through an open sliding patio door, to the North you see the backyard. To the South you see the kitchen. Through an open wood door, to the East you see the bedroom.  
Small Loop, action_queue: ['move south', 'open door to west', 'move west'] 
Current action_queue: ['move south', 'open door to west', 'move west'] 
Coin found!