Observations: You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. There is also a coin. 
To the North you see a closed frosted-glass door. To the South you see a closed screen door. To the West you see the corridor.  
Gold path: ['look around', 'take coin'] 
Valid Actions: ['move west', 'close door to south', 'take coin', 'close door to north', 'move south', 'open door to north', 'move north', 'inventory', 'open door to south', 'look around'] 
taskDescription: Your task is to search the environment and find the coin.  Once you find the coin, take it. 
brief_obs: Action: look around
You are in the kitchen. To the North you see a closed frosted-glass door. To the South you see a closed screen door. To the West you see the corridor. 
 


====Step 0==== 

----Larger Loop No. 0---- 
successful_actions: [] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: look around
You are in the kitchen. To the North you see a closed frosted-glass door. To the South you see a closed screen door. To the West you see the corridor. 

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
     
Generated df and pf: 
 (define (domain exploration)
  (:requirements :strips)
  (:types location direction)
  (:predicates
    (visited ?loc - location)
    (door-closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
  )
  
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (door-closed ?loc1 ?loc2 ?dir)
    :effect (and (door-open ?loc1 ?loc2 ?dir)
                 (not (door-closed ?loc1 ?loc2 ?dir)))
  )
  
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (visited ?from) (connected ?from ?to ?dir) (door-open ?from ?to ?dir))
    :effect (visited ?to)
  )
) 
 (define (problem explore-kitchen)
  (:domain exploration)
  (:objects
    kitchen corridor room_north room_south - location
    north south east west - direction
  )
  (:init
    (visited kitchen)
    
    ;; Connection to the corridor (west) is directly observable and passage is open
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (door-open kitchen corridor west)
    (door-open corridor kitchen east)
    
    ;; Observed closed frosted-glass door to the north implies a door connection to an unknown room
    (connected kitchen room_north north)
    (connected room_north kitchen south)
    (door-closed kitchen room_north north)
    (door-closed room_north kitchen south)
    
    ;; Observed closed screen door to the south implies a door connection to an unknown room
    (connected kitchen room_south south)
    (connected room_south kitchen north)
    (door-closed kitchen room_south south)
    (door-closed room_south kitchen north)
  )
  
  ;; Goal: explore a new location; here the corridor is the adjacent unvisited location
  (:goal (visited corridor))
) 
Actions from solver(df, pf): ['move west'] 
Current action_queue: ['move west'] 
> move west 
 You are in the corridor. In one part of the room you see a key holder, that has nothing on it. There is also a shoe cabinet that is closed. You also see a umbrella stand, that has nothing on it. In another part of the room you see a hat rack, that has nothing on it. In one part of the room you see a coat hanger, that has nothing on it. 
To the East you see the kitchen. To the West you see a closed wood door.  


====Step 1==== 

----Larger Loop No. 0---- 
successful_actions: ['move west'] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: move west
You are in the corridor. To the East you see the kitchen. To the West you see a closed wood door. 

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
    
        This is previous domain file: (define (domain exploration)
  (:requirements :strips)
  (:types location direction)
  (:predicates
    (visited ?loc - location)
    (door-closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
  )
  
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (door-closed ?loc1 ?loc2 ?dir)
    :effect (and (door-open ?loc1 ?loc2 ?dir)
                 (not (door-closed ?loc1 ?loc2 ?dir)))
  )
  
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (visited ?from) (connected ?from ?to ?dir) (door-open ?from ?to ?dir))
    :effect (visited ?to)
  )
)
        This is previous problem file: (define (problem explore-kitchen)
  (:domain exploration)
  (:objects
    kitchen corridor room_north room_south - location
    north south east west - direction
  )
  (:init
    (visited kitchen)
    
    ;; Connection to the corridor (west) is directly observable and passage is open
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (door-open kitchen corridor west)
    (door-open corridor kitchen east)
    
    ;; Observed closed frosted-glass door to the north implies a door connection to an unknown room
    (connected kitchen room_north north)
    (connected room_north kitchen south)
    (door-closed kitchen room_north north)
    (door-closed room_north kitchen south)
    
    ;; Observed closed screen door to the south implies a door connection to an unknown room
    (connected kitchen room_south south)
    (connected room_south kitchen north)
    (door-closed kitchen room_south south)
    (door-closed room_south kitchen north)
  )
  
  ;; Goal: explore a new location; here the corridor is the adjacent unvisited location
  (:goal (visited corridor))
)
        This is all the memory you have in this game including each action and its corresponding observations: Action: look around
You are in the kitchen. To the North you see a closed frosted-glass door. To the South you see a closed screen door. To the West you see the corridor. 
Action: move west
You are in the corridor. To the East you see the kitchen. To the West you see a closed wood door. 

    
        Now modify those two files according to the new observations and notes. Fix any errors you made in the previous setting according to the new observation.
        Generate updated files based on your new observation.
     
Generated df and pf: 
 (define (domain exploration)
  (:requirements :strips)
  (:types location direction)
  (:predicates
    (visited ?loc - location)
    (door-closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
  )
  
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (door-closed ?loc1 ?loc2 ?dir)
    :effect (and (door-open ?loc1 ?loc2 ?dir)
                 (not (door-closed ?loc1 ?loc2 ?dir)))
  )
  
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (visited ?from) (connected ?from ?to ?dir) (door-open ?from ?to ?dir))
    :effect (visited ?to)
  )
) 
 (define (problem explore-room_west)
  (:domain exploration)
  (:objects
    kitchen corridor room_north room_south room_west - location
    north south east west - direction
  )
  (:init
    (visited kitchen)
    (visited corridor)
    
    ;; Observed connection between kitchen and corridor
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (door-open kitchen corridor west)
    (door-open corridor kitchen east)
    
    ;; Observed closed frosted-glass door between kitchen and room_north
    (connected kitchen room_north north)
    (connected room_north kitchen south)
    (door-closed kitchen room_north north)
    (door-closed room_north kitchen south)
    
    ;; Observed closed screen door between kitchen and room_south
    (connected kitchen room_south south)
    (connected room_south kitchen north)
    (door-closed kitchen room_south south)
    (door-closed room_south kitchen north)
    
    ;; New observation: from corridor, a closed wood door to the west leads to room_west
    (connected corridor room_west west)
    (connected room_west corridor east)
    (door-closed corridor room_west west)
    (door-closed room_west corridor east)
  )
  (:goal (visited room_west))
) 
Actions from solver(df, pf): ['open door to west', 'move west'] 
Current action_queue: ['open door to west', 'move west'] 
> open door to west 
 You open the wood door, revealing the bedroom.  
Small Loop, action_queue: ['move west'] 
Current action_queue: ['move west'] 
> move west 
 You are in the bedroom. In one part of the room you see a dressing table, that has nothing on it. There is also a desk chair, that has nothing on it. You also see a desk, that has nothing on it. In another part of the room you see a chest of drawers that is closed. In one part of the room you see a wardrobe that is closed. There is also a night stand, that has nothing on it. You also see a bed, that has nothing on it. 
Through an open wood door, to the East you see the corridor.  


====Step 2==== 

----Larger Loop No. 0---- 
successful_actions: ['move west', 'open door to west', 'move west'] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: open door to west
You open the wood door, revealing the bedroom. 

Action: move west
You are in the bedroom. Through an open wood door, to the East you see the corridor. 

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
    
        This is previous domain file: (define (domain exploration)
  (:requirements :strips)
  (:types location direction)
  (:predicates
    (visited ?loc - location)
    (door-closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
  )
  
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (door-closed ?loc1 ?loc2 ?dir)
    :effect (and (door-open ?loc1 ?loc2 ?dir)
                 (not (door-closed ?loc1 ?loc2 ?dir)))
  )
  
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (visited ?from) (connected ?from ?to ?dir) (door-open ?from ?to ?dir))
    :effect (visited ?to)
  )
)
        This is previous problem file: (define (problem explore-room_west)
  (:domain exploration)
  (:objects
    kitchen corridor room_north room_south room_west - location
    north south east west - direction
  )
  (:init
    (visited kitchen)
    (visited corridor)
    
    ;; Observed connection between kitchen and corridor
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (door-open kitchen corridor west)
    (door-open corridor kitchen east)
    
    ;; Observed closed frosted-glass door between kitchen and room_north
    (connected kitchen room_north north)
    (connected room_north kitchen south)
    (door-closed kitchen room_north north)
    (door-closed room_north kitchen south)
    
    ;; Observed closed screen door between kitchen and room_south
    (connected kitchen room_south south)
    (connected room_south kitchen north)
    (door-closed kitchen room_south south)
    (door-closed room_south kitchen north)
    
    ;; New observation: from corridor, a closed wood door to the west leads to room_west
    (connected corridor room_west west)
    (connected room_west corridor east)
    (door-closed corridor room_west west)
    (door-closed room_west corridor east)
  )
  (:goal (visited room_west))
)
        This is all the memory you have in this game including each action and its corresponding observations: Action: look around
You are in the kitchen. To the North you see a closed frosted-glass door. To the South you see a closed screen door. To the West you see the corridor. 
Action: move west
You are in the corridor. To the East you see the kitchen. To the West you see a closed wood door. 
Action: open door to west
You open the wood door, revealing the bedroom. 
Action: move west
You are in the bedroom. Through an open wood door, to the East you see the corridor. 

    
        Now modify those two files according to the new observations and notes. Fix any errors you made in the previous setting according to the new observation.
        Generate updated files based on your new observation.
     
Generated df and pf: 
 (define (domain exploration)
  (:requirements :strips)
  (:types location direction)
  (:predicates
    (visited ?loc - location)
    (door-closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
  )
  
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (door-closed ?loc1 ?loc2 ?dir)
    :effect (and (door-open ?loc1 ?loc2 ?dir)
                 (not (door-closed ?loc1 ?loc2 ?dir)))
  )
  
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (visited ?from) (connected ?from ?to ?dir) (door-open ?from ?to ?dir))
    :effect (visited ?to)
  )
) 
 (define (problem explore-bedroom)
  (:domain exploration)
  (:objects
    kitchen corridor room_north room_south bedroom - location
    north south east west - direction
  )
  (:init
    (visited kitchen)
    (visited corridor)
    (visited bedroom)
    
    ;; Observed connection between kitchen and corridor
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (door-open kitchen corridor west)
    (door-open corridor kitchen east)
    
    ;; Observed closed frosted-glass door between kitchen and room_north
    (connected kitchen room_north north)
    (connected room_north kitchen south)
    (door-closed kitchen room_north north)
    (door-closed room_north kitchen south)
    
    ;; Observed closed screen door between kitchen and room_south
    (connected kitchen room_south south)
    (connected room_south kitchen north)
    (door-closed kitchen room_south south)
    (door-closed room_south kitchen north)
    
    ;; Updated observation: from corridor, an open wood door to the west leads to bedroom
    (connected corridor bedroom west)
    (connected bedroom corridor east)
    (door-open corridor bedroom west)
    (door-open bedroom corridor east)
  )
  (:goal (visited bedroom))
) 
Actions from solver(df, pf): None 
--Small Loop--: 1 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: open door to west
You open the wood door, revealing the bedroom. 

Action: move west
You are in the bedroom. Through an open wood door, to the East you see the corridor. 

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
    
        This is previous domain file: (define (domain exploration)
  (:requirements :strips)
  (:types location direction)
  (:predicates
    (visited ?loc - location)
    (door-closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
  )
  
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (door-closed ?loc1 ?loc2 ?dir)
    :effect (and (door-open ?loc1 ?loc2 ?dir)
                 (not (door-closed ?loc1 ?loc2 ?dir)))
  )
  
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (visited ?from) (connected ?from ?to ?dir) (door-open ?from ?to ?dir))
    :effect (visited ?to)
  )
)
        This is previous problem file: (define (problem explore-bedroom)
  (:domain exploration)
  (:objects
    kitchen corridor room_north room_south bedroom - location
    north south east west - direction
  )
  (:init
    (visited kitchen)
    (visited corridor)
    (visited bedroom)
    
    ;; Observed connection between kitchen and corridor
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (door-open kitchen corridor west)
    (door-open corridor kitchen east)
    
    ;; Observed closed frosted-glass door between kitchen and room_north
    (connected kitchen room_north north)
    (connected room_north kitchen south)
    (door-closed kitchen room_north north)
    (door-closed room_north kitchen south)
    
    ;; Observed closed screen door between kitchen and room_south
    (connected kitchen room_south south)
    (connected room_south kitchen north)
    (door-closed kitchen room_south south)
    (door-closed room_south kitchen north)
    
    ;; Updated observation: from corridor, an open wood door to the west leads to bedroom
    (connected corridor bedroom west)
    (connected bedroom corridor east)
    (door-open corridor bedroom west)
    (door-open bedroom corridor east)
  )
  (:goal (visited bedroom))
)
        This is all the memory you have in this game including each action and its corresponding observations: Action: look around
You are in the kitchen. To the North you see a closed frosted-glass door. To the South you see a closed screen door. To the West you see the corridor. 
Action: move west
You are in the corridor. To the East you see the kitchen. To the West you see a closed wood door. 
Action: open door to west
You open the wood door, revealing the bedroom. 
Action: move west
You are in the bedroom. Through an open wood door, to the East you see the corridor. 

    
        You made some mistakes when generating those files. Here is the error message: None; 
        Now modify those two files according to the error message.
     
Generated df and pf: 
 (define (domain exploration)
  (:requirements :strips)
  (:types location direction)
  (:predicates
    (visited ?loc - location)
    (door-closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (door-closed ?loc1 ?loc2 ?dir)
    :effect (and (door-open ?loc1 ?loc2 ?dir)
                 (not (door-closed ?loc1 ?loc2 ?dir)))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (visited ?from) (connected ?from ?to ?dir) (door-open ?from ?to ?dir))
    :effect (visited ?to)
  )
) 
 (define (problem explore-kitchen)
  (:domain exploration)
  (:objects
    kitchen corridor bedroom room_north room_south - location
    north south east west - direction
  )
  (:init
    (visited kitchen)
    (visited corridor)
    (visited bedroom)

    ;; Kitchen and Corridor connection
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (door-open kitchen corridor west)
    (door-open corridor kitchen east)

    ;; Kitchen and Room_North connection (closed frosted-glass door)
    (connected kitchen room_north north)
    (connected room_north kitchen south)
    (door-closed kitchen room_north north)
    (door-closed room_north kitchen south)

    ;; Kitchen and Room_South connection (closed screen door)
    (connected kitchen room_south south)
    (connected room_south kitchen north)
    (door-closed kitchen room_south south)
    (door-closed room_south kitchen north)

    ;; Corridor and Bedroom connection (wood door, now open)
    (connected corridor bedroom west)
    (connected bedroom corridor east)
    (door-open corridor bedroom west)
    (door-open bedroom corridor east)
  )
  (:goal (visited room_south))
) 
Actions from solver(df, pf): ['open door to south', 'move south'] 
Current action_queue: ['open door to south', 'move south'] 
> open door to south 
 Unknown action: I'm not sure what you mean. 

----Larger Loop No. 1---- 
successful_actions: ['move west', 'open door to west', 'move west'] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: open door to south
Unknown action: I'm not sure what you mean.

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
    
        This is previous domain file: (define (domain exploration)
  (:requirements :strips)
  (:types location direction)
  (:predicates
    (visited ?loc - location)
    (door-closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (door-closed ?loc1 ?loc2 ?dir)
    :effect (and (door-open ?loc1 ?loc2 ?dir)
                 (not (door-closed ?loc1 ?loc2 ?dir)))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (visited ?from) (connected ?from ?to ?dir) (door-open ?from ?to ?dir))
    :effect (visited ?to)
  )
)
        This is previous problem file: (define (problem explore-kitchen)
  (:domain exploration)
  (:objects
    kitchen corridor bedroom room_north room_south - location
    north south east west - direction
  )
  (:init
    (visited kitchen)
    (visited corridor)
    (visited bedroom)

    ;; Kitchen and Corridor connection
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (door-open kitchen corridor west)
    (door-open corridor kitchen east)

    ;; Kitchen and Room_North connection (closed frosted-glass door)
    (connected kitchen room_north north)
    (connected room_north kitchen south)
    (door-closed kitchen room_north north)
    (door-closed room_north kitchen south)

    ;; Kitchen and Room_South connection (closed screen door)
    (connected kitchen room_south south)
    (connected room_south kitchen north)
    (door-closed kitchen room_south south)
    (door-closed room_south kitchen north)

    ;; Corridor and Bedroom connection (wood door, now open)
    (connected corridor bedroom west)
    (connected bedroom corridor east)
    (door-open corridor bedroom west)
    (door-open bedroom corridor east)
  )
  (:goal (visited room_south))
)
        This is all the memory you have in this game including each action and its corresponding observations: Action: look around
You are in the kitchen. To the North you see a closed frosted-glass door. To the South you see a closed screen door. To the West you see the corridor. 
Action: move west
You are in the corridor. To the East you see the kitchen. To the West you see a closed wood door. 
Action: open door to west
You open the wood door, revealing the bedroom. 
Action: move west
You are in the bedroom. Through an open wood door, to the East you see the corridor. 

    
        Now modify those two files according to the new observations and notes. Fix any errors you made in the previous setting according to the new observation.
        Generate updated files based on your new observation.
    
        You have already generate files according to the observations. The df and pf can generate actions but after simulating,
        it got those errors: This is the action you take: open door to south.                                             When you try to open door, there is no door here or there is nothing in this direction.                                            If there is no door, you can directly move to that direction.
. Please review both files and fix them.
        Now modify those two files according to the error message.
     
Generated df and pf: 
 (define (domain exploration)
  (:requirements :strips)
  (:types location direction)
  (:predicates
    (visited ?loc - location)
    (door-closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (door-closed ?loc1 ?loc2 ?dir))
    :effect (and (door-open ?loc1 ?loc2 ?dir)
                 (not (door-closed ?loc1 ?loc2 ?dir)))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (visited ?from) (connected ?from ?to ?dir) (door-open ?from ?to ?dir))
    :effect (visited ?to)
  )
) 
 (define (problem explore-kitchen)
  (:domain exploration)
  (:objects
    kitchen corridor bedroom room_north room_south - location
    north south east west - direction
  )
  (:init
    (visited kitchen)
    (visited corridor)
    (visited bedroom)

    ;; Kitchen and Corridor connection (open door)
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (door-open kitchen corridor west)
    (door-open corridor kitchen east)

    ;; Kitchen and Room_North connection (closed frosted-glass door)
    (connected kitchen room_north north)
    (connected room_north kitchen south)
    (door-closed kitchen room_north north)
    (door-closed room_north kitchen south)

    ;; Kitchen and Room_South connection (closed screen door)
    (connected kitchen room_south south)
    (connected room_south kitchen north)
    (door-closed kitchen room_south south)
    (door-closed room_south kitchen north)

    ;; Corridor and Bedroom connection (wood door, now open)
    (connected corridor bedroom west)
    (connected bedroom corridor east)
    (door-open corridor bedroom west)
    (door-open bedroom corridor east)
  )
  (:goal (visited room_south))
) 
Actions from solver(df, pf): ['open door to south', 'move south'] 
Current action_queue: ['open door to south', 'move south'] 
> open door to south 
 Unknown action: I'm not sure what you mean. 

----Larger Loop No. 2---- 
successful_actions: ['move west', 'open door to west', 'move west'] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: open door to south
Unknown action: I'm not sure what you mean.

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
    
        This is previous domain file: (define (domain exploration)
  (:requirements :strips)
  (:types location direction)
  (:predicates
    (visited ?loc - location)
    (door-closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (door-closed ?loc1 ?loc2 ?dir))
    :effect (and (door-open ?loc1 ?loc2 ?dir)
                 (not (door-closed ?loc1 ?loc2 ?dir)))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (visited ?from) (connected ?from ?to ?dir) (door-open ?from ?to ?dir))
    :effect (visited ?to)
  )
)
        This is previous problem file: (define (problem explore-kitchen)
  (:domain exploration)
  (:objects
    kitchen corridor bedroom room_north room_south - location
    north south east west - direction
  )
  (:init
    (visited kitchen)
    (visited corridor)
    (visited bedroom)

    ;; Kitchen and Corridor connection (open door)
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (door-open kitchen corridor west)
    (door-open corridor kitchen east)

    ;; Kitchen and Room_North connection (closed frosted-glass door)
    (connected kitchen room_north north)
    (connected room_north kitchen south)
    (door-closed kitchen room_north north)
    (door-closed room_north kitchen south)

    ;; Kitchen and Room_South connection (closed screen door)
    (connected kitchen room_south south)
    (connected room_south kitchen north)
    (door-closed kitchen room_south south)
    (door-closed room_south kitchen north)

    ;; Corridor and Bedroom connection (wood door, now open)
    (connected corridor bedroom west)
    (connected bedroom corridor east)
    (door-open corridor bedroom west)
    (door-open bedroom corridor east)
  )
  (:goal (visited room_south))
)
        This is all the memory you have in this game including each action and its corresponding observations: Action: look around
You are in the kitchen. To the North you see a closed frosted-glass door. To the South you see a closed screen door. To the West you see the corridor. 
Action: move west
You are in the corridor. To the East you see the kitchen. To the West you see a closed wood door. 
Action: open door to west
You open the wood door, revealing the bedroom. 
Action: move west
You are in the bedroom. Through an open wood door, to the East you see the corridor. 

    
        Now modify those two files according to the new observations and notes. Fix any errors you made in the previous setting according to the new observation.
        Generate updated files based on your new observation.
    
        You have already generate files according to the observations. The df and pf can generate actions but after simulating,
        it got those errors: This is the action you take: open door to south.                                             When you try to open door, there is no door here or there is nothing in this direction.                                            If there is no door, you can directly move to that direction.
. Please review both files and fix them.
        Now modify those two files according to the error message.
     
Generated df and pf: 
 (define (domain exploration)
  (:requirements :strips)
  (:types location direction)
  (:predicates
    (visited ?loc - location)
    (door-closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (door-closed ?loc1 ?loc2 ?dir))
    :effect (and (door-open ?loc1 ?loc2 ?dir)
                 (not (door-closed ?loc1 ?loc2 ?dir)))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (visited ?from) (connected ?from ?to ?dir) (not (door-closed ?from ?to ?dir)))
    :effect (visited ?to)
  )
)
 
 (define (problem explore-kitchen)
  (:domain exploration)
  (:objects
    kitchen corridor bedroom room_north room_south - location
    north south east west - direction
  )
  (:init
    (visited kitchen)
    (visited corridor)
    (visited bedroom)

    ;; Kitchen and Corridor connection (open door)
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (door-open kitchen corridor west)
    (door-open corridor kitchen east)

    ;; Kitchen and Room_North connection (closed frosted-glass door)
    (connected kitchen room_north north)
    (connected room_north kitchen south)
    (door-closed kitchen room_north north)
    (door-closed room_north kitchen south)

    ;; Kitchen and Room_South connection (no door, direct connection)
    (connected kitchen room_south south)
    (connected room_south kitchen north)

    ;; Corridor and Bedroom connection (wood door, now open)
    (connected corridor bedroom west)
    (connected bedroom corridor east)
    (door-open corridor bedroom west)
    (door-open bedroom corridor east)
  )
  (:goal (visited room_south))
)
 
Actions from solver(df, pf): ['move south'] 
Current action_queue: ['move south'] 
> move south 
 Unknown action: I'm not sure what you mean. 

----Larger Loop No. 3---- 
successful_actions: ['move west', 'open door to west', 'move west'] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: move south
Unknown action: I'm not sure what you mean.

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
    
        This is previous domain file: (define (domain exploration)
  (:requirements :strips)
  (:types location direction)
  (:predicates
    (visited ?loc - location)
    (door-closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (door-closed ?loc1 ?loc2 ?dir))
    :effect (and (door-open ?loc1 ?loc2 ?dir)
                 (not (door-closed ?loc1 ?loc2 ?dir)))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (visited ?from) (connected ?from ?to ?dir) (not (door-closed ?from ?to ?dir)))
    :effect (visited ?to)
  )
)

        This is previous problem file: (define (problem explore-kitchen)
  (:domain exploration)
  (:objects
    kitchen corridor bedroom room_north room_south - location
    north south east west - direction
  )
  (:init
    (visited kitchen)
    (visited corridor)
    (visited bedroom)

    ;; Kitchen and Corridor connection (open door)
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (door-open kitchen corridor west)
    (door-open corridor kitchen east)

    ;; Kitchen and Room_North connection (closed frosted-glass door)
    (connected kitchen room_north north)
    (connected room_north kitchen south)
    (door-closed kitchen room_north north)
    (door-closed room_north kitchen south)

    ;; Kitchen and Room_South connection (no door, direct connection)
    (connected kitchen room_south south)
    (connected room_south kitchen north)

    ;; Corridor and Bedroom connection (wood door, now open)
    (connected corridor bedroom west)
    (connected bedroom corridor east)
    (door-open corridor bedroom west)
    (door-open bedroom corridor east)
  )
  (:goal (visited room_south))
)

        This is all the memory you have in this game including each action and its corresponding observations: Action: look around
You are in the kitchen. To the North you see a closed frosted-glass door. To the South you see a closed screen door. To the West you see the corridor. 
Action: move west
You are in the corridor. To the East you see the kitchen. To the West you see a closed wood door. 
Action: open door to west
You open the wood door, revealing the bedroom. 
Action: move west
You are in the bedroom. Through an open wood door, to the East you see the corridor. 

    
        Now modify those two files according to the new observations and notes. Fix any errors you made in the previous setting according to the new observation.
        Generate updated files based on your new observation.
    
        You have already generate files according to the observations. The df and pf can generate actions but after simulating,
        it got those errors: This is the action you take: move south.                                             You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.. Please review both files and fix them.
        Now modify those two files according to the error message.
     
Generated df and pf: 
 (define (domain exploration)
  (:requirements :strips)
  (:types location direction)
  (:predicates
    (visited ?loc - location)
    (door-closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (door-closed ?loc1 ?loc2 ?dir))
    :effect (and (door-open ?loc1 ?loc2 ?dir)
                 (not (door-closed ?loc1 ?loc2 ?dir)))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (visited ?from) (connected ?from ?to ?dir) (not (door-closed ?from ?to ?dir)))
    :effect (visited ?to)
  )
)
 
 (define (problem explore-kitchen)
  (:domain exploration)
  (:objects
    kitchen corridor bedroom room_north room_south - location
    north south east west - direction
  )
  (:init
    (visited kitchen)
    (visited corridor)
    (visited bedroom)

    ;; Kitchen and Corridor connection (open wood door)
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (door-open kitchen corridor west)
    (door-open corridor kitchen east)

    ;; Kitchen and Room_North connection (closed frosted-glass door)
    (connected kitchen room_north north)
    (connected room_north kitchen south)
    (door-closed kitchen room_north north)
    (door-closed room_north kitchen south)

    ;; Kitchen and Room_South connection (closed screen door)
    (connected kitchen room_south south)
    (connected room_south kitchen north)
    (door-closed kitchen room_south south)
    (door-closed room_south kitchen north)

    ;; Corridor and Bedroom connection (open wood door)
    (connected corridor bedroom west)
    (connected bedroom corridor east)
    (door-open corridor bedroom west)
    (door-open bedroom corridor east)
  )
  (:goal (visited room_south))
)
 
Actions from solver(df, pf): ['open door to south', 'move south'] 
Current action_queue: ['open door to south', 'move south'] 
> open door to south 
 Unknown action: I'm not sure what you mean. 

----Larger Loop No. 4---- 
successful_actions: ['move west', 'open door to west', 'move west'] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: open door to south
Unknown action: I'm not sure what you mean.

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
    
        This is previous domain file: (define (domain exploration)
  (:requirements :strips)
  (:types location direction)
  (:predicates
    (visited ?loc - location)
    (door-closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (door-closed ?loc1 ?loc2 ?dir))
    :effect (and (door-open ?loc1 ?loc2 ?dir)
                 (not (door-closed ?loc1 ?loc2 ?dir)))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (visited ?from) (connected ?from ?to ?dir) (not (door-closed ?from ?to ?dir)))
    :effect (visited ?to)
  )
)

        This is previous problem file: (define (problem explore-kitchen)
  (:domain exploration)
  (:objects
    kitchen corridor bedroom room_north room_south - location
    north south east west - direction
  )
  (:init
    (visited kitchen)
    (visited corridor)
    (visited bedroom)

    ;; Kitchen and Corridor connection (open wood door)
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (door-open kitchen corridor west)
    (door-open corridor kitchen east)

    ;; Kitchen and Room_North connection (closed frosted-glass door)
    (connected kitchen room_north north)
    (connected room_north kitchen south)
    (door-closed kitchen room_north north)
    (door-closed room_north kitchen south)

    ;; Kitchen and Room_South connection (closed screen door)
    (connected kitchen room_south south)
    (connected room_south kitchen north)
    (door-closed kitchen room_south south)
    (door-closed room_south kitchen north)

    ;; Corridor and Bedroom connection (open wood door)
    (connected corridor bedroom west)
    (connected bedroom corridor east)
    (door-open corridor bedroom west)
    (door-open bedroom corridor east)
  )
  (:goal (visited room_south))
)

        This is all the memory you have in this game including each action and its corresponding observations: Action: look around
You are in the kitchen. To the North you see a closed frosted-glass door. To the South you see a closed screen door. To the West you see the corridor. 
Action: move west
You are in the corridor. To the East you see the kitchen. To the West you see a closed wood door. 
Action: open door to west
You open the wood door, revealing the bedroom. 
Action: move west
You are in the bedroom. Through an open wood door, to the East you see the corridor. 

    
        Now modify those two files according to the new observations and notes. Fix any errors you made in the previous setting according to the new observation.
        Generate updated files based on your new observation.
    
        You have already generate files according to the observations. The df and pf can generate actions but after simulating,
        it got those errors: This is the action you take: open door to south.                                             When you try to open door, there is no door here or there is nothing in this direction.                                            If there is no door, you can directly move to that direction.
. Please review both files and fix them.
        Now modify those two files according to the error message.
     
Generated df and pf: 
 (define (domain exploration)
  (:requirements :strips)
  (:types location direction)
  (:predicates
    (visited ?loc - location)
    (door-closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (has-door ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (has-door ?loc1 ?loc2 ?dir) (door-closed ?loc1 ?loc2 ?dir))
    :effect (and (door-open ?loc1 ?loc2 ?dir)
                 (not (door-closed ?loc1 ?loc2 ?dir)))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (visited ?from) (connected ?from ?to ?dir) (not (door-closed ?from ?to ?dir)))
    :effect (visited ?to)
  )
)
 
 (define (problem explore-kitchen)
  (:domain exploration)
  (:objects
    kitchen corridor bedroom room_north room_south - location
    north south east west - direction
  )
  (:init
    (visited kitchen)
    (visited corridor)
    (visited bedroom)

    ;; Kitchen and Corridor connection (open wood door)
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (has-door kitchen corridor west)
    (has-door corridor kitchen east)
    (door-open kitchen corridor west)
    (door-open corridor kitchen east)

    ;; Kitchen and Room_North connection (closed frosted-glass door)
    (connected kitchen room_north north)
    (connected room_north kitchen south)
    (has-door kitchen room_north north)
    (has-door room_north kitchen south)
    (door-closed kitchen room_north north)
    (door-closed room_north kitchen south)

    ;; Kitchen and Room_South connection (closed screen door)
    (connected kitchen room_south south)
    (connected room_south kitchen north)
    (has-door kitchen room_south south)
    (has-door room_south kitchen north)
    (door-closed kitchen room_south south)
    (door-closed room_south kitchen north)

    ;; Corridor and Bedroom connection (open wood door)
    (connected corridor bedroom west)
    (connected bedroom corridor east)
    (has-door corridor bedroom west)
    (has-door bedroom corridor east)
    (door-open corridor bedroom west)
    (door-open bedroom corridor east)

    ;; Note: No door is observed in the south from the current room (bedroom),
    ;; so attempting to 'open-door' in that direction will fail.
  )
  (:goal (visited room_south))
)
 
Actions from solver(df, pf): ['open door to south', 'move south'] 
Current action_queue: ['open door to south', 'move south'] 
> open door to south 
 Unknown action: I'm not sure what you mean. 
