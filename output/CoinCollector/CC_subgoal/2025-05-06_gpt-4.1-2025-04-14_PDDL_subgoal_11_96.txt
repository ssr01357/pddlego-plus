Observations: You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. 
To the North you see the living room. To the South you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see the corridor.  
Gold path: ['look around', 'open door to south', 'open door to east', 'move west', 'open door to north', 'open door to south', 'open door to west', 'move north', 'open door to east', 'move south', 'move east', 'move west', 'move east', 'move west', 'move north', 'move east', 'move south', 'move east', 'move west', 'move south', 'open door to west', 'move west', 'take coin'] 
Valid Actions: ['move east', 'open door to east', 'close door to east', 'open door to south', 'move south', 'move west', 'move north', 'inventory', 'close door to south', 'look around'] 
taskDescription: Your task is to search the environment and find the coin.  Once you find the coin, take it. 
brief_obs: Action: look around
You are in the kitchen. To the North you see the living room. To the South you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see the corridor. 
 


====Step 0==== 

----Larger Loop No. 0---- 
successful_actions: [] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: look around
You are in the kitchen. To the North you see the living room. To the South you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see the corridor. 

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
     
Generated df and pf: 
 (define (domain explore)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates 
    (at ?loc - location)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (visited ?loc - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (connected ?loc1 ?loc2 ?dir)
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (door-open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
) 
 (define (problem explore-env)
  (:domain explore)
  (:objects 
    kitchen living_room corridor - location
    north south east west - direction
  )
  (:init 
    (at kitchen)
    (visited kitchen)
    (connected kitchen living_room north)
    (connected kitchen corridor west)
    (connected kitchen location_south south)
    (connected kitchen location_east east)
  )
  (:goal (or (visited living_room) (visited corridor) (visited location_south) (visited location_east)))
) 
Actions from solver(df, pf): None 
--Small Loop--: 1 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: look around
You are in the kitchen. To the North you see the living room. To the South you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see the corridor. 

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
    
        This is previous domain file: (define (domain explore)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates 
    (at ?loc - location)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (visited ?loc - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (connected ?loc1 ?loc2 ?dir)
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (door-open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)
        This is previous problem file: (define (problem explore-env)
  (:domain explore)
  (:objects 
    kitchen living_room corridor - location
    north south east west - direction
  )
  (:init 
    (at kitchen)
    (visited kitchen)
    (connected kitchen living_room north)
    (connected kitchen corridor west)
    (connected kitchen location_south south)
    (connected kitchen location_east east)
  )
  (:goal (or (visited living_room) (visited corridor) (visited location_south) (visited location_east)))
)
        This is all the memory you have in this game including each action and its corresponding observations: None
    
        You made some mistakes when generating those files. Here is the error message: None; 
        Now modify those two files according to the error message.
     
Generated df and pf: 
 (define (domain explore)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates 
    (at ?loc - location)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (visited ?loc - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (connected ?loc1 ?loc2 ?dir)
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (door-open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
) 
 (define (problem explore-env)
  (:domain explore)
  (:objects 
    kitchen living_room corridor location_south location_east - location
    north south east west - direction
  )
  (:init 
    (at kitchen)
    (visited kitchen)
    (connected kitchen living_room north)
    (connected kitchen corridor west)
    (connected kitchen location_south south)
    (connected kitchen location_east east)
  )
  (:goal (or (visited living_room) (visited corridor) (visited location_south) (visited location_east)))
) 
Actions from solver(df, pf): ['open door to north', 'move north'] 
Current action_queue: ['open door to north', 'move north'] 
> open door to north 
 Unknown action: I'm not sure what you mean. 

----Larger Loop No. 1---- 
successful_actions: [] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: open door to north
Unknown action: I'm not sure what you mean.

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
    
        This is previous domain file: (define (domain explore)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates 
    (at ?loc - location)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (visited ?loc - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (connected ?loc1 ?loc2 ?dir)
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (door-open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)
        This is previous problem file: (define (problem explore-env)
  (:domain explore)
  (:objects 
    kitchen living_room corridor location_south location_east - location
    north south east west - direction
  )
  (:init 
    (at kitchen)
    (visited kitchen)
    (connected kitchen living_room north)
    (connected kitchen corridor west)
    (connected kitchen location_south south)
    (connected kitchen location_east east)
  )
  (:goal (or (visited living_room) (visited corridor) (visited location_south) (visited location_east)))
)
        This is all the memory you have in this game including each action and its corresponding observations: Action: look around
You are in the kitchen. To the North you see the living room. To the South you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see the corridor. 

    
        Now modify those two files according to the new observations and notes. Fix any errors you made in the previous setting according to the new observation.
        Generate updated files based on your new observation.
    
        You have already generate files according to the observations. The df and pf can generate actions but after simulating,
        it got those errors: This is the action you take: open door to north.                                             When you try to open door, there is no door here or there is nothing in this direction.                                            If there is no door, you can directly move to that direction.
. Please review both files and fix them.
        Now modify those two files according to the error message.
     
Generated df and pf: 
 (define (domain explore)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates 
    (at ?loc - location)
    (visited ?loc - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
  )
  
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir))
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connected ?from ?to ?dir) (or (door-open ?from ?to ?dir) (not (door-exists ?from ?to ?dir))))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )

  (:predicates (door-exists ?loc1 - location ?loc2 - location ?dir - direction))
)
 
 (define (problem explore-env)
  (:domain explore)
  (:objects 
    kitchen living_room corridor location_south location_east - location
    north south east west - direction
  )
  (:init 
    (at kitchen)
    (visited kitchen)
    (connected kitchen living_room north)
    (connected kitchen corridor west)
    (connected kitchen location_south south)
    (connected kitchen location_east east)
    (door-exists kitchen location_south south)
    (door-exists kitchen location_east east)
  )
  (:goal (or (visited living_room) (visited corridor) (visited location_south) (visited location_east)))
) 
Actions from solver(df, pf): ['move north'] 
Current action_queue: ['move north'] 
> move north 
 You are in the living room. In one part of the room you see a wastepaper basket that is closed. There is also a book case, that has nothing on it. You also see a TV stand, that has nothing on it. In another part of the room you see a arm chair, that has nothing on it. In one part of the room you see a side table, that has nothing on it. There is also a coffee table, that has nothing on it. You also see a end table, that has nothing on it. In another part of the room you see a sofa, that has nothing on it. 
To the South you see the kitchen. To the West you see a closed wood door.  


====Step 1==== 

----Larger Loop No. 0---- 
successful_actions: ['move north'] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: move north
You are in the living room. To the South you see the kitchen. To the West you see a closed wood door. 

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
    
        This is previous domain file: (define (domain explore)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates 
    (at ?loc - location)
    (visited ?loc - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
  )
  
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir))
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connected ?from ?to ?dir) (or (door-open ?from ?to ?dir) (not (door-exists ?from ?to ?dir))))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )

  (:predicates (door-exists ?loc1 - location ?loc2 - location ?dir - direction))
)

        This is previous problem file: (define (problem explore-env)
  (:domain explore)
  (:objects 
    kitchen living_room corridor location_south location_east - location
    north south east west - direction
  )
  (:init 
    (at kitchen)
    (visited kitchen)
    (connected kitchen living_room north)
    (connected kitchen corridor west)
    (connected kitchen location_south south)
    (connected kitchen location_east east)
    (door-exists kitchen location_south south)
    (door-exists kitchen location_east east)
  )
  (:goal (or (visited living_room) (visited corridor) (visited location_south) (visited location_east)))
)
        This is all the memory you have in this game including each action and its corresponding observations: Action: look around
You are in the kitchen. To the North you see the living room. To the South you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see the corridor. 
Action: move north
You are in the living room. To the South you see the kitchen. To the West you see a closed wood door. 

    
        Now modify those two files according to the new observations and notes. Fix any errors you made in the previous setting according to the new observation.
        Generate updated files based on your new observation.
     
Generated df and pf: 
 (define (domain explore)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates 
    (at ?loc - location)
    (visited ?loc - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (door-exists ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir))
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connected ?from ?to ?dir) (or (door-open ?from ?to ?dir) (not (door-exists ?from ?to ?dir))))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)
 
 (define (problem explore-env)
  (:domain explore)
  (:objects 
    kitchen living_room corridor location_east location_south location_west - location
    north south east west - direction
  )
  (:init 
    (at living_room)
    (visited kitchen)
    (visited living_room)
    (connected kitchen living_room north)
    (connected living_room kitchen south)
    (connected kitchen corridor west)
    (connected kitchen location_south south)
    (connected kitchen location_east east)
    (connected living_room location_west west)
    (door-exists kitchen location_south south)
    (door-exists kitchen location_east east)
    (door-exists living_room location_west west)
  )
  (:goal (or (visited corridor) (visited location_east) (visited location_south) (visited location_west)))
)
 
Actions from solver(df, pf): ['move south', 'move west'] 
Current action_queue: ['move south', 'move west'] 
> move south 
 You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. 
To the North you see the living room. To the South you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see the corridor.  
Small Loop, action_queue: ['move west'] 
Current action_queue: ['move west'] 
> move west 
 You are in the corridor. In one part of the room you see a key holder, that has nothing on it. There is also a shoe cabinet that is closed. You also see a umbrella stand, that has nothing on it. In another part of the room you see a hat rack, that has nothing on it. In one part of the room you see a coat hanger, that has nothing on it. 
To the North you see a closed wood door. To the South you see a closed wood door. To the East you see the kitchen. To the West you see a closed screen door.  


====Step 2==== 

----Larger Loop No. 0---- 
successful_actions: ['move north', 'move south', 'move west'] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: move south
You are in the kitchen. To the North you see the living room. To the South you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see the corridor. 

Action: move west
You are in the corridor. To the North you see a closed wood door. To the South you see a closed wood door. To the East you see the kitchen. To the West you see a closed screen door. 

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
    
        This is previous domain file: (define (domain explore)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates 
    (at ?loc - location)
    (visited ?loc - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (door-exists ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir))
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connected ?from ?to ?dir) (or (door-open ?from ?to ?dir) (not (door-exists ?from ?to ?dir))))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

        This is previous problem file: (define (problem explore-env)
  (:domain explore)
  (:objects 
    kitchen living_room corridor location_east location_south location_west - location
    north south east west - direction
  )
  (:init 
    (at living_room)
    (visited kitchen)
    (visited living_room)
    (connected kitchen living_room north)
    (connected living_room kitchen south)
    (connected kitchen corridor west)
    (connected kitchen location_south south)
    (connected kitchen location_east east)
    (connected living_room location_west west)
    (door-exists kitchen location_south south)
    (door-exists kitchen location_east east)
    (door-exists living_room location_west west)
  )
  (:goal (or (visited corridor) (visited location_east) (visited location_south) (visited location_west)))
)

        This is all the memory you have in this game including each action and its corresponding observations: Action: look around
You are in the kitchen. To the North you see the living room. To the South you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see the corridor. 
Action: move north
You are in the living room. To the South you see the kitchen. To the West you see a closed wood door. 
Action: move south
You are in the kitchen. To the North you see the living room. To the South you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see the corridor. 
Action: move west
You are in the corridor. To the North you see a closed wood door. To the South you see a closed wood door. To the East you see the kitchen. To the West you see a closed screen door. 

    
        Now modify those two files according to the new observations and notes. Fix any errors you made in the previous setting according to the new observation.
        Generate updated files based on your new observation.
     
Generated df and pf: 
 (define (domain explore)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates 
    (at ?loc - location)
    (visited ?loc - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
    (door-exists ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir))
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connected ?from ?to ?dir) (or (door-open ?from ?to ?dir) (not (door-exists ?from ?to ?dir))))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)
 
 (define (problem explore-env)
  (:domain explore)
  (:objects 
    kitchen living_room corridor location_east location_south location_west corridor_south corridor_north corridor_west - location
    north south east west - direction
  )
  (:init 
    (at corridor)
    (visited kitchen)
    (visited living_room)
    (visited corridor)
    (connected kitchen living_room north)
    (connected living_room kitchen south)
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (connected kitchen location_south south)
    (connected kitchen location_east east)
    (connected living_room location_west west)
    (connected corridor corridor_north north)
    (connected corridor corridor_south south)
    (connected corridor corridor_west west)
    (door-exists kitchen location_south south)
    (door-exists kitchen location_east east)
    (door-exists living_room location_west west)
    (door-exists corridor corridor_north north)
    (door-exists corridor corridor_south south)
    (door-exists corridor corridor_west west)
    (door-exists corridor kitchen east)
  )
  (:goal (or (visited location_east) (visited location_south) (visited location_west) (visited corridor_north) (visited corridor_south) (visited corridor_west)))
)
 
Actions from solver(df, pf): ['open door to south', 'move south'] 
Current action_queue: ['open door to south', 'move south'] 
> open door to south 
 You open the wood door, revealing the bathroom.  
Small Loop, action_queue: ['move south'] 
Current action_queue: ['move south'] 
Coin found!