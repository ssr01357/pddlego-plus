Observations: You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. There is also a coin. 
To the South you see a closed frosted-glass door. To the East you see a closed wood door. To the West you see the corridor.  
Gold path: ['look around', 'take coin'] 
Valid Actions: ['move west', 'close door to east', 'take coin', 'close door to south', 'move east', 'open door to south', 'move south', 'inventory', 'open door to east', 'look around'] 
taskDescription: Your task is to search the environment and find the coin.  Once you find the coin, take it. 
brief_obs: Action: look around
You are in the kitchen. To the South you see a closed frosted-glass door. To the East you see a closed wood door. To the West you see the corridor. 
 


====Step 0==== 

----Larger Loop No. 0---- 
successful_actions: [] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: look around
You are in the kitchen. To the South you see a closed frosted-glass door. To the East you see a closed wood door. To the West you see the corridor. 

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        You should have a goal in the problem file like this: 
        (:goal 
            (at ?location)
        ) where location should be somewhere not visited
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
     
Generated df and pf: 
 (define (domain exploration)
  (:requirements :strips :typing :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (adjacent ?loc1 ?loc2 - location ?dir - direction)
    (door ?loc1 ?loc2 - location ?dir - direction)
    (open-door ?loc1 ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open-door ?loc1 ?loc2)))
    :effect (open-door ?loc1 ?loc2)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (adjacent ?from ?to ?dir) (or (not (door ?from ?to ?dir)) (open-door ?from ?to)))
    :effect (and (not (at ?from)) (at ?to))
  )
)
 
 (define (problem explore-problem)
  (:domain exploration)
  (:objects
    kitchen corridor room_south room_east - location
    south east west - direction
  )

  (:init
    (at kitchen)
    (adjacent kitchen corridor west)
    (adjacent kitchen room_south south)
    (door kitchen room_south south)
    (adjacent kitchen room_east east)
    (door kitchen room_east east)
  )

  (:goal (at corridor))
)
 
Actions from solver(df, pf): ['move west'] 
Current action_queue: ['move west'] 
> move west 
 You are in the corridor. In one part of the room you see a key holder, that has nothing on it. There is also a shoe cabinet that is closed. You also see a umbrella stand, that has nothing on it. In another part of the room you see a hat rack, that has nothing on it. In one part of the room you see a coat hanger, that has nothing on it. 
To the North you see a closed screen door. To the South you see a closed wood door. To the East you see the kitchen. To the West you see a closed wood door.  


====Step 1==== 

----Larger Loop No. 0---- 
successful_actions: ['move west'] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: move west
You are in the corridor. To the North you see a closed screen door. To the South you see a closed wood door. To the East you see the kitchen. To the West you see a closed wood door. 

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        You should have a goal in the problem file like this: 
        (:goal 
            (at ?location)
        ) where location should be somewhere not visited
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
    
        This is previous domain file: (define (domain exploration)
  (:requirements :strips :typing :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (adjacent ?loc1 ?loc2 - location ?dir - direction)
    (door ?loc1 ?loc2 - location ?dir - direction)
    (open-door ?loc1 ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open-door ?loc1 ?loc2)))
    :effect (open-door ?loc1 ?loc2)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (adjacent ?from ?to ?dir) (or (not (door ?from ?to ?dir)) (open-door ?from ?to)))
    :effect (and (not (at ?from)) (at ?to))
  )
)

        This is previous problem file: (define (problem explore-problem)
  (:domain exploration)
  (:objects
    kitchen corridor room_south room_east - location
    south east west - direction
  )

  (:init
    (at kitchen)
    (adjacent kitchen corridor west)
    (adjacent kitchen room_south south)
    (door kitchen room_south south)
    (adjacent kitchen room_east east)
    (door kitchen room_east east)
  )

  (:goal (at corridor))
)

        This is all the memory you have in this game including each action and its corresponding observations: Action: look around
You are in the kitchen. To the South you see a closed frosted-glass door. To the East you see a closed wood door. To the West you see the corridor. 
Action: move west
You are in the corridor. To the North you see a closed screen door. To the South you see a closed wood door. To the East you see the kitchen. To the West you see a closed wood door. 

    
        Now modify those two files according to the new observations and notes. Fix any errors you made in the previous setting according to the new observation.
        Generate updated files based on your new observation.
     
Generated df and pf: 
 (define (domain exploration)
  (:requirements :strips :typing :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (adjacent ?loc1 ?loc2 - location ?dir - direction)
    (door ?loc1 ?loc2 - location ?dir - direction)
    (open-door ?loc1 ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open-door ?loc1 ?loc2)))
    :effect (open-door ?loc1 ?loc2)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (adjacent ?from ?to ?dir) (or (not (door ?from ?to ?dir)) (open-door ?from ?to)))
    :effect (and (not (at ?from)) (at ?to))
  )
) 
 (define (problem explore-problem)
  (:domain exploration)
  (:objects
    kitchen corridor room_south room_east room_north_corridor room_south_corridor room_west_corridor - location
    north south east west - direction
  )

  (:init
    (at corridor)
    
    ;; Observations from the kitchen
    (adjacent kitchen corridor west)
    (adjacent kitchen room_south south)
    (door kitchen room_south south)
    (adjacent kitchen room_east east)
    (door kitchen room_east east)
    
    ;; Observations from the corridor
    (adjacent corridor kitchen east)
    (adjacent corridor room_north_corridor north)
    (door corridor room_north_corridor north)
    (adjacent corridor room_south_corridor south)
    (door corridor room_south_corridor south)
    (adjacent corridor room_west_corridor west)
    (door corridor room_west_corridor west)
  )

  (:goal
    (at room_north_corridor)
  )
) 
Actions from solver(df, pf): ['open door to north', 'move north'] 
Current action_queue: ['open door to north', 'move north'] 
> open door to north 
 You open the screen door, revealing the backyard.  
Small Loop, action_queue: ['move north'] 
Current action_queue: ['move north'] 
> move north 
 You are in the backyard. In one part of the room you see a barbeque. There is also a workbench, that has nothing on it. You also see a patio chair, that has nothing on it. In another part of the room you see a patio table, that has nothing on it. In one part of the room you see a clothes line, that has nothing on it. There is also a garden, that has nothing on it. 
To the North you see the driveway. Through an open screen door, to the South you see the corridor. To the East you see the street. To the West you see a closed patio door.  


====Step 2==== 

----Larger Loop No. 0---- 
successful_actions: ['move west', 'open door to north', 'move north'] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: open door to north
You open the screen door, revealing the backyard. 

Action: move north
You are in the backyard. To the North you see the driveway. Through an open screen door, to the South you see the corridor. To the East you see the street. To the West you see a closed patio door. 

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        You should have a goal in the problem file like this: 
        (:goal 
            (at ?location)
        ) where location should be somewhere not visited
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
    
        This is previous domain file: (define (domain exploration)
  (:requirements :strips :typing :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (adjacent ?loc1 ?loc2 - location ?dir - direction)
    (door ?loc1 ?loc2 - location ?dir - direction)
    (open-door ?loc1 ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open-door ?loc1 ?loc2)))
    :effect (open-door ?loc1 ?loc2)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (adjacent ?from ?to ?dir) (or (not (door ?from ?to ?dir)) (open-door ?from ?to)))
    :effect (and (not (at ?from)) (at ?to))
  )
)
        This is previous problem file: (define (problem explore-problem)
  (:domain exploration)
  (:objects
    kitchen corridor room_south room_east room_north_corridor room_south_corridor room_west_corridor - location
    north south east west - direction
  )

  (:init
    (at corridor)
    
    ;; Observations from the kitchen
    (adjacent kitchen corridor west)
    (adjacent kitchen room_south south)
    (door kitchen room_south south)
    (adjacent kitchen room_east east)
    (door kitchen room_east east)
    
    ;; Observations from the corridor
    (adjacent corridor kitchen east)
    (adjacent corridor room_north_corridor north)
    (door corridor room_north_corridor north)
    (adjacent corridor room_south_corridor south)
    (door corridor room_south_corridor south)
    (adjacent corridor room_west_corridor west)
    (door corridor room_west_corridor west)
  )

  (:goal
    (at room_north_corridor)
  )
)
        This is all the memory you have in this game including each action and its corresponding observations: Action: look around
You are in the kitchen. To the South you see a closed frosted-glass door. To the East you see a closed wood door. To the West you see the corridor. 
Action: move west
You are in the corridor. To the North you see a closed screen door. To the South you see a closed wood door. To the East you see the kitchen. To the West you see a closed wood door. 
Action: open door to north
You open the screen door, revealing the backyard. 
Action: move north
You are in the backyard. To the North you see the driveway. Through an open screen door, to the South you see the corridor. To the East you see the street. To the West you see a closed patio door. 

    
        Now modify those two files according to the new observations and notes. Fix any errors you made in the previous setting according to the new observation.
        Generate updated files based on your new observation.
     
Generated df and pf: 
 (define (domain exploration)
  (:requirements :strips :typing :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (adjacent ?loc1 ?loc2 - location ?dir - direction)
    (door ?loc1 ?loc2 - location ?dir - direction)
    (open-door ?loc1 ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open-door ?loc1 ?loc2)))
    :effect (open-door ?loc1 ?loc2)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (adjacent ?from ?to ?dir) (or (not (door ?from ?to ?dir)) (open-door ?from ?to)))
    :effect (and (not (at ?from)) (at ?to))
  )
)
 
 (define (problem explore-problem)
  (:domain exploration)
  (:objects
    kitchen corridor room_south room_east room_north_corridor room_south_corridor room_west_corridor backyard driveway street patio - location
    north south east west - direction
  )

  (:init
    ;; Current location updated to backyard
    (at backyard)

    ;; Observations from the kitchen
    (adjacent kitchen corridor west)
    (adjacent kitchen room_south south)
    (door kitchen room_south south)
    (adjacent kitchen room_east east)
    (door kitchen room_east east)

    ;; Observations from the corridor
    (adjacent corridor kitchen east)
    (adjacent corridor room_north_corridor north)
    (door corridor room_north_corridor north)
    (adjacent corridor room_south_corridor south)
    (door corridor room_south_corridor south)
    (adjacent corridor room_west_corridor west)
    (door corridor room_west_corridor west)
    
    ;; Updated observation: corridor to backyard via screen door
    (adjacent corridor backyard north)
    (door corridor backyard north)
    (open-door corridor backyard)

    ;; Observations from the backyard
    (adjacent backyard driveway north)
    (adjacent backyard corridor south)
    (adjacent backyard street east)
    (adjacent backyard patio west)
    (door backyard corridor south)
    (open-door backyard corridor)
    (door backyard patio west)

  )

  (:goal
    (at patio)
  )
)
 
Actions from solver(df, pf): ['open door to west', 'move west'] 
Current action_queue: ['open door to west', 'move west'] 
> open door to west 
 You open the patio door, revealing the living room.  
Small Loop, action_queue: ['move west'] 
Current action_queue: ['move west'] 
> move west 
 You are in the living room. In one part of the room you see a wastepaper basket that is closed. There is also a book case, that has nothing on it. You also see a TV stand, that has nothing on it. In another part of the room you see a arm chair, that has nothing on it. In one part of the room you see a side table, that has nothing on it. There is also a coffee table, that has nothing on it. You also see a end table, that has nothing on it. In another part of the room you see a sofa, that has nothing on it. 
To the South you see a closed wood door. Through an open patio door, to the East you see the backyard.  


====Step 3==== 

----Larger Loop No. 0---- 
successful_actions: ['move west', 'open door to north', 'move north', 'open door to west', 'move west'] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Error: None 
Prompt: 
        Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
        The format should strictly be:
            {
            "df": "...",
            "pf": "..."
            }
    
        You are in an environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
        Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
        Do not assume that there will be a door connecting rooms.
        Your task is always to keep exploration and go to a location you have not visited yet.
        In other words, your goal should go to other not visited location.
        If you enter a room, make sure you put everything you observed such as the direction in the problem file.
        Here are your current observations: Action: open door to west
You open the patio door, revealing the living room. 

Action: move west
You are in the living room. To the South you see a closed wood door. Through an open patio door, to the East you see the backyard. 

        Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']
        You should generate df and pf strictly follow this valid actions. There are in total 2 actions, that should exactly be the following two:
        1. :action open-door
            :parameters (?loc1 - location ?loc2 - location ?dir - direction)
        2. :action move
            :parameters (?from - location ?to - location ?dir - direction)
        You should have a goal in the problem file like this: 
        (:goal 
            (at ?location)
        ) where location should be somewhere not visited
        Note: in problem file's init, you shouldn't have "not ()" but only the single status
    
        This is previous domain file: (define (domain exploration)
  (:requirements :strips :typing :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (adjacent ?loc1 ?loc2 - location ?dir - direction)
    (door ?loc1 ?loc2 - location ?dir - direction)
    (open-door ?loc1 ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open-door ?loc1 ?loc2)))
    :effect (open-door ?loc1 ?loc2)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (adjacent ?from ?to ?dir) (or (not (door ?from ?to ?dir)) (open-door ?from ?to)))
    :effect (and (not (at ?from)) (at ?to))
  )
)

        This is previous problem file: (define (problem explore-problem)
  (:domain exploration)
  (:objects
    kitchen corridor room_south room_east room_north_corridor room_south_corridor room_west_corridor backyard driveway street patio - location
    north south east west - direction
  )

  (:init
    ;; Current location updated to backyard
    (at backyard)

    ;; Observations from the kitchen
    (adjacent kitchen corridor west)
    (adjacent kitchen room_south south)
    (door kitchen room_south south)
    (adjacent kitchen room_east east)
    (door kitchen room_east east)

    ;; Observations from the corridor
    (adjacent corridor kitchen east)
    (adjacent corridor room_north_corridor north)
    (door corridor room_north_corridor north)
    (adjacent corridor room_south_corridor south)
    (door corridor room_south_corridor south)
    (adjacent corridor room_west_corridor west)
    (door corridor room_west_corridor west)
    
    ;; Updated observation: corridor to backyard via screen door
    (adjacent corridor backyard north)
    (door corridor backyard north)
    (open-door corridor backyard)

    ;; Observations from the backyard
    (adjacent backyard driveway north)
    (adjacent backyard corridor south)
    (adjacent backyard street east)
    (adjacent backyard patio west)
    (door backyard corridor south)
    (open-door backyard corridor)
    (door backyard patio west)

  )

  (:goal
    (at patio)
  )
)

        This is all the memory you have in this game including each action and its corresponding observations: Action: look around
You are in the kitchen. To the South you see a closed frosted-glass door. To the East you see a closed wood door. To the West you see the corridor. 
Action: move west
You are in the corridor. To the North you see a closed screen door. To the South you see a closed wood door. To the East you see the kitchen. To the West you see a closed wood door. 
Action: open door to north
You open the screen door, revealing the backyard. 
Action: move north
You are in the backyard. To the North you see the driveway. Through an open screen door, to the South you see the corridor. To the East you see the street. To the West you see a closed patio door. 
Action: open door to west
You open the patio door, revealing the living room. 
Action: move west
You are in the living room. To the South you see a closed wood door. Through an open patio door, to the East you see the backyard. 

    
        Now modify those two files according to the new observations and notes. Fix any errors you made in the previous setting according to the new observation.
        Generate updated files based on your new observation.
     
Generated df and pf: 
 (define (domain exploration)
  (:requirements :strips :typing :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (adjacent ?loc1 ?loc2 - location ?dir - direction)
    (door ?loc1 ?loc2 - location ?dir - direction)
    (open-door ?loc1 ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open-door ?loc1 ?loc2)))
    :effect (open-door ?loc1 ?loc2)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (adjacent ?from ?to ?dir) (or (not (door ?from ?to ?dir)) (open-door ?from ?to)))
    :effect (and (not (at ?from)) (at ?to))
  )
)
 
 (define (problem explore-problem)
  (:domain exploration)
  (:objects
    kitchen corridor room_south room_east room_north_corridor room_south_corridor room_west_corridor living_room room_south_living backyard driveway street - location
    north south east west - direction
  )

  (:init
    ;; Current location updated to living_room
    (at living_room)

    ;; Observations from the kitchen
    (adjacent kitchen corridor west)
    (adjacent kitchen room_south south)
    (door kitchen room_south south)
    (adjacent kitchen room_east east)
    (door kitchen room_east east)

    ;; Observations from the corridor
    (adjacent corridor kitchen east)
    (adjacent corridor room_north_corridor north)
    (door corridor room_north_corridor north)
    (adjacent corridor room_south_corridor south)
    (door corridor room_south_corridor south)
    (adjacent corridor room_west_corridor west)
    (door corridor room_west_corridor west)
    
    ;; Connection between corridor and backyard
    (adjacent corridor backyard north)
    (door corridor backyard north)
    (open-door corridor backyard)

    ;; Observations from the backyard
    (adjacent backyard driveway north)
    (adjacent backyard corridor south)
    (adjacent backyard street east)
    (adjacent backyard living_room west)
    (door backyard living_room west)
    (open-door backyard living_room)

    ;; Observations from the living room
    (adjacent living_room backyard east)
    (door living_room backyard east)
    (open-door living_room backyard)
    (adjacent living_room room_south_living south)
    (door living_room room_south_living south)
  )
  
  (:goal
    (at room_south)
  )
)
 
Actions from solver(df, pf): ['move east', 'move south', 'move east', 'open door to south', 'move south'] 
Current action_queue: ['move east', 'move south', 'move east', 'open door to south', 'move south'] 
> move east 
 You are in the backyard. In one part of the room you see a barbeque. There is also a workbench, that has nothing on it. You also see a patio chair, that has nothing on it. In another part of the room you see a patio table, that has nothing on it. In one part of the room you see a clothes line, that has nothing on it. There is also a garden, that has nothing on it. 
To the North you see the driveway. Through an open screen door, to the South you see the corridor. To the East you see the street. Through an open patio door, to the West you see the living room.  
Small Loop, action_queue: ['move south', 'move east', 'open door to south', 'move south'] 
Current action_queue: ['move south', 'move east', 'open door to south', 'move south'] 
> move south 
 You are in the corridor. In one part of the room you see a key holder, that has nothing on it. There is also a shoe cabinet that is closed. You also see a umbrella stand, that has nothing on it. In another part of the room you see a hat rack, that has nothing on it. In one part of the room you see a coat hanger, that has nothing on it. 
Through an open screen door, to the North you see the backyard. To the South you see a closed wood door. To the East you see the kitchen. To the West you see a closed wood door.  
Small Loop, action_queue: ['move east', 'open door to south', 'move south'] 
Current action_queue: ['move east', 'open door to south', 'move south'] 
Coin found!