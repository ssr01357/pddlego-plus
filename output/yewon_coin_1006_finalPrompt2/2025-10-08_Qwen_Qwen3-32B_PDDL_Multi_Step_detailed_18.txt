Observations: You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. 
To the North you see the corridor. To the South you see a closed plain door. To the East you see a closed patio door. To the West you see a closed wood door.  
Gold path: ['look around', 'open door to south', 'open door to east', 'open door to west', 'move north', 'open door to west', 'move east', 'move south', 'move west', 'move north', 'move south', 'move east', 'move east', 'open door to east', 'move west', 'move west', 'move north', 'move west', 'open door to south', 'move south', 'open door to west', 'move west', 'take coin'] 
Valid Actions: ['move east', 'move north', 'move south', 'move west', 'open door to east', 'open door to north', 'open door to south', 'open door to west'] 
taskDescription: Your task is to search the environment and find the coin.  Once you find the coin, take it. 
brief_obs: Action: look around
You are in the kitchen. To the North you see the corridor. To the South you see a closed plain door. To the East you see a closed patio door. To the West you see a closed wood door. 
 


====Step 0==== 

----Larger Loop No. 0---- 
successful_actions: [] 
Small Loop, action_queue: [] 
--First Generation Try--: 0 
Prompt DF: 
Please provide the output in strict JSON format, without any additional text or explanation. 
The format should strictly be:
{
  "df": "..."
}


You are in a partially observable environment that you explore step by step. Your task is to generate a PDDL domain file ('df') based on the observations and valid actions.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.

Here are your current observations: Action: look around
You are in the kitchen. To the North you see the corridor. To the South you see a closed plain door. To the East you see a closed patio door. To the West you see a closed wood door. 

Here are some valid actions you can take: ['move east', 'move north', 'move south', 'move west', 'open door to east', 'open door to north', 'open door to south', 'open door to west']

You should generate a df that strictly follows these valid actions. There are in total 2 actions, that should exactly be the following two:
1. :action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
2. :action move
    :parameters (?from - location ?to - location ?dir - direction)

 
Generated df: 
 (define (domain navigation)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (closed ?from - location ?to - location ?dir - direction)
  )
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (closed ?loc1 ?loc2 ?dir))
    :effect (not (closed ?loc1 ?loc2 ?dir))
  )
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (not (closed ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
) 
Prompt PF init: 
Please provide the output in a strict JSON format, without any additional text or explanation.
The format should strictly be:
{
  "pf_objects_and_init": "..."
}


You are in a partially observable environment that you explore step by step. Your task is to define the objects and the initial state for a PDDL problem file ('pf') based on the provided domain file ('df') and your current observations from the environment.
**DO NOT** generate the `(:goal ...)` section in this step. 

Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.

If you enter a room, make sure you put everything you observed such as the direction in the problem file.

This is the domain file: (define (domain navigation)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (closed ?from - location ?to - location ?dir - direction)
  )
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (closed ?loc1 ?loc2 ?dir))
    :effect (not (closed ?loc1 ?loc2 ?dir))
  )
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (not (closed ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
)
    
Here are your current observations: Action: look around
You are in the kitchen. To the North you see the corridor. To the South you see a closed plain door. To the East you see a closed patio door. To the West you see a closed wood door. 

Here are some valid actions you can take: ['move east', 'move north', 'move south', 'move west', 'open door to east', 'open door to north', 'open door to south', 'open door to west']

Note: 
- In problem file's init, you shouldn't have "not ()" but only the single status.

 
Generated pf_init: 
 (define (problem navigation-problem)
  (:domain navigation)
  (:objects
   kitchen - location
   corridor - location
   south_room - location
   east_room - location
   west_room - location
   north - direction
   south - direction
   east - direction
   west - direction
  )
  (:init
   (at kitchen)
   (closed kitchen south_room south)
   (closed kitchen east_room east)
   (closed kitchen west_room west)
  )
) 
Prompt PF complete: 
Please provide the output in strict JSON format, without any additional text or explanation. 
The format should strictly be:
{
  "pf": "..."
}


You are in a partially observable environment that you explore step by step. Your output must be one single, complete PDDL problem file. To create it, add a `(:goal ...)` section to the provided objects and initial state, then wrap everything in the standard `(define (problem ...))` structure.

Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should be to go to another not visited location.

This is the domain file:
(define (domain navigation)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (closed ?from - location ?to - location ?dir - direction)
  )
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (closed ?loc1 ?loc2 ?dir))
    :effect (not (closed ?loc1 ?loc2 ?dir))
  )
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (not (closed ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
)

Here are your current observations: Action: look around
You are in the kitchen. To the North you see the corridor. To the South you see a closed plain door. To the East you see a closed patio door. To the West you see a closed wood door. 

Here are some valid actions you can take: ['move east', 'move north', 'move south', 'move west', 'open door to east', 'open door to north', 'open door to south', 'open door to west']

This is the objects and initial state of the problem file:
(define (problem navigation-problem)
  (:domain navigation)
  (:objects
   kitchen - location
   corridor - location
   south_room - location
   east_room - location
   west_room - location
   north - direction
   south - direction
   east - direction
   west - direction
  )
  (:init
   (at kitchen)
   (closed kitchen south_room south)
   (closed kitchen east_room east)
   (closed kitchen west_room west)
  )
)

You should have a goal in the problem file like this: 
(:goal 
    (at ?location)
)


Note: 
- In problem file's goal, ?location must be grounded, no variables or quantifiers.

 
Generated pf_complete: 
 (define (problem navigation-problem)
  (:domain navigation)
  (:objects
   kitchen - location
   corridor - location
   south_room - location
   east_room - location
   west_room - location
   north - direction
   south - direction
   east - direction
   west - direction
  )
  (:init
   (at kitchen)
   (closed kitchen south_room south)
   (closed kitchen east_room east)
   (closed kitchen west_room west)
  )
  (:goal
    (or (at corridor) (at south_room) (at east_room) (at west_room))
  )
) 
--Small Loop--: 0 
Actions from solver(df, pf): ['move east'] 
Raw plan text: (MOVE KITCHEN WEST_ROOM EAST)
(REACH-GOAL)
 
Current action_queue: ['move east'] 
> move east 
 You can't move there, the door is closed.  

----Larger Loop No. 1---- 
successful_actions: [] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Prompt: 
    Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
    The format should strictly be:
        {
        "df": "...",
        "pf": "..."
        }


You are in a partially observable environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
If you enter a room, make sure you put everything you observed such as the direction in the problem file.
Here are your current observations: Action: move east
You can't move there, the door is closed. 

Here are some valid actions you can take: ['move east', 'move north', 'move south', 'move west', 'open door to east', 'open door to north', 'open door to south', 'open door to west']
You should generate df and pf that strictly follow these action schemas. There are in total 2 actions, that should exactly be the following two:
1. :action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
2. :action move
    :parameters (?from - location ?to - location ?dir - direction)
You should have a goal in the problem file like this: 
(:goal 
    (at ?location)
) 


Note: 
- In problem file's init, you shouldn't have "not ()" but only the single status.
- In problem file's goal, ?location must be grounded, no variables or quantifiers.


This is all the memory you have in this game including each action and its corresponding observations: 
Action: look around
You are in the kitchen. To the North you see the corridor. To the South you see a closed plain door. To the East you see a closed patio door. To the West you see a closed wood door. 


You have already generated df and pf files according to the observations.
This is previous domain file: 
(define (domain navigation)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (closed ?from - location ?to - location ?dir - direction)
  )
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (closed ?loc1 ?loc2 ?dir))
    :effect (not (closed ?loc1 ?loc2 ?dir))
  )
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (not (closed ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
)

This is previous problem file: 
(define (problem navigation-problem)
  (:domain navigation)
  (:objects
   kitchen - location
   corridor - location
   south_room - location
   east_room - location
   west_room - location
   north - direction
   south - direction
   east - direction
   west - direction
  )
  (:init
   (at kitchen)
   (closed kitchen south_room south)
   (closed kitchen east_room east)
   (closed kitchen west_room west)
  )
  (:goal
    (or (at corridor) (at south_room) (at east_room) (at west_room))
  )
)


Based on the df and pf that you generated, the external solver could generate a plan but after simulating in the game environment, it caused those errors: 
This is the action you take: move east. The door that you are moving to is closed. You should first open door to that direction then move there!


Now rewrite both the domain and problem files with the minimal fix.
 
Generated df and pf: 
 (define (domain navigation)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (closed ?from - location ?to - location ?dir - direction)
  )
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (closed ?loc1 ?loc2 ?dir))
    :effect (not (closed ?loc1 ?loc2 ?dir))
  )
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (not (closed ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
) 
 (define (problem navigation-problem)
  (:domain navigation)
  (:objects
   kitchen - location
   corridor - location
   south_room - location
   east_room - location
   west_room - location
   north - direction
   south - direction
   east - direction
   west - direction
  )
  (:init
   (at kitchen)
   (closed kitchen south_room south)
   (closed kitchen east_room east)
   (closed kitchen west_room west)
  )
  (:goal
    (at corridor)
  )
) 
Actions from solver(df, pf): ['move west'] 
Raw plan text: (MOVE KITCHEN CORRIDOR WEST)
 
Current action_queue: ['move west'] 
> move west 
 You can't move there, the door is closed.  

----Larger Loop No. 2---- 
successful_actions: [] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Prompt: 
    Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
    The format should strictly be:
        {
        "df": "...",
        "pf": "..."
        }


You are in a partially observable environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
If you enter a room, make sure you put everything you observed such as the direction in the problem file.
Here are your current observations: Action: move west
You can't move there, the door is closed. 

Here are some valid actions you can take: ['move east', 'move north', 'move south', 'move west', 'open door to east', 'open door to north', 'open door to south', 'open door to west']
You should generate df and pf that strictly follow these action schemas. There are in total 2 actions, that should exactly be the following two:
1. :action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
2. :action move
    :parameters (?from - location ?to - location ?dir - direction)
You should have a goal in the problem file like this: 
(:goal 
    (at ?location)
) 


Note: 
- In problem file's init, you shouldn't have "not ()" but only the single status.
- In problem file's goal, ?location must be grounded, no variables or quantifiers.


This is all the memory you have in this game including each action and its corresponding observations: 
Action: look around
You are in the kitchen. To the North you see the corridor. To the South you see a closed plain door. To the East you see a closed patio door. To the West you see a closed wood door. 


You have already generated df and pf files according to the observations.
This is previous domain file: 
(define (domain navigation)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (closed ?from - location ?to - location ?dir - direction)
  )
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (closed ?loc1 ?loc2 ?dir))
    :effect (not (closed ?loc1 ?loc2 ?dir))
  )
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (not (closed ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
)

This is previous problem file: 
(define (problem navigation-problem)
  (:domain navigation)
  (:objects
   kitchen - location
   corridor - location
   south_room - location
   east_room - location
   west_room - location
   north - direction
   south - direction
   east - direction
   west - direction
  )
  (:init
   (at kitchen)
   (closed kitchen south_room south)
   (closed kitchen east_room east)
   (closed kitchen west_room west)
  )
  (:goal
    (at corridor)
  )
)


Based on the df and pf that you generated, the external solver could generate a plan but after simulating in the game environment, it caused those errors: 
This is the action you take: move west. The door that you are moving to is closed. You should first open door to that direction then move there!


Now rewrite both the domain and problem files with the minimal fix.
 
Generated df and pf: 
 (define (domain navigation)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (closed ?from - location ?to - location ?dir - direction)
  )
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (closed ?loc1 ?loc2 ?dir))
    :effect (not (closed ?loc1 ?loc2 ?dir))
  )
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (not (closed ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
) 
 (define (problem navigation-problem)
  (:domain navigation)
  (:objects
   kitchen - location
   corridor - location
   south_room - location
   east_room - location
   west_room - location
   north - direction
   south - direction
   east - direction
   west - direction
  )
  (:init
   (at kitchen)
   (closed kitchen south_room south)
   (closed kitchen east_room east)
   (closed kitchen west_room west)
  )
  (:goal
    (at west_room)
  )
) 
Actions from solver(df, pf): ['move east'] 
Raw plan text: (MOVE KITCHEN WEST_ROOM EAST)
 
Current action_queue: ['move east'] 
> move east 
 You can't move there, the door is closed.  

----Larger Loop No. 3---- 
successful_actions: [] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Prompt: 
    Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
    The format should strictly be:
        {
        "df": "...",
        "pf": "..."
        }


You are in a partially observable environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
If you enter a room, make sure you put everything you observed such as the direction in the problem file.
Here are your current observations: Action: move east
You can't move there, the door is closed. 

Here are some valid actions you can take: ['move east', 'move north', 'move south', 'move west', 'open door to east', 'open door to north', 'open door to south', 'open door to west']
You should generate df and pf that strictly follow these action schemas. There are in total 2 actions, that should exactly be the following two:
1. :action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
2. :action move
    :parameters (?from - location ?to - location ?dir - direction)
You should have a goal in the problem file like this: 
(:goal 
    (at ?location)
) 


Note: 
- In problem file's init, you shouldn't have "not ()" but only the single status.
- In problem file's goal, ?location must be grounded, no variables or quantifiers.


This is all the memory you have in this game including each action and its corresponding observations: 
Action: look around
You are in the kitchen. To the North you see the corridor. To the South you see a closed plain door. To the East you see a closed patio door. To the West you see a closed wood door. 


You have already generated df and pf files according to the observations.
This is previous domain file: 
(define (domain navigation)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (closed ?from - location ?to - location ?dir - direction)
  )
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (closed ?loc1 ?loc2 ?dir))
    :effect (not (closed ?loc1 ?loc2 ?dir))
  )
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (not (closed ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
)

This is previous problem file: 
(define (problem navigation-problem)
  (:domain navigation)
  (:objects
   kitchen - location
   corridor - location
   south_room - location
   east_room - location
   west_room - location
   north - direction
   south - direction
   east - direction
   west - direction
  )
  (:init
   (at kitchen)
   (closed kitchen south_room south)
   (closed kitchen east_room east)
   (closed kitchen west_room west)
  )
  (:goal
    (at west_room)
  )
)


Based on the df and pf that you generated, the external solver could generate a plan but after simulating in the game environment, it caused those errors: 
This is the action you take: move east. The door that you are moving to is closed. You should first open door to that direction then move there!


Now rewrite both the domain and problem files with the minimal fix.
 
Generated df and pf: 
 (define (domain navigation)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (closed ?from - location ?to - location ?dir - direction)
  )
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (closed ?loc1 ?loc2 ?dir))
    :effect (not (closed ?loc1 ?loc2 ?dir))
  )
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (not (closed ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
) 
 (define (problem navigation-problem)
  (:domain navigation)
  (:objects
   kitchen - location
   corridor - location
   south_room - location
   east_room - location
   west_room - location
   north - direction
   south - direction
   east - direction
   west - direction
  )
  (:init
   (at kitchen)
   (closed kitchen south_room south)
   (closed kitchen east_room east)
   (closed kitchen west_room west)
  )
  (:goal
    (at east_room)
  )
) 
Actions from solver(df, pf): ['move west'] 
Raw plan text: (MOVE KITCHEN EAST_ROOM WEST)
 
Current action_queue: ['move west'] 
> move west 
 You can't move there, the door is closed.  

----Larger Loop No. 4---- 
successful_actions: [] 
Small Loop, action_queue: [] 
--Small Loop--: 0 
Prompt: 
    Please provide the output in strict JSON format, without any additional text or explanation, including a PDDL domain file as 'df' and a PDDL problem file as 'pf'. 
    The format should strictly be:
        {
        "df": "...",
        "pf": "..."
        }


You are in a partially observable environment that you explore step by step. You must build and update PDDL files of the environment based on only your observations. 
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
If you enter a room, make sure you put everything you observed such as the direction in the problem file.
Here are your current observations: Action: move west
You can't move there, the door is closed. 

Here are some valid actions you can take: ['move east', 'move north', 'move south', 'move west', 'open door to east', 'open door to north', 'open door to south', 'open door to west']
You should generate df and pf that strictly follow these action schemas. There are in total 2 actions, that should exactly be the following two:
1. :action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
2. :action move
    :parameters (?from - location ?to - location ?dir - direction)
You should have a goal in the problem file like this: 
(:goal 
    (at ?location)
) 


Note: 
- In problem file's init, you shouldn't have "not ()" but only the single status.
- In problem file's goal, ?location must be grounded, no variables or quantifiers.


This is all the memory you have in this game including each action and its corresponding observations: 
Action: look around
You are in the kitchen. To the North you see the corridor. To the South you see a closed plain door. To the East you see a closed patio door. To the West you see a closed wood door. 


You have already generated df and pf files according to the observations.
This is previous domain file: 
(define (domain navigation)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (closed ?from - location ?to - location ?dir - direction)
  )
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (closed ?loc1 ?loc2 ?dir))
    :effect (not (closed ?loc1 ?loc2 ?dir))
  )
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (not (closed ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
)

This is previous problem file: 
(define (problem navigation-problem)
  (:domain navigation)
  (:objects
   kitchen - location
   corridor - location
   south_room - location
   east_room - location
   west_room - location
   north - direction
   south - direction
   east - direction
   west - direction
  )
  (:init
   (at kitchen)
   (closed kitchen south_room south)
   (closed kitchen east_room east)
   (closed kitchen west_room west)
  )
  (:goal
    (at east_room)
  )
)


Based on the df and pf that you generated, the external solver could generate a plan but after simulating in the game environment, it caused those errors: 
This is the action you take: move west. The door that you are moving to is closed. You should first open door to that direction then move there!


Now rewrite both the domain and problem files with the minimal fix.
 
Generated df and pf: 
 (define (domain navigation)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (closed ?from - location ?to - location ?dir - direction)
  )
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (closed ?loc1 ?loc2 ?dir))
    :effect (not (closed ?loc1 ?loc2 ?dir))
  )
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (not (closed ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
) 
 (define (problem navigation-problem)
  (:domain navigation)
  (:objects
   kitchen - location
   corridor - location
   south_room - location
   east_room - location
   west_room - location
   north - direction
   south - direction
   east - direction
   west - direction
  )
  (:init
   (at kitchen)
   (closed kitchen south_room south)
   (closed kitchen east_room east)
   (closed kitchen west_room west)
  )
  (:goal
    (at west_room)
  )
) 
Actions from solver(df, pf): ['move east'] 
Raw plan text: (MOVE KITCHEN WEST_ROOM EAST)
 
Current action_queue: ['move east'] 
> move east 
 You can't move there, the door is closed.  
