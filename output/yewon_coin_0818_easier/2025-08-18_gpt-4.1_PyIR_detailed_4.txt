Observations: You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. 
To the South you see a closed patio door. To the West you see a closed plain door.  
Gold path: ['look around', 'open door to south', 'open door to west', 'move west', 'move east', 'move south', 'open door to west', 'move south', 'move north', 'move south', 'move north', 'move east', 'open door to north', 'move west', 'move east', 'move north', 'take coin'] 
Valid Actions: ['look around', 'close door to west', 'move west', 'open door to south', 'open door to west', 'inventory', 'move south', 'close door to south'] 
taskDescription: Your task is to search the environment and find the coin.  Once you find the coin, take it. 
brief_obs: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 
 


====Step 0==== 

----Larger Loop No. 0---- 
successful_actions: [] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class EnvironmentExploration(Domain):
    Location = create_type("Location")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """True if the location has been visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """True if the agent is at this location"""

    @predicate(Door, Location, Location, Direction)
    def connects(self, door, loc1, loc2, direction):
        """True if this door connects loc1 to loc2 in the given direction"""

    @predicate(Door)
    def open(self, door):
        """True if the door is open"""

    @predicate(Door)
    def closed(self, door):
        """True if the door is closed"""

    @predicate(Door)
    def is_plain(self, door):
        """True if the door is a plain door"""

    @predicate(Door)
    def is_patio(self, door):
        """True if the door is a patio door"""

    @predicate(Direction)
    def direction(self, direction):
        """Defines the possible movement directions"""

    @action(Door)
    def open_door(self, door):
        precond = [self.closed(door)]
        effect = [~self.closed(door), self.open(door)]
        return precond, effect

    @action(Door)
    def close_door(self, door):
        precond = [self.open(door)]
        effect = [~self.open(door), self.closed(door)]
        return precond, effect

    @action(Location, Location, Door, Direction)
    def move(self, from_loc, to_loc, door, dir):
        precond = [self.agent_at(from_loc), self.connects(door, from_loc, to_loc, dir), self.open(door)]
        effect = [~self.agent_at(from_loc), self.agent_at(to_loc), self.visited(to_loc)]
        return precond, effect

Generated py_problem:
from py2pddl import goal, init

class KitchenObservation(EnvironmentExploration):
    def __init__(self):
        super().__init__()
        # Locations
        self.locations = EnvironmentExploration.Location.create_objs(["kitchen", "unknown_south", "unknown_west"])
        # Doors
        self.doors = EnvironmentExploration.Door.create_objs(["patio_door_south", "plain_door_west"])
        # Directions
        self.directions = EnvironmentExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        at = [self.agent_at(self.locations["kitchen"]),
              self.visited(self.locations["kitchen"]),
              # The agent is in kitchen, south is a closed patio door to unknown location
              self.connects(self.doors["patio_door_south"], self.locations["kitchen"], self.locations["unknown_south"], self.directions["south"]),
              self.connects(self.doors["plain_door_west"], self.locations["kitchen"], self.locations["unknown_west"], self.directions["west"]),
              self.closed(self.doors["patio_door_south"]),
              self.closed(self.doors["plain_door_west"]),
              self.is_patio(self.doors["patio_door_south"]),
              self.is_plain(self.doors["plain_door_west"]),
              self.direction(self.directions["south"]),
              self.direction(self.directions["west"]),
        ]
        return at

    @goal
    def goal(self):
        # Go to an as yet unvisited location
        return [self.agent_at(self.locations["unknown_south"])]


--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
N/A

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class EnvironmentExploration(Domain):
    Location = create_type("Location")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """True if the location has been visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """True if the agent is at this location"""

    @predicate(Door, Location, Location, Direction)
    def connects(self, door, loc1, loc2, direction):
        """True if this door connects loc1 to loc2 in the given direction"""

    @predicate(Door)
    def open(self, door):
        """True if the door is open"""

    @predicate(Door)
    def closed(self, door):
        """True if the door is closed"""

    @predicate(Door)
    def is_plain(self, door):
        """True if the door is a plain door"""

    @predicate(Door)
    def is_patio(self, door):
        """True if the door is a patio door"""

    @predicate(Direction)
    def direction(self, direction):
        """Defines the possible movement directions"""

    @action(Door)
    def open_door(self, door):
        precond = [self.closed(door)]
        effect = [~self.closed(door), self.open(door)]
        return precond, effect

    @action(Door)
    def close_door(self, door):
        precond = [self.open(door)]
        effect = [~self.open(door), self.closed(door)]
        return precond, effect

    @action(Location, Location, Door, Direction)
    def move(self, from_loc, to_loc, door, dir):
        precond = [self.agent_at(from_loc), self.connects(door, from_loc, to_loc, dir), self.open(door)]
        effect = [~self.agent_at(from_loc), self.agent_at(to_loc), self.visited(to_loc)]
        return precond, effect


### Python IR: problem class
from py2pddl import goal, init

class KitchenObservation(EnvironmentExploration):
    def __init__(self):
        super().__init__()
        # Locations
        self.locations = EnvironmentExploration.Location.create_objs(["kitchen", "unknown_south", "unknown_west"])
        # Doors
        self.doors = EnvironmentExploration.Door.create_objs(["patio_door_south", "plain_door_west"])
        # Directions
        self.directions = EnvironmentExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        at = [self.agent_at(self.locations["kitchen"]),
              self.visited(self.locations["kitchen"]),
              # The agent is in kitchen, south is a closed patio door to unknown location
              self.connects(self.doors["patio_door_south"], self.locations["kitchen"], self.locations["unknown_south"], self.directions["south"]),
              self.connects(self.doors["plain_door_west"], self.locations["kitchen"], self.locations["unknown_west"], self.directions["west"]),
              self.closed(self.doors["patio_door_south"]),
              self.closed(self.doors["plain_door_west"]),
              self.is_patio(self.doors["patio_door_south"]),
              self.is_plain(self.doors["plain_door_west"]),
              self.direction(self.directions["south"]),
              self.direction(self.directions["west"]),
        ]
        return at

    @goal
    def goal(self):
        # Go to an as yet unvisited location
        return [self.agent_at(self.locations["unknown_south"])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain environment_exploration)
  (:requirements :typing)

  (:types location direction)

  (:predicates
    (visited ?loc - location)
    (at ?loc - location)
    (connects ?from - location ?to - location ?dir - direction)
    (door_closed ?from - location ?to - location ?dir - direction)
    (door_open ?from - location ?to - location ?dir - direction)
    (is_plain ?from - location ?to - location ?dir - direction)
    (is_patio ?from - location ?to - location ?dir - direction)
    (direction ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (door_closed ?loc1 ?loc2 ?dir)
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir))
                 (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (connects ?from ?to ?dir)
                       (door_open ?from ?to ?dir))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)


[PDDL pf]
(define (problem kitchen-observation)
  (:domain environment_exploration)

  (:objects
    kitchen unknown_south unknown_west - location
    south west - direction
  )

  (:init
    (at kitchen)
    (visited kitchen)
    (connects kitchen unknown_south south)
    (connects kitchen unknown_west west)
    (door_closed kitchen unknown_south south)
    (door_closed kitchen unknown_west west)
    (is_patio kitchen unknown_south south)
    (is_plain kitchen unknown_west west)
    (direction south)
    (direction west)
  )

  (:goal (at unknown_south))
)

Actions from solver: ['open door to south', 'move south'] 
Raw plan text: (OPEN-DOOR KITCHEN UNKNOWN_SOUTH SOUTH)
(MOVE KITCHEN UNKNOWN_SOUTH SOUTH)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: ENVIRONMENT_EXPLORATION
	Problem: KITCHEN-OBSERVATION
	#Actions: 4
	#Fluents: 9
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[0 / 0]--
--[0 / 3]--
Total time: 0.000114
Nodes generated during search: 6
Nodes expanded during search: 3
Plan found with cost: 2
Fast-BFS search completed in 0.000114 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_66trzgr_/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 2 

Successful plans:
Value: 2
 /tmp/pddl_run_66trzgr_/plan_tmp.txt 2

Current action_queue: ['open door to south', 'move south'] 
> open door to south 
 You open the patio door, revealing the backyard.  
Small Loop, action_queue: ['move south'] 
Current action_queue: ['move south'] 
> move south 
 You are in the backyard. In one part of the room you see a barbeque. There is also a workbench, that has nothing on it. You also see a patio chair, that has nothing on it. In another part of the room you see a patio table, that has nothing on it. In one part of the room you see a clothes line, that has nothing on it. There is also a garden, that has nothing on it. 
Through an open patio door, to the North you see the kitchen. To the South you see the driveway. To the East you see the street. To the West you see a closed patio door.  


====Step 1==== 

----Larger Loop No. 0---- 
successful_actions: ['open door to south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: open door to south
You open the patio door, revealing the backyard. 

Action: move south
You are in the backyard. Through an open patio door, to the North you see the kitchen. To the South you see the driveway. To the East you see the street. To the West you see a closed patio door. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class EnvironmentExploration(Domain):
    Location = create_type("Location")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """True if the location has been visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """True if the agent is at this location"""

    @predicate(Door, Location, Location, Direction)
    def connects(self, door, loc1, loc2, direction):
        """True if this door connects loc1 to loc2 in the given direction"""

    @predicate(Door)
    def open(self, door):
        """True if the door is open"""

    @predicate(Door)
    def closed(self, door):
        """True if the door is closed"""

    @predicate(Door)
    def is_plain(self, door):
        """True if the door is a plain door"""

    @predicate(Door)
    def is_patio(self, door):
        """True if the door is a patio door"""

    @predicate(Direction)
    def direction(self, direction):
        """Defines the possible movement directions"""

    @action(Door)
    def open_door(self, door):
        precond = [self.closed(door)]
        effect = [~self.closed(door), self.open(door)]
        return precond, effect

    @action(Door)
    def close_door(self, door):
        precond = [self.open(door)]
        effect = [~self.open(door), self.closed(door)]
        return precond, effect

    @action(Location, Location, Door, Direction)
    def move(self, from_loc, to_loc, door, dir):
        precond = [self.agent_at(from_loc), self.connects(door, from_loc, to_loc, dir), self.open(door)]
        effect = [~self.agent_at(from_loc), self.agent_at(to_loc), self.visited(to_loc)]
        return precond, effect


[py_problem]
from py2pddl import goal, init

class KitchenObservation(EnvironmentExploration):
    def __init__(self):
        super().__init__()
        # Locations
        self.locations = EnvironmentExploration.Location.create_objs(["kitchen", "unknown_south", "unknown_west"])
        # Doors
        self.doors = EnvironmentExploration.Door.create_objs(["patio_door_south", "plain_door_west"])
        # Directions
        self.directions = EnvironmentExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        at = [self.agent_at(self.locations["kitchen"]),
              self.visited(self.locations["kitchen"]),
              # The agent is in kitchen, south is a closed patio door to unknown location
              self.connects(self.doors["patio_door_south"], self.locations["kitchen"], self.locations["unknown_south"], self.directions["south"]),
              self.connects(self.doors["plain_door_west"], self.locations["kitchen"], self.locations["unknown_west"], self.directions["west"]),
              self.closed(self.doors["patio_door_south"]),
              self.closed(self.doors["plain_door_west"]),
              self.is_patio(self.doors["patio_door_south"]),
              self.is_plain(self.doors["plain_door_west"]),
              self.direction(self.directions["south"]),
              self.direction(self.directions["west"]),
        ]
        return at

    @goal
    def goal(self):
        # Go to an as yet unvisited location
        return [self.agent_at(self.locations["unknown_south"])]


### Previous PDDL (generated from the IR)
[df]
(define (domain environment_exploration)
  (:requirements :typing)

  (:types location direction)

  (:predicates
    (visited ?loc - location)
    (at ?loc - location)
    (connects ?from - location ?to - location ?dir - direction)
    (door_closed ?from - location ?to - location ?dir - direction)
    (door_open ?from - location ?to - location ?dir - direction)
    (is_plain ?from - location ?to - location ?dir - direction)
    (is_patio ?from - location ?to - location ?dir - direction)
    (direction ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (door_closed ?loc1 ?loc2 ?dir)
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir))
                 (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (connects ?from ?to ?dir)
                       (door_open ?from ?to ?dir))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)


[pf]
(define (problem kitchen-observation)
  (:domain environment_exploration)

  (:objects
    kitchen unknown_south unknown_west - location
    south west - direction
  )

  (:init
    (at kitchen)
    (visited kitchen)
    (connects kitchen unknown_south south)
    (connects kitchen unknown_west west)
    (door_closed kitchen unknown_south south)
    (door_closed kitchen unknown_west west)
    (is_patio kitchen unknown_south south)
    (is_plain kitchen unknown_west west)
    (direction south)
    (direction west)
  )

  (:goal (at unknown_south))
)

### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
N/A

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class EnvironmentExploration(Domain):
    Location = create_type("Location")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """True if the location has been visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """True if the agent is at this location"""

    @predicate(Door, Location, Location, Direction)
    def connects(self, door, loc1, loc2, direction):
        """True if this door connects loc1 to loc2 in the given direction"""

    @predicate(Door)
    def open(self, door):
        """True if the door is open"""

    @predicate(Door)
    def closed(self, door):
        """True if the door is closed"""

    @predicate(Door)
    def is_plain(self, door):
        """True if the door is a plain door"""

    @predicate(Door)
    def is_patio(self, door):
        """True if the door is a patio door"""

    @predicate(Direction)
    def direction(self, direction):
        """Defines the possible movement directions"""

    @action(Door)
    def open_door(self, door):
        precond = [self.closed(door)]
        effect = [~self.closed(door), self.open(door)]
        return precond, effect

    @action(Door)
    def close_door(self, door):
        precond = [self.open(door)]
        effect = [~self.open(door), self.closed(door)]
        return precond, effect

    @action(Location, Location, Door, Direction)
    def move(self, from_loc, to_loc, door, dir):
        precond = [self.agent_at(from_loc), self.connects(door, from_loc, to_loc, dir), self.open(door)]
        effect = [~self.agent_at(from_loc), self.agent_at(to_loc), self.visited(to_loc)]
        return precond, effect

Generated py_problem:
from py2pddl import goal, init

class KitchenToBackyard(EnvironmentExploration):
    def __init__(self):
        super().__init__()
        # Locations
        self.locations = EnvironmentExploration.Location.create_objs(["kitchen", "backyard", "driveway", "street", "unknown_west"])
        # Doors
        self.doors = EnvironmentExploration.Door.create_objs(["patio_door_kitchen_south", "patio_door_backyard_west", "plain_door_west"])
        # Directions
        self.directions = EnvironmentExploration.Direction.create_objs(["south", "north", "west", "east"])

    @init
    def init(self):
        at = [self.agent_at(self.locations["backyard"]),
              self.visited(self.locations["kitchen"]),
              self.visited(self.locations["backyard"]),

              # Door: kitchen <-> backyard, south
              self.connects(self.doors["patio_door_kitchen_south"], self.locations["kitchen"], self.locations["backyard"], self.directions["south"]),
              self.connects(self.doors["patio_door_kitchen_south"], self.locations["backyard"], self.locations["kitchen"], self.directions["north"]),
              self.open(self.doors["patio_door_kitchen_south"]),
              self.is_patio(self.doors["patio_door_kitchen_south"]),

              # Backyard <-> driveway (south)
              self.connects(self.doors["patio_door_backyard_west"], self.locations["backyard"], self.locations["driveway"], self.directions["south"]),
              self.closed(self.doors["patio_door_backyard_west"]),
              self.is_patio(self.doors["patio_door_backyard_west"]),

              # Backyard <-> street (east)
              # Implicitly, may access directly (no door info yet), but not marking as visited or connected yet

              # Kitchen <-> unknown_west (still unseen)
              self.connects(self.doors["plain_door_west"], self.locations["kitchen"], self.locations["unknown_west"], self.directions["west"]),
              self.closed(self.doors["plain_door_west"]),
              self.is_plain(self.doors["plain_door_west"]),

              self.direction(self.directions["south"]),
              self.direction(self.directions["north"]),
              self.direction(self.directions["east"]),
              self.direction(self.directions["west"])
        ]
        return at

    @goal
    def goal(self):
        # Go to an as yet unvisited adjacent location; driveway is visible, not visited
        return [self.agent_at(self.locations["driveway"])]


--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: open door to south
You open the patio door, revealing the backyard. 

Action: move south
You are in the backyard. Through an open patio door, to the North you see the kitchen. To the South you see the driveway. To the East you see the street. To the West you see a closed patio door. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain environment_exploration)
  (:requirements :typing)

  (:types location direction)

  (:predicates
    (visited ?loc - location)
    (at ?loc - location)
    (connects ?from - location ?to - location ?dir - direction)
    (door_closed ?from - location ?to - location ?dir - direction)
    (door_open ?from - location ?to - location ?dir - direction)
    (is_plain ?from - location ?to - location ?dir - direction)
    (is_patio ?from - location ?to - location ?dir - direction)
    (direction ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (door_closed ?loc1 ?loc2 ?dir)
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir))
                 (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (connects ?from ?to ?dir)
                       (door_open ?from ?to ?dir))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)


[Problem file]
(define (problem kitchen-observation)
  (:domain environment_exploration)

  (:objects
    kitchen unknown_south unknown_west - location
    south west - direction
  )

  (:init
    (at kitchen)
    (visited kitchen)
    (connects kitchen unknown_south south)
    (connects kitchen unknown_west west)
    (door_closed kitchen unknown_south south)
    (door_closed kitchen unknown_west west)
    (is_patio kitchen unknown_south south)
    (is_plain kitchen unknown_west west)
    (direction south)
    (direction west)
  )

  (:goal (at unknown_south))
)


### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class EnvironmentExploration(Domain):
    Location = create_type("Location")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """True if the location has been visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """True if the agent is at this location"""

    @predicate(Door, Location, Location, Direction)
    def connects(self, door, loc1, loc2, direction):
        """True if this door connects loc1 to loc2 in the given direction"""

    @predicate(Door)
    def open(self, door):
        """True if the door is open"""

    @predicate(Door)
    def closed(self, door):
        """True if the door is closed"""

    @predicate(Door)
    def is_plain(self, door):
        """True if the door is a plain door"""

    @predicate(Door)
    def is_patio(self, door):
        """True if the door is a patio door"""

    @predicate(Direction)
    def direction(self, direction):
        """Defines the possible movement directions"""

    @action(Door)
    def open_door(self, door):
        precond = [self.closed(door)]
        effect = [~self.closed(door), self.open(door)]
        return precond, effect

    @action(Door)
    def close_door(self, door):
        precond = [self.open(door)]
        effect = [~self.open(door), self.closed(door)]
        return precond, effect

    @action(Location, Location, Door, Direction)
    def move(self, from_loc, to_loc, door, dir):
        precond = [self.agent_at(from_loc), self.connects(door, from_loc, to_loc, dir), self.open(door)]
        effect = [~self.agent_at(from_loc), self.agent_at(to_loc), self.visited(to_loc)]
        return precond, effect


### Python IR: problem class
from py2pddl import goal, init

class KitchenToBackyard(EnvironmentExploration):
    def __init__(self):
        super().__init__()
        # Locations
        self.locations = EnvironmentExploration.Location.create_objs(["kitchen", "backyard", "driveway", "street", "unknown_west"])
        # Doors
        self.doors = EnvironmentExploration.Door.create_objs(["patio_door_kitchen_south", "patio_door_backyard_west", "plain_door_west"])
        # Directions
        self.directions = EnvironmentExploration.Direction.create_objs(["south", "north", "west", "east"])

    @init
    def init(self):
        at = [self.agent_at(self.locations["backyard"]),
              self.visited(self.locations["kitchen"]),
              self.visited(self.locations["backyard"]),

              # Door: kitchen <-> backyard, south
              self.connects(self.doors["patio_door_kitchen_south"], self.locations["kitchen"], self.locations["backyard"], self.directions["south"]),
              self.connects(self.doors["patio_door_kitchen_south"], self.locations["backyard"], self.locations["kitchen"], self.directions["north"]),
              self.open(self.doors["patio_door_kitchen_south"]),
              self.is_patio(self.doors["patio_door_kitchen_south"]),

              # Backyard <-> driveway (south)
              self.connects(self.doors["patio_door_backyard_west"], self.locations["backyard"], self.locations["driveway"], self.directions["south"]),
              self.closed(self.doors["patio_door_backyard_west"]),
              self.is_patio(self.doors["patio_door_backyard_west"]),

              # Backyard <-> street (east)
              # Implicitly, may access directly (no door info yet), but not marking as visited or connected yet

              # Kitchen <-> unknown_west (still unseen)
              self.connects(self.doors["plain_door_west"], self.locations["kitchen"], self.locations["unknown_west"], self.directions["west"]),
              self.closed(self.doors["plain_door_west"]),
              self.is_plain(self.doors["plain_door_west"]),

              self.direction(self.directions["south"]),
              self.direction(self.directions["north"]),
              self.direction(self.directions["east"]),
              self.direction(self.directions["west"])
        ]
        return at

    @goal
    def goal(self):
        # Go to an as yet unvisited adjacent location; driveway is visible, not visited
        return [self.agent_at(self.locations["driveway"])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain environment_exploration)
  (:requirements :typing)

  (:types location direction)

  (:predicates
    (visited ?loc - location)
    (at ?loc - location)
    (connects ?from - location ?to - location ?dir - direction)
    (door_closed ?from - location ?to - location ?dir - direction)
    (door_open ?from - location ?to - location ?dir - direction)
    (is_plain ?from - location ?to - location ?dir - direction)
    (is_patio ?from - location ?to - location ?dir - direction)
    (direction ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (door_closed ?loc1 ?loc2 ?dir)
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir))
                 (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (connects ?from ?to ?dir)
                       (door_open ?from ?to ?dir))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)


[PDDL pf]
(define (problem kitchen-to-backyard)
  (:domain environment_exploration)

  (:objects
    kitchen backyard driveway street unknown_west - location
    south north east west - direction
  )

  (:init
    (at backyard)
    (visited kitchen)
    (visited backyard)

    (connects kitchen backyard south)
    (connects backyard kitchen north)
    (door_open kitchen backyard south)
    (door_open backyard kitchen north)
    (is_patio kitchen backyard south)
    (is_patio backyard kitchen north)

    (connects backyard driveway south)
    (connects driveway backyard north)
    (door_closed backyard driveway south)
    (door_closed driveway backyard north)
    (is_patio backyard driveway south)
    (is_patio driveway backyard north)

    (connects kitchen unknown_west west)
    (connects unknown_west kitchen east)
    (door_closed kitchen unknown_west west)
    (door_closed unknown_west kitchen east)
    (is_plain kitchen unknown_west west)
    (is_plain unknown_west kitchen east)

    (direction south)
    (direction north)
    (direction east)
    (direction west)
  )

  (:goal (at driveway))
)

Actions from solver: ['open door to south', 'move south'] 
Raw plan text: (OPEN-DOOR BACKYARD DRIVEWAY SOUTH)
(MOVE BACKYARD DRIVEWAY SOUTH)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 10 nodes.

PDDL problem description loaded: 
	Domain: ENVIRONMENT_EXPLORATION
	Problem: KITCHEN-TO-BACKYARD
	#Actions: 10
	#Fluents: 14
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[0 / 0]--
--[0 / 3]--
Total time: 0.000145
Nodes generated during search: 11
Nodes expanded during search: 6
Plan found with cost: 2
Fast-BFS search completed in 0.000145 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_cxr9_1xl/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 2 

Successful plans:
Value: 2
 /tmp/pddl_run_cxr9_1xl/plan_tmp.txt 2

Current action_queue: ['open door to south', 'move south'] 
> open door to south 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.
 

----Larger Loop No. 1---- 
successful_actions: ['open door to south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: open door to south
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class EnvironmentExploration(Domain):
    Location = create_type("Location")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """True if the location has been visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """True if the agent is at this location"""

    @predicate(Door, Location, Location, Direction)
    def connects(self, door, loc1, loc2, direction):
        """True if this door connects loc1 to loc2 in the given direction"""

    @predicate(Door)
    def open(self, door):
        """True if the door is open"""

    @predicate(Door)
    def closed(self, door):
        """True if the door is closed"""

    @predicate(Door)
    def is_plain(self, door):
        """True if the door is a plain door"""

    @predicate(Door)
    def is_patio(self, door):
        """True if the door is a patio door"""

    @predicate(Direction)
    def direction(self, direction):
        """Defines the possible movement directions"""

    @action(Door)
    def open_door(self, door):
        precond = [self.closed(door)]
        effect = [~self.closed(door), self.open(door)]
        return precond, effect

    @action(Door)
    def close_door(self, door):
        precond = [self.open(door)]
        effect = [~self.open(door), self.closed(door)]
        return precond, effect

    @action(Location, Location, Door, Direction)
    def move(self, from_loc, to_loc, door, dir):
        precond = [self.agent_at(from_loc), self.connects(door, from_loc, to_loc, dir), self.open(door)]
        effect = [~self.agent_at(from_loc), self.agent_at(to_loc), self.visited(to_loc)]
        return precond, effect


[py_problem]
from py2pddl import goal, init

class KitchenToBackyard(EnvironmentExploration):
    def __init__(self):
        super().__init__()
        # Locations
        self.locations = EnvironmentExploration.Location.create_objs(["kitchen", "backyard", "driveway", "street", "unknown_west"])
        # Doors
        self.doors = EnvironmentExploration.Door.create_objs(["patio_door_kitchen_south", "patio_door_backyard_west", "plain_door_west"])
        # Directions
        self.directions = EnvironmentExploration.Direction.create_objs(["south", "north", "west", "east"])

    @init
    def init(self):
        at = [self.agent_at(self.locations["backyard"]),
              self.visited(self.locations["kitchen"]),
              self.visited(self.locations["backyard"]),

              # Door: kitchen <-> backyard, south
              self.connects(self.doors["patio_door_kitchen_south"], self.locations["kitchen"], self.locations["backyard"], self.directions["south"]),
              self.connects(self.doors["patio_door_kitchen_south"], self.locations["backyard"], self.locations["kitchen"], self.directions["north"]),
              self.open(self.doors["patio_door_kitchen_south"]),
              self.is_patio(self.doors["patio_door_kitchen_south"]),

              # Backyard <-> driveway (south)
              self.connects(self.doors["patio_door_backyard_west"], self.locations["backyard"], self.locations["driveway"], self.directions["south"]),
              self.closed(self.doors["patio_door_backyard_west"]),
              self.is_patio(self.doors["patio_door_backyard_west"]),

              # Backyard <-> street (east)
              # Implicitly, may access directly (no door info yet), but not marking as visited or connected yet

              # Kitchen <-> unknown_west (still unseen)
              self.connects(self.doors["plain_door_west"], self.locations["kitchen"], self.locations["unknown_west"], self.directions["west"]),
              self.closed(self.doors["plain_door_west"]),
              self.is_plain(self.doors["plain_door_west"]),

              self.direction(self.directions["south"]),
              self.direction(self.directions["north"]),
              self.direction(self.directions["east"]),
              self.direction(self.directions["west"])
        ]
        return at

    @goal
    def goal(self):
        # Go to an as yet unvisited adjacent location; driveway is visible, not visited
        return [self.agent_at(self.locations["driveway"])]


### Previous PDDL (generated from the IR)
[df]
(define (domain environment_exploration)
  (:requirements :typing)

  (:types location direction)

  (:predicates
    (visited ?loc - location)
    (at ?loc - location)
    (connects ?from - location ?to - location ?dir - direction)
    (door_closed ?from - location ?to - location ?dir - direction)
    (door_open ?from - location ?to - location ?dir - direction)
    (is_plain ?from - location ?to - location ?dir - direction)
    (is_patio ?from - location ?to - location ?dir - direction)
    (direction ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (door_closed ?loc1 ?loc2 ?dir)
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir))
                 (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (connects ?from ?to ?dir)
                       (door_open ?from ?to ?dir))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)


[pf]
(define (problem kitchen-to-backyard)
  (:domain environment_exploration)

  (:objects
    kitchen backyard driveway street unknown_west - location
    south north east west - direction
  )

  (:init
    (at backyard)
    (visited kitchen)
    (visited backyard)

    (connects kitchen backyard south)
    (connects backyard kitchen north)
    (door_open kitchen backyard south)
    (door_open backyard kitchen north)
    (is_patio kitchen backyard south)
    (is_patio backyard kitchen north)

    (connects backyard driveway south)
    (connects driveway backyard north)
    (door_closed backyard driveway south)
    (door_closed driveway backyard north)
    (is_patio backyard driveway south)
    (is_patio driveway backyard north)

    (connects kitchen unknown_west west)
    (connects unknown_west kitchen east)
    (door_closed kitchen unknown_west west)
    (door_closed unknown_west kitchen east)
    (is_plain kitchen unknown_west west)
    (is_plain unknown_west kitchen east)

    (direction south)
    (direction north)
    (direction east)
    (direction west)
  )

  (:goal (at driveway))
)

### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class EnvironmentExploration(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """True if the location has been visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """True if the agent is at this location"""

    @predicate(Location, Location, Direction)
    def connects(self, loc1, loc2, direction):
        """True if loc1 connects to loc2 in the given direction with no door"""

    @predicate(Direction)
    def direction(self, direction):
        """Defines the possible movement directions"""

    @action(Location, Location, Direction)
    def move(self, from_loc, to_loc, dir):
        precond = [self.agent_at(from_loc), self.connects(from_loc, to_loc, dir)]
        effect = [~self.agent_at(from_loc), self.agent_at(to_loc), self.visited(to_loc)]
        return precond, effect

Generated py_problem:
from py2pddl import goal, init

class KitchenToBackyard(EnvironmentExploration):
    def __init__(self):
        super().__init__()
        # Locations
        self.locations = EnvironmentExploration.Location.create_objs(["kitchen", "backyard", "driveway", "street", "unknown_west"])
        # Directions
        self.directions = EnvironmentExploration.Direction.create_objs(["south", "north", "west", "east"])

    @init
    def init(self):
        at = [self.agent_at(self.locations["backyard"]),
              self.visited(self.locations["kitchen"]),
              self.visited(self.locations["backyard"]),
              # Connect backyard to driveway via south (no door, direct)
              self.connects(self.locations["backyard"], self.locations["driveway"], self.directions["south"]),
              self.connects(self.locations["driveway"], self.locations["backyard"], self.directions["north"]),
              # Connect kitchen <-> backyard (already visited, implied), but movement only between backyard and driveway for now
              self.direction(self.directions["south"]),
              self.direction(self.directions["north"]),
              self.direction(self.directions["east"]),
              self.direction(self.directions["west"])
        ]
        return at

    @goal
    def goal(self):
        # Move to driveway since not yet visited
        return [self.agent_at(self.locations["driveway"])]


--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: open door to south
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain environment_exploration)
  (:requirements :typing)

  (:types location direction)

  (:predicates
    (visited ?loc - location)
    (at ?loc - location)
    (connects ?from - location ?to - location ?dir - direction)
    (door_closed ?from - location ?to - location ?dir - direction)
    (door_open ?from - location ?to - location ?dir - direction)
    (is_plain ?from - location ?to - location ?dir - direction)
    (is_patio ?from - location ?to - location ?dir - direction)
    (direction ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (door_closed ?loc1 ?loc2 ?dir)
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir))
                 (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (connects ?from ?to ?dir)
                       (door_open ?from ?to ?dir))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)


[Problem file]
(define (problem kitchen-to-backyard)
  (:domain environment_exploration)

  (:objects
    kitchen backyard driveway street unknown_west - location
    south north east west - direction
  )

  (:init
    (at backyard)
    (visited kitchen)
    (visited backyard)

    (connects kitchen backyard south)
    (connects backyard kitchen north)
    (door_open kitchen backyard south)
    (door_open backyard kitchen north)
    (is_patio kitchen backyard south)
    (is_patio backyard kitchen north)

    (connects backyard driveway south)
    (connects driveway backyard north)
    (door_closed backyard driveway south)
    (door_closed driveway backyard north)
    (is_patio backyard driveway south)
    (is_patio driveway backyard north)

    (connects kitchen unknown_west west)
    (connects unknown_west kitchen east)
    (door_closed kitchen unknown_west west)
    (door_closed unknown_west kitchen east)
    (is_plain kitchen unknown_west west)
    (is_plain unknown_west kitchen east)

    (direction south)
    (direction north)
    (direction east)
    (direction west)
  )

  (:goal (at driveway))
)


### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class EnvironmentExploration(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """True if the location has been visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """True if the agent is at this location"""

    @predicate(Location, Location, Direction)
    def connects(self, loc1, loc2, direction):
        """True if loc1 connects to loc2 in the given direction with no door"""

    @predicate(Direction)
    def direction(self, direction):
        """Defines the possible movement directions"""

    @action(Location, Location, Direction)
    def move(self, from_loc, to_loc, dir):
        precond = [self.agent_at(from_loc), self.connects(from_loc, to_loc, dir)]
        effect = [~self.agent_at(from_loc), self.agent_at(to_loc), self.visited(to_loc)]
        return precond, effect


### Python IR: problem class
from py2pddl import goal, init

class KitchenToBackyard(EnvironmentExploration):
    def __init__(self):
        super().__init__()
        # Locations
        self.locations = EnvironmentExploration.Location.create_objs(["kitchen", "backyard", "driveway", "street", "unknown_west"])
        # Directions
        self.directions = EnvironmentExploration.Direction.create_objs(["south", "north", "west", "east"])

    @init
    def init(self):
        at = [self.agent_at(self.locations["backyard"]),
              self.visited(self.locations["kitchen"]),
              self.visited(self.locations["backyard"]),
              # Connect backyard to driveway via south (no door, direct)
              self.connects(self.locations["backyard"], self.locations["driveway"], self.directions["south"]),
              self.connects(self.locations["driveway"], self.locations["backyard"], self.directions["north"]),
              # Connect kitchen <-> backyard (already visited, implied), but movement only between backyard and driveway for now
              self.direction(self.directions["south"]),
              self.direction(self.directions["north"]),
              self.direction(self.directions["east"]),
              self.direction(self.directions["west"])
        ]
        return at

    @goal
    def goal(self):
        # Move to driveway since not yet visited
        return [self.agent_at(self.locations["driveway"])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain environment_exploration)
  (:requirements :typing)

  (:types location direction)

  (:predicates
    (visited ?loc - location)
    (agent_at ?loc - location)
    (connects ?from - location ?to - location ?dir - direction)
    (direction ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and)
    :effect (and)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (agent_at ?from)
                       (connects ?from ?to ?dir))
    :effect (and (not (agent_at ?from))
                 (agent_at ?to)
                 (visited ?to))
  )
)


[PDDL pf]
(define (problem kitchen-to-backyard)
  (:domain environment_exploration)

  (:objects
    kitchen backyard driveway street unknown_west - location
    south north east west - direction
  )

  (:init
    (agent_at backyard)
    (visited kitchen)
    (visited backyard)

    (connects backyard driveway south)
    (connects driveway backyard north)

    (direction south)
    (direction north)
    (direction east)
    (direction west)
  )

  (:goal (agent_at driveway))
)

Actions from solver: ['move south'] 
Raw plan text: (MOVE BACKYARD DRIVEWAY SOUTH)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    warning: empty con/disjunction in domain definition. simplifying.

 --- OK.
 Match tree built with 2 nodes.

PDDL problem description loaded: 
	Domain: ENVIRONMENT_EXPLORATION
	Problem: KITCHEN-TO-BACKYARD
	#Actions: 2
	#Fluents: 3
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[0 / 0]--
--[0 / 2]--
Total time: 9.79999e-05
Nodes generated during search: 2
Nodes expanded during search: 1
Plan found with cost: 1
Fast-BFS search completed in 9.79999e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_4hjvqujp/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 1 

Successful plans:
Value: 1
 /tmp/pddl_run_4hjvqujp/plan_tmp.txt 1

Current action_queue: ['move south'] 
> move south 
 You are in the driveway. 
To the North you see the backyard.  


====Step 2==== 

----Larger Loop No. 0---- 
successful_actions: ['open door to south', 'move south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: move south
You are in the driveway. To the North you see the backyard. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class EnvironmentExploration(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """True if the location has been visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """True if the agent is at this location"""

    @predicate(Location, Location, Direction)
    def connects(self, loc1, loc2, direction):
        """True if loc1 connects to loc2 in the given direction with no door"""

    @predicate(Direction)
    def direction(self, direction):
        """Defines the possible movement directions"""

    @action(Location, Location, Direction)
    def move(self, from_loc, to_loc, dir):
        precond = [self.agent_at(from_loc), self.connects(from_loc, to_loc, dir)]
        effect = [~self.agent_at(from_loc), self.agent_at(to_loc), self.visited(to_loc)]
        return precond, effect


[py_problem]
from py2pddl import goal, init

class KitchenToBackyard(EnvironmentExploration):
    def __init__(self):
        super().__init__()
        # Locations
        self.locations = EnvironmentExploration.Location.create_objs(["kitchen", "backyard", "driveway", "street", "unknown_west"])
        # Directions
        self.directions = EnvironmentExploration.Direction.create_objs(["south", "north", "west", "east"])

    @init
    def init(self):
        at = [self.agent_at(self.locations["backyard"]),
              self.visited(self.locations["kitchen"]),
              self.visited(self.locations["backyard"]),
              # Connect backyard to driveway via south (no door, direct)
              self.connects(self.locations["backyard"], self.locations["driveway"], self.directions["south"]),
              self.connects(self.locations["driveway"], self.locations["backyard"], self.directions["north"]),
              # Connect kitchen <-> backyard (already visited, implied), but movement only between backyard and driveway for now
              self.direction(self.directions["south"]),
              self.direction(self.directions["north"]),
              self.direction(self.directions["east"]),
              self.direction(self.directions["west"])
        ]
        return at

    @goal
    def goal(self):
        # Move to driveway since not yet visited
        return [self.agent_at(self.locations["driveway"])]


### Previous PDDL (generated from the IR)
[df]
(define (domain environment_exploration)
  (:requirements :typing)

  (:types location direction)

  (:predicates
    (visited ?loc - location)
    (agent_at ?loc - location)
    (connects ?from - location ?to - location ?dir - direction)
    (direction ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and)
    :effect (and)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (agent_at ?from)
                       (connects ?from ?to ?dir))
    :effect (and (not (agent_at ?from))
                 (agent_at ?to)
                 (visited ?to))
  )
)


[pf]
(define (problem kitchen-to-backyard)
  (:domain environment_exploration)

  (:objects
    kitchen backyard driveway street unknown_west - location
    south north east west - direction
  )

  (:init
    (agent_at backyard)
    (visited kitchen)
    (visited backyard)

    (connects backyard driveway south)
    (connects driveway backyard north)

    (direction south)
    (direction north)
    (direction east)
    (direction west)
  )

  (:goal (agent_at driveway))
)

### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
N/A

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class EnvironmentExploration(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")
    Door = create_type("Door")

    @predicate(Location)
    def visited(self, loc):
        """True if the location has been visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """True if the agent is at this location"""

    @predicate(Location, Location, Direction, Door)
    def connects_via_door(self, loc1, loc2, direction, door):
        """True if loc1 connects to loc2 in the given direction via the given door"""

    @predicate(Door)
    def door_open(self, door):
        """True if the door is open"""

    @predicate(Direction)
    def direction(self, direction):
        """Defines the possible movement directions"""

    @predicate(Door)
    def door(self, door):
        """Defines that an object is a door"""

    @action(Location, Location, Direction, Door)
    def open_door(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            ~self.door_open(door)
        ]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Location, Location, Direction, Door)
    def close_door(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            self.door_open(door)
        ]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Location, Location, Direction, Door)
    def move(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            self.door_open(door)
        ]
        effect = [~self.agent_at(from_loc), self.agent_at(to_loc), self.visited(to_loc)]
        return precond, effect

Generated py_problem:
from py2pddl import goal, init

class DrivewayExploration(EnvironmentExploration):
    def __init__(self):
        super().__init__()
        self.locations = EnvironmentExploration.Location.create_objs(["backyard", "driveway"])
        self.directions = EnvironmentExploration.Direction.create_objs(["south", "north", "west"])
        self.doors = EnvironmentExploration.Door.create_objs(["door_to_south", "door_to_west"])

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["driveway"]),
            self.visited(self.locations["driveway"]),
            self.visited(self.locations["backyard"]),
            self.connects_via_door(self.locations["driveway"], self.locations["backyard"], self.directions["north"], self.doors["door_to_south"]),
            self.connects_via_door(self.locations["backyard"], self.locations["driveway"], self.directions["south"], self.doors["door_to_south"]),
            self.door(self.doors["door_to_south"]),
            self.door_open(self.doors["door_to_south"]),
            self.direction(self.directions["south"]),
            self.direction(self.directions["north"]),
            self.direction(self.directions["west"])
        ]
        return at

    @goal
    def goal(self):
        # Next unexplored location is to the west (door), so the goal is to move agent to unknown west location
        # Since we don't know the concrete name yet, waiting for further exploration.
        # For now, just stay in driveway (since all reachable locations are visited in the current observation), or if you want a not-yet-known location, nothing to add.
        # But to keep the agent exploring, we set the goal as not visited 'unknown_west' once it appears in next obs.
        return []


--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move south
You are in the driveway. To the North you see the backyard. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain environment_exploration)
  (:requirements :typing)

  (:types location direction)

  (:predicates
    (visited ?loc - location)
    (agent_at ?loc - location)
    (connects ?from - location ?to - location ?dir - direction)
    (direction ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and)
    :effect (and)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (agent_at ?from)
                       (connects ?from ?to ?dir))
    :effect (and (not (agent_at ?from))
                 (agent_at ?to)
                 (visited ?to))
  )
)


[Problem file]
(define (problem kitchen-to-backyard)
  (:domain environment_exploration)

  (:objects
    kitchen backyard driveway street unknown_west - location
    south north east west - direction
  )

  (:init
    (agent_at backyard)
    (visited kitchen)
    (visited backyard)

    (connects backyard driveway south)
    (connects driveway backyard north)

    (direction south)
    (direction north)
    (direction east)
    (direction west)
  )

  (:goal (agent_at driveway))
)


### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class EnvironmentExploration(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")
    Door = create_type("Door")

    @predicate(Location)
    def visited(self, loc):
        """True if the location has been visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """True if the agent is at this location"""

    @predicate(Location, Location, Direction, Door)
    def connects_via_door(self, loc1, loc2, direction, door):
        """True if loc1 connects to loc2 in the given direction via the given door"""

    @predicate(Door)
    def door_open(self, door):
        """True if the door is open"""

    @predicate(Direction)
    def direction(self, direction):
        """Defines the possible movement directions"""

    @predicate(Door)
    def door(self, door):
        """Defines that an object is a door"""

    @action(Location, Location, Direction, Door)
    def open_door(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            ~self.door_open(door)
        ]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Location, Location, Direction, Door)
    def close_door(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            self.door_open(door)
        ]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Location, Location, Direction, Door)
    def move(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            self.door_open(door)
        ]
        effect = [~self.agent_at(from_loc), self.agent_at(to_loc), self.visited(to_loc)]
        return precond, effect


### Python IR: problem class
from py2pddl import goal, init

class DrivewayExploration(EnvironmentExploration):
    def __init__(self):
        super().__init__()
        self.locations = EnvironmentExploration.Location.create_objs(["backyard", "driveway"])
        self.directions = EnvironmentExploration.Direction.create_objs(["south", "north", "west"])
        self.doors = EnvironmentExploration.Door.create_objs(["door_to_south", "door_to_west"])

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["driveway"]),
            self.visited(self.locations["driveway"]),
            self.visited(self.locations["backyard"]),
            self.connects_via_door(self.locations["driveway"], self.locations["backyard"], self.directions["north"], self.doors["door_to_south"]),
            self.connects_via_door(self.locations["backyard"], self.locations["driveway"], self.directions["south"], self.doors["door_to_south"]),
            self.door(self.doors["door_to_south"]),
            self.door_open(self.doors["door_to_south"]),
            self.direction(self.directions["south"]),
            self.direction(self.directions["north"]),
            self.direction(self.directions["west"])
        ]
        return at

    @goal
    def goal(self):
        # Next unexplored location is to the west (door), so the goal is to move agent to unknown west location
        # Since we don't know the concrete name yet, waiting for further exploration.
        # For now, just stay in driveway (since all reachable locations are visited in the current observation), or if you want a not-yet-known location, nothing to add.
        # But to keep the agent exploring, we set the goal as not visited 'unknown_west' once it appears in next obs.
        return []


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain environment_exploration)
  (:requirements :typing)

  (:types location direction)

  (:predicates
    (visited ?loc - location)
    (agent_at ?loc - location)
    (connects ?from - location ?to - location ?dir - direction)
    (direction ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and)
    :effect (and)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (agent_at ?from)
      (connects ?from ?to ?dir)
    )
    :effect (and
      (not (agent_at ?from))
      (agent_at ?to)
      (visited ?to)
    )
  )
)


[PDDL pf]
(define (problem driveway-exploration)
  (:domain environment_exploration)

  (:objects
    backyard driveway - location
    south north west - direction
  )

  (:init
    (agent_at driveway)
    (visited driveway)
    (visited backyard)
    (connects driveway backyard north)
    (connects backyard driveway south)
    (direction south)
    (direction north)
    (direction west)
  )

  (:goal (agent_at driveway))
)

Actions from solver: None 
Raw plan text:  
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    warning: empty con/disjunction in domain definition. simplifying.

 --- OK.
 Match tree built with 2 nodes.

PDDL problem description loaded: 
	Domain: ENVIRONMENT_EXPLORATION
	Problem: DRIVEWAY-EXPLORATION
	#Actions: 2
	#Fluents: 2
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[0 / 0]--
Total time: 8.49998e-05
Nodes generated during search: 1
Nodes expanded during search: 0
Plan found with cost: 0
Fast-BFS search completed in 8.49998e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    No validation log.


--- Attempting to Plan (Small Loop Try #2) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move south
You are in the driveway. To the North you see the backyard. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain environment_exploration)
  (:requirements :typing)

  (:types location direction)

  (:predicates
    (visited ?loc - location)
    (agent_at ?loc - location)
    (connects ?from - location ?to - location ?dir - direction)
    (direction ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and)
    :effect (and)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (agent_at ?from)
      (connects ?from ?to ?dir)
    )
    :effect (and
      (not (agent_at ?from))
      (agent_at ?to)
      (visited ?to)
    )
  )
)


[Problem file]
(define (problem driveway-exploration)
  (:domain environment_exploration)

  (:objects
    backyard driveway - location
    south north west - direction
  )

  (:init
    (agent_at driveway)
    (visited driveway)
    (visited backyard)
    (connects driveway backyard north)
    (connects backyard driveway south)
    (direction south)
    (direction north)
    (direction west)
  )

  (:goal (agent_at driveway))
)


### (Optional) Planner/validator feedback to fix
                    ── SOLVER LOG ─────────────────────────────────
                    warning: empty con/disjunction in domain definition. simplifying.

 --- OK.
 Match tree built with 2 nodes.

PDDL problem description loaded: 
	Domain: ENVIRONMENT_EXPLORATION
	Problem: DRIVEWAY-EXPLORATION
	#Actions: 2
	#Fluents: 2
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[0 / 0]--
Total time: 8.49998e-05
Nodes generated during search: 1
Nodes expanded during search: 0
Plan found with cost: 0
Fast-BFS search completed in 8.49998e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    No validation log.


### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class EnvironmentExploration(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")
    Door = create_type("Door")

    @predicate(Location)
    def visited(self, loc):
        """True if the location has been visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """True if the agent is at this location"""

    @predicate(Location, Location, Direction, Door)
    def connects_via_door(self, loc1, loc2, direction, door):
        """True if loc1 connects to loc2 in the given direction via the given door"""

    @predicate(Door)
    def door_open(self, door):
        """True if the door is open"""

    @predicate(Direction)
    def direction(self, direction):
        """Defines the possible movement directions"""

    @predicate(Door)
    def door(self, door):
        """Defines that an object is a door"""

    @action(Location, Location, Direction, Door)
    def open_door(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            ~self.door_open(door)
        ]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Location, Location, Direction, Door)
    def close_door(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            self.door_open(door)
        ]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Location, Location, Direction, Door)
    def move(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            self.door_open(door)
        ]
        effect = [~self.agent_at(from_loc), self.agent_at(to_loc), self.visited(to_loc)]
        return precond, effect


### Python IR: problem class
from py2pddl import goal, init

class DrivewayExploration(EnvironmentExploration):
    def __init__(self):
        super().__init__()
        self.locations = EnvironmentExploration.Location.create_objs(["backyard", "driveway"])
        self.directions = EnvironmentExploration.Direction.create_objs(["south", "north", "west"])
        self.doors = EnvironmentExploration.Door.create_objs(["door_to_south", "door_to_west"])

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["driveway"]),
            self.visited(self.locations["driveway"]),
            self.visited(self.locations["backyard"]),
            self.connects_via_door(self.locations["driveway"], self.locations["backyard"], self.directions["north"], self.doors["door_to_south"]),
            self.connects_via_door(self.locations["backyard"], self.locations["driveway"], self.directions["south"], self.doors["door_to_south"]),
            self.door(self.doors["door_to_south"]),
            self.door_open(self.doors["door_to_south"]),
            self.direction(self.directions["south"]),
            self.direction(self.directions["north"]),
            self.direction(self.directions["west"])
        ]
        return at

    @goal
    def goal(self):
        # Next unexplored location is to the west (door), so the goal is to move agent to unknown west location
        # Since we don't know the concrete name yet, waiting for further exploration.
        # For now, just stay in driveway (since all reachable locations are visited in the current observation), or if you want a not-yet-known location, nothing to add.
        # But to keep the agent exploring, we set the goal as not visited 'unknown_west' once it appears in next obs.
        return []


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain environment_exploration)
  (:requirements :typing)

  (:types location direction)

  (:predicates
    (visited ?loc - location)
    (agent_at ?loc - location)
    (connects ?from - location ?to - location ?dir - direction)
    (direction ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and)
    :effect (and)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (agent_at ?from)
      (connects ?from ?to ?dir)
    )
    :effect (and
      (not (agent_at ?from))
      (agent_at ?to)
      (visited ?to)
    )
  )
)


[PDDL pf]
(define (problem driveway-exploration)
  (:domain environment_exploration)

  (:objects
    backyard driveway - location
    south north west - direction
  )

  (:init
    (agent_at driveway)
    (visited driveway)
    (visited backyard)
    (connects driveway backyard north)
    (connects backyard driveway south)
    (direction south)
    (direction north)
    (direction west)
  )

  (:goal (agent_at driveway))
)

Actions from solver: None 
Raw plan text:  
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    warning: empty con/disjunction in domain definition. simplifying.

 --- OK.
 Match tree built with 2 nodes.

PDDL problem description loaded: 
	Domain: ENVIRONMENT_EXPLORATION
	Problem: DRIVEWAY-EXPLORATION
	#Actions: 2
	#Fluents: 2
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[0 / 0]--
Total time: 7.80001e-05
Nodes generated during search: 1
Nodes expanded during search: 0
Plan found with cost: 0
Fast-BFS search completed in 7.80001e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    No validation log.

[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: move south
You are in the driveway. To the North you see the backyard. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class EnvironmentExploration(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")
    Door = create_type("Door")

    @predicate(Location)
    def visited(self, loc):
        """True if the location has been visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """True if the agent is at this location"""

    @predicate(Location, Location, Direction, Door)
    def connects_via_door(self, loc1, loc2, direction, door):
        """True if loc1 connects to loc2 in the given direction via the given door"""

    @predicate(Door)
    def door_open(self, door):
        """True if the door is open"""

    @predicate(Direction)
    def direction(self, direction):
        """Defines the possible movement directions"""

    @predicate(Door)
    def door(self, door):
        """Defines that an object is a door"""

    @action(Location, Location, Direction, Door)
    def open_door(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            ~self.door_open(door)
        ]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Location, Location, Direction, Door)
    def close_door(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            self.door_open(door)
        ]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Location, Location, Direction, Door)
    def move(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            self.door_open(door)
        ]
        effect = [~self.agent_at(from_loc), self.agent_at(to_loc), self.visited(to_loc)]
        return precond, effect


[py_problem]
from py2pddl import goal, init

class DrivewayExploration(EnvironmentExploration):
    def __init__(self):
        super().__init__()
        self.locations = EnvironmentExploration.Location.create_objs(["backyard", "driveway"])
        self.directions = EnvironmentExploration.Direction.create_objs(["south", "north", "west"])
        self.doors = EnvironmentExploration.Door.create_objs(["door_to_south", "door_to_west"])

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["driveway"]),
            self.visited(self.locations["driveway"]),
            self.visited(self.locations["backyard"]),
            self.connects_via_door(self.locations["driveway"], self.locations["backyard"], self.directions["north"], self.doors["door_to_south"]),
            self.connects_via_door(self.locations["backyard"], self.locations["driveway"], self.directions["south"], self.doors["door_to_south"]),
            self.door(self.doors["door_to_south"]),
            self.door_open(self.doors["door_to_south"]),
            self.direction(self.directions["south"]),
            self.direction(self.directions["north"]),
            self.direction(self.directions["west"])
        ]
        return at

    @goal
    def goal(self):
        # Next unexplored location is to the west (door), so the goal is to move agent to unknown west location
        # Since we don't know the concrete name yet, waiting for further exploration.
        # For now, just stay in driveway (since all reachable locations are visited in the current observation), or if you want a not-yet-known location, nothing to add.
        # But to keep the agent exploring, we set the goal as not visited 'unknown_west' once it appears in next obs.
        return []


### Previous PDDL (generated from the IR)
[df]
(define (domain environment_exploration)
  (:requirements :typing)

  (:types location direction)

  (:predicates
    (visited ?loc - location)
    (agent_at ?loc - location)
    (connects ?from - location ?to - location ?dir - direction)
    (direction ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and)
    :effect (and)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (agent_at ?from)
      (connects ?from ?to ?dir)
    )
    :effect (and
      (not (agent_at ?from))
      (agent_at ?to)
      (visited ?to)
    )
  )
)


[pf]
(define (problem driveway-exploration)
  (:domain environment_exploration)

  (:objects
    backyard driveway - location
    south north west - direction
  )

  (:init
    (agent_at driveway)
    (visited driveway)
    (visited backyard)
    (connects driveway backyard north)
    (connects backyard driveway south)
    (direction south)
    (direction north)
    (direction west)
  )

  (:goal (agent_at driveway))
)

### Planner Error from previous PDDL (if any)
                    ── SOLVER LOG ─────────────────────────────────
                    warning: empty con/disjunction in domain definition. simplifying.

 --- OK.
 Match tree built with 2 nodes.

PDDL problem description loaded: 
	Domain: ENVIRONMENT_EXPLORATION
	Problem: DRIVEWAY-EXPLORATION
	#Actions: 2
	#Fluents: 2
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[0 / 0]--
Total time: 7.80001e-05
Nodes generated during search: 1
Nodes expanded during search: 0
Plan found with cost: 0
Fast-BFS search completed in 7.80001e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    No validation log.

### Environment feedback from previous action (if any)
N/A

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class EnvironmentExploration(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")
    Door = create_type("Door")

    @predicate(Location)
    def visited(self, loc):
        """True if the location has been visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """True if the agent is at this location"""

    @predicate(Location, Location, Direction, Door)
    def connects_via_door(self, loc1, loc2, direction, door):
        """True if loc1 connects to loc2 in the given direction via the given door"""

    @predicate(Door)
    def door_open(self, door):
        """True if the door is open"""

    @predicate(Direction)
    def direction(self, direction):
        """Defines the possible movement directions"""

    @predicate(Door)
    def door(self, door):
        """Defines that an object is a door"""

    @action(Location, Location, Direction, Door)
    def open_door(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            ~self.door_open(door)
        ]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Location, Location, Direction, Door)
    def close_door(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            self.door_open(door)
        ]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Location, Location, Direction, Door)
    def move(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            self.door_open(door)
        ]
        effect = [~self.agent_at(from_loc), self.agent_at(to_loc), self.visited(to_loc)]
        return precond, effect

Generated py_problem:
from py2pddl import goal, init

class DrivewayExploration(EnvironmentExploration):
    def __init__(self):
        super().__init__()
        self.locations = EnvironmentExploration.Location.create_objs(["backyard", "driveway"])
        self.directions = EnvironmentExploration.Direction.create_objs(["south", "north", "west"])
        self.doors = EnvironmentExploration.Door.create_objs(["door_to_south", "door_to_west"])

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["driveway"]),
            self.visited(self.locations["driveway"]),
            self.connects_via_door(self.locations["driveway"], self.locations["backyard"], self.directions["north"], self.doors["door_to_south"]),
            self.connects_via_door(self.locations["backyard"], self.locations["driveway"], self.directions["south"], self.doors["door_to_south"]),
            self.door(self.doors["door_to_south"]),
            self.door_open(self.doors["door_to_south"]),
            self.direction(self.directions["south"]),
            self.direction(self.directions["north"]),
            self.direction(self.directions["west"]),
            self.door(self.doors["door_to_west"])
            # door_to_west exists but connections not yet known
        ]
        return at

    @goal
    def goal(self):
        # The next goal is to visit a not yet visited location, which is presumably through the west door.
        # But since location behind west door is not yet discovered, the goal is to have visited a location other than 'driveway' and 'backyard'.
        # We check for any location that gets discovered in future steps.
        # For now, since both known locations are visited, no goal predicate yet.
        return []


--- Attempting to Plan (Small Loop Try #3) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move south
You are in the driveway. To the North you see the backyard. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain environment_exploration)
  (:requirements :typing)

  (:types location direction)

  (:predicates
    (visited ?loc - location)
    (agent_at ?loc - location)
    (connects ?from - location ?to - location ?dir - direction)
    (direction ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and)
    :effect (and)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (agent_at ?from)
      (connects ?from ?to ?dir)
    )
    :effect (and
      (not (agent_at ?from))
      (agent_at ?to)
      (visited ?to)
    )
  )
)


[Problem file]
(define (problem driveway-exploration)
  (:domain environment_exploration)

  (:objects
    backyard driveway - location
    south north west - direction
  )

  (:init
    (agent_at driveway)
    (visited driveway)
    (visited backyard)
    (connects driveway backyard north)
    (connects backyard driveway south)
    (direction south)
    (direction north)
    (direction west)
  )

  (:goal (agent_at driveway))
)


### (Optional) Planner/validator feedback to fix
                    ── SOLVER LOG ─────────────────────────────────
                    warning: empty con/disjunction in domain definition. simplifying.

 --- OK.
 Match tree built with 2 nodes.

PDDL problem description loaded: 
	Domain: ENVIRONMENT_EXPLORATION
	Problem: DRIVEWAY-EXPLORATION
	#Actions: 2
	#Fluents: 2
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[0 / 0]--
Total time: 7.80001e-05
Nodes generated during search: 1
Nodes expanded during search: 0
Plan found with cost: 0
Fast-BFS search completed in 7.80001e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    No validation log.


### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class EnvironmentExploration(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")
    Door = create_type("Door")

    @predicate(Location)
    def visited(self, loc):
        """True if the location has been visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """True if the agent is at this location"""

    @predicate(Location, Location, Direction, Door)
    def connects_via_door(self, loc1, loc2, direction, door):
        """True if loc1 connects to loc2 in the given direction via the given door"""

    @predicate(Door)
    def door_open(self, door):
        """True if the door is open"""

    @predicate(Direction)
    def direction(self, direction):
        """Defines the possible movement directions"""

    @predicate(Door)
    def door(self, door):
        """Defines that an object is a door"""

    @action(Location, Location, Direction, Door)
    def open_door(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            ~self.door_open(door)
        ]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Location, Location, Direction, Door)
    def close_door(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            self.door_open(door)
        ]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Location, Location, Direction, Door)
    def move(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            self.door_open(door)
        ]
        effect = [~self.agent_at(from_loc), self.agent_at(to_loc), self.visited(to_loc)]
        return precond, effect


### Python IR: problem class
from py2pddl import goal, init

class DrivewayExploration(EnvironmentExploration):
    def __init__(self):
        super().__init__()
        self.locations = EnvironmentExploration.Location.create_objs(["backyard", "driveway"])
        self.directions = EnvironmentExploration.Direction.create_objs(["south", "north", "west"])
        self.doors = EnvironmentExploration.Door.create_objs(["door_to_south", "door_to_west"])

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["driveway"]),
            self.visited(self.locations["driveway"]),
            self.connects_via_door(self.locations["driveway"], self.locations["backyard"], self.directions["north"], self.doors["door_to_south"]),
            self.connects_via_door(self.locations["backyard"], self.locations["driveway"], self.directions["south"], self.doors["door_to_south"]),
            self.door(self.doors["door_to_south"]),
            self.door_open(self.doors["door_to_south"]),
            self.direction(self.directions["south"]),
            self.direction(self.directions["north"]),
            self.direction(self.directions["west"]),
            self.door(self.doors["door_to_west"])
            # door_to_west exists but connections not yet known
        ]
        return at

    @goal
    def goal(self):
        # The next goal is to visit a not yet visited location, which is presumably through the west door.
        # But since location behind west door is not yet discovered, the goal is to have visited a location other than 'driveway' and 'backyard'.
        # We check for any location that gets discovered in future steps.
        # For now, since both known locations are visited, no goal predicate yet.
        return []


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain environment_exploration)
  (:requirements :typing)
  
  (:types location direction)

  (:predicates
    (visited ?loc - location)
    (agent_at ?loc - location)
    (connects ?from - location ?to - location ?dir - direction)
    (direction ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and)
    :effect (and)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (agent_at ?from)
      (connects ?from ?to ?dir)
    )
    :effect (and
      (not (agent_at ?from))
      (agent_at ?to)
      (visited ?to)
    )
  )
)


[PDDL pf]
(define (problem driveway-exploration)
  (:domain environment_exploration)
  
  (:objects
    backyard driveway - location
    south north west - direction
  )

  (:init
    (agent_at driveway)
    (visited driveway)
    (connects driveway backyard north)
    (connects backyard driveway south)
    (direction south)
    (direction north)
    (direction west)
  )

  (:goal (agent_at driveway))
)

Actions from solver: None 
Raw plan text:  
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    warning: empty con/disjunction in domain definition. simplifying.

 --- OK.
 Match tree built with 2 nodes.

PDDL problem description loaded: 
	Domain: ENVIRONMENT_EXPLORATION
	Problem: DRIVEWAY-EXPLORATION
	#Actions: 2
	#Fluents: 3
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[0 / 0]--
Total time: 3.9e-05
Nodes generated during search: 1
Nodes expanded during search: 0
Plan found with cost: 0
Fast-BFS search completed in 3.9e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    No validation log.


--- Attempting to Plan (Small Loop Try #4) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move south
You are in the driveway. To the North you see the backyard. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain environment_exploration)
  (:requirements :typing)
  
  (:types location direction)

  (:predicates
    (visited ?loc - location)
    (agent_at ?loc - location)
    (connects ?from - location ?to - location ?dir - direction)
    (direction ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and)
    :effect (and)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (agent_at ?from)
      (connects ?from ?to ?dir)
    )
    :effect (and
      (not (agent_at ?from))
      (agent_at ?to)
      (visited ?to)
    )
  )
)


[Problem file]
(define (problem driveway-exploration)
  (:domain environment_exploration)
  
  (:objects
    backyard driveway - location
    south north west - direction
  )

  (:init
    (agent_at driveway)
    (visited driveway)
    (connects driveway backyard north)
    (connects backyard driveway south)
    (direction south)
    (direction north)
    (direction west)
  )

  (:goal (agent_at driveway))
)


### (Optional) Planner/validator feedback to fix
                    ── SOLVER LOG ─────────────────────────────────
                    warning: empty con/disjunction in domain definition. simplifying.

 --- OK.
 Match tree built with 2 nodes.

PDDL problem description loaded: 
	Domain: ENVIRONMENT_EXPLORATION
	Problem: DRIVEWAY-EXPLORATION
	#Actions: 2
	#Fluents: 3
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[0 / 0]--
Total time: 3.9e-05
Nodes generated during search: 1
Nodes expanded during search: 0
Plan found with cost: 0
Fast-BFS search completed in 3.9e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    No validation log.


### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class EnvironmentExploration(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")
    Door = create_type("Door")

    @predicate(Location)
    def visited(self, loc):
        """True if the location has been visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """True if the agent is at this location"""

    @predicate(Location, Location, Direction, Door)
    def connects_via_door(self, loc1, loc2, direction, door):
        """True if loc1 connects to loc2 in the given direction via the given door"""

    @predicate(Door)
    def door_open(self, door):
        """True if the door is open"""

    @predicate(Direction)
    def direction(self, direction):
        """Defines the possible movement directions"""

    @predicate(Door)
    def door(self, door):
        """Defines that an object is a door"""

    @action(Location, Location, Direction, Door)
    def open_door(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            ~self.door_open(door)
        ]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Location, Location, Direction, Door)
    def close_door(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            self.door_open(door)
        ]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Location, Location, Direction, Door)
    def move(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            self.door_open(door)
        ]
        effect = [~self.agent_at(from_loc), self.agent_at(to_loc), self.visited(to_loc)]
        return precond, effect


### Python IR: problem class
from py2pddl import goal, init

class DrivewayExploration(EnvironmentExploration):
    def __init__(self):
        super().__init__()
        self.locations = EnvironmentExploration.Location.create_objs(["backyard", "driveway"])
        self.directions = EnvironmentExploration.Direction.create_objs(["south", "north", "west"])
        self.doors = EnvironmentExploration.Door.create_objs(["door_to_south", "door_to_west"])

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["driveway"]),
            self.visited(self.locations["driveway"]),
            self.connects_via_door(self.locations["driveway"], self.locations["backyard"], self.directions["north"], self.doors["door_to_south"]),
            self.connects_via_door(self.locations["backyard"], self.locations["driveway"], self.directions["south"], self.doors["door_to_south"]),
            self.door(self.doors["door_to_south"]),
            self.door_open(self.doors["door_to_south"]),
            self.direction(self.directions["south"]),
            self.direction(self.directions["north"]),
            self.direction(self.directions["west"]),
            self.door(self.doors["door_to_west"])
            # door_to_west exists but connections not yet known
        ]
        return at

    @goal
    def goal(self):
        # The next goal is to visit a not yet visited location, which is presumably through the west door.
        # But since location behind west door is not yet discovered, the goal is to have visited a location other than 'driveway' and 'backyard'.
        # We check for any location that gets discovered in future steps.
        # For now, since both known locations are visited, no goal predicate yet.
        return []


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain environment_exploration)
  (:requirements :typing)
  
  (:types location direction)

  (:predicates
    (visited ?loc - location)
    (agent_at ?loc - location)
    (connects_via_door ?loc1 - location ?loc2 - location ?dir - direction ?door - object)
    (door_open ?door - object)
    (direction ?dir - direction)
    (door ?door - object)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and
      (agent_at ?loc1)
      (exists (?door - object)
        (and
          (connects_via_door ?loc1 ?loc2 ?dir ?door)
          (door ?door)
          (not (door_open ?door))
        )
      )
    )
    :effect (and
      (exists (?door - object)
        (and
          (connects_via_door ?loc1 ?loc2 ?dir ?door)
          (door ?door)
          (door_open ?door)
        )
      )
    )
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (agent_at ?from)
      (exists (?door - object)
        (and
          (connects_via_door ?from ?to ?dir ?door)
          (door_open ?door)
        )
      )
    )
    :effect (and
      (not (agent_at ?from))
      (agent_at ?to)
      (visited ?to)
    )
  )
)


[PDDL pf]
(define (problem driveway-exploration)
  (:domain environment_exploration)
  
  (:objects
    backyard driveway - location
    south north west - direction
    door_to_south door_to_west - object
  )

  (:init
    (agent_at driveway)
    (visited driveway)
    (connects_via_door driveway backyard north door_to_south)
    (connects_via_door backyard driveway south door_to_south)
    (door door_to_south)
    (door_open door_to_south)
    (direction south)
    (direction north)
    (direction west)
    (door door_to_west)
  )

  (:goal (and))
)

Actions from solver: None 
Raw plan text:  
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    /tmp/pddl_run_daal56ps/domain.pddl: syntax error in line 28, 'exists':
domain definition expected
                    ── VAL LOG ────────────────────────────────────
                    No validation log.

[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: move south
You are in the driveway. To the North you see the backyard. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class EnvironmentExploration(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")
    Door = create_type("Door")

    @predicate(Location)
    def visited(self, loc):
        """True if the location has been visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """True if the agent is at this location"""

    @predicate(Location, Location, Direction, Door)
    def connects_via_door(self, loc1, loc2, direction, door):
        """True if loc1 connects to loc2 in the given direction via the given door"""

    @predicate(Door)
    def door_open(self, door):
        """True if the door is open"""

    @predicate(Direction)
    def direction(self, direction):
        """Defines the possible movement directions"""

    @predicate(Door)
    def door(self, door):
        """Defines that an object is a door"""

    @action(Location, Location, Direction, Door)
    def open_door(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            ~self.door_open(door)
        ]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Location, Location, Direction, Door)
    def close_door(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            self.door_open(door)
        ]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Location, Location, Direction, Door)
    def move(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            self.door_open(door)
        ]
        effect = [~self.agent_at(from_loc), self.agent_at(to_loc), self.visited(to_loc)]
        return precond, effect


[py_problem]
from py2pddl import goal, init

class DrivewayExploration(EnvironmentExploration):
    def __init__(self):
        super().__init__()
        self.locations = EnvironmentExploration.Location.create_objs(["backyard", "driveway"])
        self.directions = EnvironmentExploration.Direction.create_objs(["south", "north", "west"])
        self.doors = EnvironmentExploration.Door.create_objs(["door_to_south", "door_to_west"])

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["driveway"]),
            self.visited(self.locations["driveway"]),
            self.connects_via_door(self.locations["driveway"], self.locations["backyard"], self.directions["north"], self.doors["door_to_south"]),
            self.connects_via_door(self.locations["backyard"], self.locations["driveway"], self.directions["south"], self.doors["door_to_south"]),
            self.door(self.doors["door_to_south"]),
            self.door_open(self.doors["door_to_south"]),
            self.direction(self.directions["south"]),
            self.direction(self.directions["north"]),
            self.direction(self.directions["west"]),
            self.door(self.doors["door_to_west"])
            # door_to_west exists but connections not yet known
        ]
        return at

    @goal
    def goal(self):
        # The next goal is to visit a not yet visited location, which is presumably through the west door.
        # But since location behind west door is not yet discovered, the goal is to have visited a location other than 'driveway' and 'backyard'.
        # We check for any location that gets discovered in future steps.
        # For now, since both known locations are visited, no goal predicate yet.
        return []


### Previous PDDL (generated from the IR)
[df]
(define (domain environment_exploration)
  (:requirements :typing)
  
  (:types location direction)

  (:predicates
    (visited ?loc - location)
    (agent_at ?loc - location)
    (connects_via_door ?loc1 - location ?loc2 - location ?dir - direction ?door - object)
    (door_open ?door - object)
    (direction ?dir - direction)
    (door ?door - object)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and
      (agent_at ?loc1)
      (exists (?door - object)
        (and
          (connects_via_door ?loc1 ?loc2 ?dir ?door)
          (door ?door)
          (not (door_open ?door))
        )
      )
    )
    :effect (and
      (exists (?door - object)
        (and
          (connects_via_door ?loc1 ?loc2 ?dir ?door)
          (door ?door)
          (door_open ?door)
        )
      )
    )
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (agent_at ?from)
      (exists (?door - object)
        (and
          (connects_via_door ?from ?to ?dir ?door)
          (door_open ?door)
        )
      )
    )
    :effect (and
      (not (agent_at ?from))
      (agent_at ?to)
      (visited ?to)
    )
  )
)


[pf]
(define (problem driveway-exploration)
  (:domain environment_exploration)
  
  (:objects
    backyard driveway - location
    south north west - direction
    door_to_south door_to_west - object
  )

  (:init
    (agent_at driveway)
    (visited driveway)
    (connects_via_door driveway backyard north door_to_south)
    (connects_via_door backyard driveway south door_to_south)
    (door door_to_south)
    (door_open door_to_south)
    (direction south)
    (direction north)
    (direction west)
    (door door_to_west)
  )

  (:goal (and))
)

### Planner Error from previous PDDL (if any)
                    ── SOLVER LOG ─────────────────────────────────
                    /tmp/pddl_run_daal56ps/domain.pddl: syntax error in line 28, 'exists':
domain definition expected
                    ── VAL LOG ────────────────────────────────────
                    No validation log.

### Environment feedback from previous action (if any)
N/A

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class EnvironmentExploration(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")
    Door = create_type("Door")

    @predicate(Location)
    def visited(self, loc):
        """True if the location has been visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """True if the agent is at this location"""

    @predicate(Location, Location, Direction, Door)
    def connects_via_door(self, loc1, loc2, direction, door):
        """True if loc1 connects to loc2 in the given direction via the given door"""

    @predicate(Door)
    def door_open(self, door):
        """True if the door is open"""

    @predicate(Direction)
    def direction(self, direction):
        """Defines the possible movement directions"""

    @predicate(Door)
    def door(self, door):
        """Defines that an object is a door"""

    @action(Location, Location, Direction, Door)
    def open_door(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            ~self.door_open(door)
        ]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Location, Location, Direction, Door)
    def close_door(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            self.door_open(door)
        ]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Location, Location, Direction, Door)
    def move(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            self.door_open(door)
        ]
        effect = [~self.agent_at(from_loc), self.agent_at(to_loc), self.visited(to_loc)]
        return precond, effect

Generated py_problem:
from py2pddl import goal, init

class DrivewayExploration(EnvironmentExploration):
    def __init__(self):
        super().__init__()
        self.locations = EnvironmentExploration.Location.create_objs(["backyard", "driveway"])
        self.directions = EnvironmentExploration.Direction.create_objs(["south", "north", "west"])
        self.doors = EnvironmentExploration.Door.create_objs(["door_to_south", "door_to_west"])

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["driveway"]),
            self.visited(self.locations["driveway"]),
            self.connects_via_door(self.locations["driveway"], self.locations["backyard"], self.directions["north"], self.doors["door_to_south"]),
            self.connects_via_door(self.locations["backyard"], self.locations["driveway"], self.directions["south"], self.doors["door_to_south"]),
            self.door(self.doors["door_to_south"]),
            self.door_open(self.doors["door_to_south"]),
            self.direction(self.directions["south"]),
            self.direction(self.directions["north"]),
            self.direction(self.directions["west"]),
            self.door(self.doors["door_to_west"])
            # door_to_west exists but its connection is not yet known
        ]
        return at

    @goal
    def goal(self):
        # The goal is to visit a location that has not yet been visited.
        # At this point, both known locations are 'driveway' and 'backyard'.
        # We can only set as goal: visited(backyard) if not yet visited.
        return [self.visited(self.locations["backyard"])]


--- Attempting to Plan (Small Loop Try #5) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move south
You are in the driveway. To the North you see the backyard. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain environment_exploration)
  (:requirements :typing)
  
  (:types location direction)

  (:predicates
    (visited ?loc - location)
    (agent_at ?loc - location)
    (connects_via_door ?loc1 - location ?loc2 - location ?dir - direction ?door - object)
    (door_open ?door - object)
    (direction ?dir - direction)
    (door ?door - object)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and
      (agent_at ?loc1)
      (exists (?door - object)
        (and
          (connects_via_door ?loc1 ?loc2 ?dir ?door)
          (door ?door)
          (not (door_open ?door))
        )
      )
    )
    :effect (and
      (exists (?door - object)
        (and
          (connects_via_door ?loc1 ?loc2 ?dir ?door)
          (door ?door)
          (door_open ?door)
        )
      )
    )
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (agent_at ?from)
      (exists (?door - object)
        (and
          (connects_via_door ?from ?to ?dir ?door)
          (door_open ?door)
        )
      )
    )
    :effect (and
      (not (agent_at ?from))
      (agent_at ?to)
      (visited ?to)
    )
  )
)


[Problem file]
(define (problem driveway-exploration)
  (:domain environment_exploration)
  
  (:objects
    backyard driveway - location
    south north west - direction
    door_to_south door_to_west - object
  )

  (:init
    (agent_at driveway)
    (visited driveway)
    (connects_via_door driveway backyard north door_to_south)
    (connects_via_door backyard driveway south door_to_south)
    (door door_to_south)
    (door_open door_to_south)
    (direction south)
    (direction north)
    (direction west)
    (door door_to_west)
  )

  (:goal (and))
)


### (Optional) Planner/validator feedback to fix
                    ── SOLVER LOG ─────────────────────────────────
                    /tmp/pddl_run_daal56ps/domain.pddl: syntax error in line 28, 'exists':
domain definition expected
                    ── VAL LOG ────────────────────────────────────
                    No validation log.


### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class EnvironmentExploration(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")
    Door = create_type("Door")

    @predicate(Location)
    def visited(self, loc):
        """True if the location has been visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """True if the agent is at this location"""

    @predicate(Location, Location, Direction, Door)
    def connects_via_door(self, loc1, loc2, direction, door):
        """True if loc1 connects to loc2 in the given direction via the given door"""

    @predicate(Door)
    def door_open(self, door):
        """True if the door is open"""

    @predicate(Direction)
    def direction(self, direction):
        """Defines the possible movement directions"""

    @predicate(Door)
    def door(self, door):
        """Defines that an object is a door"""

    @action(Location, Location, Direction, Door)
    def open_door(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            ~self.door_open(door)
        ]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Location, Location, Direction, Door)
    def close_door(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            self.door_open(door)
        ]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Location, Location, Direction, Door)
    def move(self, from_loc, to_loc, dir, door):
        precond = [
            self.agent_at(from_loc),
            self.connects_via_door(from_loc, to_loc, dir, door),
            self.door_open(door)
        ]
        effect = [~self.agent_at(from_loc), self.agent_at(to_loc), self.visited(to_loc)]
        return precond, effect


### Python IR: problem class
from py2pddl import goal, init

class DrivewayExploration(EnvironmentExploration):
    def __init__(self):
        super().__init__()
        self.locations = EnvironmentExploration.Location.create_objs(["backyard", "driveway"])
        self.directions = EnvironmentExploration.Direction.create_objs(["south", "north", "west"])
        self.doors = EnvironmentExploration.Door.create_objs(["door_to_south", "door_to_west"])

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["driveway"]),
            self.visited(self.locations["driveway"]),
            self.connects_via_door(self.locations["driveway"], self.locations["backyard"], self.directions["north"], self.doors["door_to_south"]),
            self.connects_via_door(self.locations["backyard"], self.locations["driveway"], self.directions["south"], self.doors["door_to_south"]),
            self.door(self.doors["door_to_south"]),
            self.door_open(self.doors["door_to_south"]),
            self.direction(self.directions["south"]),
            self.direction(self.directions["north"]),
            self.direction(self.directions["west"]),
            self.door(self.doors["door_to_west"])
            # door_to_west exists but its connection is not yet known
        ]
        return at

    @goal
    def goal(self):
        # The goal is to visit a location that has not yet been visited.
        # At this point, both known locations are 'driveway' and 'backyard'.
        # We can only set as goal: visited(backyard) if not yet visited.
        return [self.visited(self.locations["backyard"])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain environment_exploration)
  (:requirements :typing)
  
  (:types location direction)
  
  (:predicates
    (visited ?loc - location)
    (agent_at ?loc - location)
    (connects_via_door ?loc1 - location ?loc2 - location ?dir - direction ?door - object)
    (door_open ?door - object)
    (direction ?dir - direction)
    (door ?door - object)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and
      (agent_at ?loc1)
      (exists (?door - object)
        (and
          (connects_via_door ?loc1 ?loc2 ?dir ?door)
          (door ?door)
          (not (door_open ?door))
        )
      )
    )
    :effect (and
      (exists (?door - object)
        (and
          (connects_via_door ?loc1 ?loc2 ?dir ?door)
          (door ?door)
          (door_open ?door)
        )
      )
    )
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (agent_at ?from)
      (exists (?door - object)
        (and
          (connects_via_door ?from ?to ?dir ?door)
          (door_open ?door)
        )
      )
    )
    :effect (and
      (not (agent_at ?from))
      (agent_at ?to)
      (visited ?to)
    )
  )
)


[PDDL pf]
(define (problem driveway-exploration)
  (:domain environment_exploration)
  
  (:objects
    backyard driveway - location
    south north west - direction
    door_to_south door_to_west - object
  )

  (:init
    (agent_at driveway)
    (visited driveway)
    (connects_via_door driveway backyard north door_to_south)
    (connects_via_door backyard driveway south door_to_south)
    (door door_to_south)
    (door_open door_to_south)
    (direction south)
    (direction north)
    (direction west)
    (door door_to_west)
  )

  (:goal (and (visited backyard)))
)

Actions from solver: None 
Raw plan text:  
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    /tmp/pddl_run_g50ud82l/domain.pddl: syntax error in line 28, 'exists':
domain definition expected
                    ── VAL LOG ────────────────────────────────────
                    No validation log.

