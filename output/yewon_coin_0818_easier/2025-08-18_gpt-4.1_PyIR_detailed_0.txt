Observations: You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. 
To the South you see a closed patio door. To the West you see a closed plain door.  
Gold path: ['look around', 'open door to south', 'open door to west', 'move west', 'move east', 'move west', 'move east', 'move south', 'open door to west', 'move north', 'move south', 'move south', 'move north', 'move east', 'open door to north', 'move north', 'take coin'] 
Valid Actions: ['look around', 'close door to west', 'move west', 'open door to south', 'open door to west', 'inventory', 'move south', 'close door to south'] 
taskDescription: Your task is to search the environment and find the coin.  Once you find the coin, take it. 
brief_obs: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 
 


====Step 0==== 

----Larger Loop No. 0---- 
successful_actions: [] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

Generated py_domain:
# imports stays exactly same for all domain files
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreEnv(Domain):
    Location = create_type("Location")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """loc: Location is visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """agent is at loc: Location"""
    
    @predicate(Door)
    def open(self, door):
        """door: Door is open"""

    @predicate(Door, Location, Location, Direction)
    def connects(self, door, loc1, loc2, direction):
        """door connects loc1 to loc2 via direction from loc1"""

    @predicate(Door, Location)
    def at_door(self, door, loc):
        """door is at loc: Location"""

    @action(Door)
    def open_door(self, door):
        precond = [~self.open(door)]
        effect = [self.open(door)]
        return precond, effect

    @action(Door)
    def close_door(self, door):
        precond = [self.open(door)]
        effect = [~self.open(door)]
        return precond, effect

    @action(Location, Door, Location, Direction)
    def move(self, from_loc, door, to_loc, direction):
        precond = [self.agent_at(from_loc),
                   self.connects(door, from_loc, to_loc, direction),
                   self.open(door)]
        effect = [~self.agent_at(from_loc),
                  self.agent_at(to_loc),
                  self.visited(to_loc)]
        return precond, effect

Generated py_problem:
# imports stays the same for all problem files
from py2pddl import goal, init

class FirstKitchenObservation(ExploreEnv):
    def __init__(self):
        super().__init__()
        self.locations = ExploreEnv.Location.create_objs(["kitchen"], prefix="")
        self.doors = ExploreEnv.Door.create_objs(["patio_door", "plain_door"], prefix="")
        self.directions = ExploreEnv.Direction.create_objs(["south", "west"], prefix="")

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["kitchen"]),
            self.visited(self.locations["kitchen"]),
            self.at_door(self.doors["patio_door"], self.locations["kitchen"]),
            self.at_door(self.doors["plain_door"], self.locations["kitchen"]),
            ~self.open(self.doors["patio_door"]),
            ~self.open(self.doors["plain_door"]),
            self.connects(self.doors["patio_door"], self.locations["kitchen"], self.locations["unknown1_south"], self.directions["south"]),
            self.connects(self.doors["plain_door"], self.locations["kitchen"], self.locations["unknown2_west"], self.directions["west"])
        ]
        return at

    @goal
    def goal(self):
        # The goal is to visit a not-yet-visited location (beyond one of the closed doors)
        return [self.visited(self.locations.setdefault("unknown1_south", ExploreEnv.Location.create("unknown1_south")))]


--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
N/A

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
# imports stays exactly same for all domain files
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreEnv(Domain):
    Location = create_type("Location")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """loc: Location is visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """agent is at loc: Location"""
    
    @predicate(Door)
    def open(self, door):
        """door: Door is open"""

    @predicate(Door, Location, Location, Direction)
    def connects(self, door, loc1, loc2, direction):
        """door connects loc1 to loc2 via direction from loc1"""

    @predicate(Door, Location)
    def at_door(self, door, loc):
        """door is at loc: Location"""

    @action(Door)
    def open_door(self, door):
        precond = [~self.open(door)]
        effect = [self.open(door)]
        return precond, effect

    @action(Door)
    def close_door(self, door):
        precond = [self.open(door)]
        effect = [~self.open(door)]
        return precond, effect

    @action(Location, Door, Location, Direction)
    def move(self, from_loc, door, to_loc, direction):
        precond = [self.agent_at(from_loc),
                   self.connects(door, from_loc, to_loc, direction),
                   self.open(door)]
        effect = [~self.agent_at(from_loc),
                  self.agent_at(to_loc),
                  self.visited(to_loc)]
        return precond, effect


### Python IR: problem class
# imports stays the same for all problem files
from py2pddl import goal, init

class FirstKitchenObservation(ExploreEnv):
    def __init__(self):
        super().__init__()
        self.locations = ExploreEnv.Location.create_objs(["kitchen"], prefix="")
        self.doors = ExploreEnv.Door.create_objs(["patio_door", "plain_door"], prefix="")
        self.directions = ExploreEnv.Direction.create_objs(["south", "west"], prefix="")

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["kitchen"]),
            self.visited(self.locations["kitchen"]),
            self.at_door(self.doors["patio_door"], self.locations["kitchen"]),
            self.at_door(self.doors["plain_door"], self.locations["kitchen"]),
            ~self.open(self.doors["patio_door"]),
            ~self.open(self.doors["plain_door"]),
            self.connects(self.doors["patio_door"], self.locations["kitchen"], self.locations["unknown1_south"], self.directions["south"]),
            self.connects(self.doors["plain_door"], self.locations["kitchen"], self.locations["unknown2_west"], self.directions["west"])
        ]
        return at

    @goal
    def goal(self):
        # The goal is to visit a not-yet-visited location (beyond one of the closed doors)
        return [self.visited(self.locations.setdefault("unknown1_south", ExploreEnv.Location.create("unknown1_south")))]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploreenv)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (not (door-open ?loc1 ?loc2 ?dir))
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (at ?from)
      (door-open ?from ?to ?dir)
    )
    :effect (and
      (not (at ?from))
      (at ?to)
    )
  )
)


[PDDL pf]
(define (problem firstkitchenobservation)
  (:domain exploreenv)
  (:objects
    kitchen unknown1_south unknown2_west - location
    south west - direction
  )
  (:init
    (at kitchen)
    (not (door-open kitchen unknown1_south south))
    (not (door-open kitchen unknown2_west west))
  )
  (:goal (at unknown1_south))
)

Actions from solver: None 
Raw plan text:  
Solver stderr:
── SOLVER LOG ─────────────────────────────────
Segmentation fault (core dumped)
── VAL LOG ────────────────────────────────────
No validation log.


--- Attempting to Plan (Small Loop Try #2) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploreenv)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (not (door-open ?loc1 ?loc2 ?dir))
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (at ?from)
      (door-open ?from ?to ?dir)
    )
    :effect (and
      (not (at ?from))
      (at ?to)
    )
  )
)


[Problem file]
(define (problem firstkitchenobservation)
  (:domain exploreenv)
  (:objects
    kitchen unknown1_south unknown2_west - location
    south west - direction
  )
  (:init
    (at kitchen)
    (not (door-open kitchen unknown1_south south))
    (not (door-open kitchen unknown2_west west))
  )
  (:goal (at unknown1_south))
)


### (Optional) Planner/validator feedback to fix
── SOLVER LOG ─────────────────────────────────
Segmentation fault (core dumped)
── VAL LOG ────────────────────────────────────
No validation log.


### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
# imports stays exactly same for all domain files
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreEnv(Domain):
    Location = create_type("Location")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """loc: Location is visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """agent is at loc: Location"""
    
    @predicate(Door)
    def open(self, door):
        """door: Door is open"""

    @predicate(Door, Location, Location, Direction)
    def connects(self, door, loc1, loc2, direction):
        """door connects loc1 to loc2 via direction from loc1"""

    @predicate(Door, Location)
    def at_door(self, door, loc):
        """door is at loc: Location"""

    @action(Door)
    def open_door(self, door):
        precond = [~self.open(door)]
        effect = [self.open(door)]
        return precond, effect

    @action(Door)
    def close_door(self, door):
        precond = [self.open(door)]
        effect = [~self.open(door)]
        return precond, effect

    @action(Location, Door, Location, Direction)
    def move(self, from_loc, door, to_loc, direction):
        precond = [self.agent_at(from_loc),
                   self.connects(door, from_loc, to_loc, direction),
                   self.open(door)]
        effect = [~self.agent_at(from_loc),
                  self.agent_at(to_loc),
                  self.visited(to_loc)]
        return precond, effect


### Python IR: problem class
# imports stays the same for all problem files
from py2pddl import goal, init

class FirstKitchenObservation(ExploreEnv):
    def __init__(self):
        super().__init__()
        self.locations = ExploreEnv.Location.create_objs(["kitchen"], prefix="")
        self.doors = ExploreEnv.Door.create_objs(["patio_door", "plain_door"], prefix="")
        self.directions = ExploreEnv.Direction.create_objs(["south", "west"], prefix="")

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["kitchen"]),
            self.visited(self.locations["kitchen"]),
            self.at_door(self.doors["patio_door"], self.locations["kitchen"]),
            self.at_door(self.doors["plain_door"], self.locations["kitchen"]),
            ~self.open(self.doors["patio_door"]),
            ~self.open(self.doors["plain_door"]),
            self.connects(self.doors["patio_door"], self.locations["kitchen"], self.locations["unknown1_south"], self.directions["south"]),
            self.connects(self.doors["plain_door"], self.locations["kitchen"], self.locations["unknown2_west"], self.directions["west"])
        ]
        return at

    @goal
    def goal(self):
        # The goal is to visit a not-yet-visited location (beyond one of the closed doors)
        return [self.visited(self.locations.setdefault("unknown1_south", ExploreEnv.Location.create("unknown1_south")))]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploreenv)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (not (door-open ?loc1 ?loc2 ?dir))
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (at ?from)
      (door-open ?from ?to ?dir)
    )
    :effect (and
      (not (at ?from))
      (at ?to)
    )
  )
)

[PDDL pf]
(define (problem firstkitchenobservation)
  (:domain exploreenv)
  (:objects
    kitchen unknown1_south unknown2_west - location
    south west - direction
  )
  (:init
    (at kitchen)
    ;; Doors are closed, so do not add door-open for them.
  )
  (:goal (at unknown1_south))
)
Actions from solver: ['open door to west', 'move west'] 
Raw plan text: (OPEN-DOOR KITCHEN UNKNOWN1_SOUTH WEST)
(MOVE KITCHEN UNKNOWN1_SOUTH WEST)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 30 nodes.

PDDL problem description loaded: 
	Domain: EXPLOREENV
	Problem: FIRSTKITCHENOBSERVATION
	#Actions: 30
	#Fluents: 39
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[0 / 0]--
--[0 / 2]--
Total time: 0.000155
Nodes generated during search: 37
Nodes expanded during search: 5
Plan found with cost: 2
Fast-BFS search completed in 0.000155 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_nqngyoir/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 2 

Successful plans:
Value: 2
 /tmp/pddl_run_nqngyoir/plan_tmp.txt 2

Current action_queue: ['open door to west', 'move west'] 
> open door to west 
 You open the plain door, revealing the pantry.  
Small Loop, action_queue: ['move west'] 
Current action_queue: ['move west'] 
> move west 
 You are in the pantry. In one part of the room you see a folding chair, that has nothing on it. There is also a shelf, that has nothing on it. 
Through an open plain door, to the East you see the kitchen.  


====Step 1==== 

----Larger Loop No. 0---- 
successful_actions: ['open door to west', 'move west'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: open door to west
You open the plain door, revealing the pantry. 

Action: move west
You are in the pantry. Through an open plain door, to the East you see the kitchen. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
# imports stays exactly same for all domain files
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreEnv(Domain):
    Location = create_type("Location")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """loc: Location is visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """agent is at loc: Location"""
    
    @predicate(Door)
    def open(self, door):
        """door: Door is open"""

    @predicate(Door, Location, Location, Direction)
    def connects(self, door, loc1, loc2, direction):
        """door connects loc1 to loc2 via direction from loc1"""

    @predicate(Door, Location)
    def at_door(self, door, loc):
        """door is at loc: Location"""

    @action(Door)
    def open_door(self, door):
        precond = [~self.open(door)]
        effect = [self.open(door)]
        return precond, effect

    @action(Door)
    def close_door(self, door):
        precond = [self.open(door)]
        effect = [~self.open(door)]
        return precond, effect

    @action(Location, Door, Location, Direction)
    def move(self, from_loc, door, to_loc, direction):
        precond = [self.agent_at(from_loc),
                   self.connects(door, from_loc, to_loc, direction),
                   self.open(door)]
        effect = [~self.agent_at(from_loc),
                  self.agent_at(to_loc),
                  self.visited(to_loc)]
        return precond, effect


[py_problem]
# imports stays the same for all problem files
from py2pddl import goal, init

class FirstKitchenObservation(ExploreEnv):
    def __init__(self):
        super().__init__()
        self.locations = ExploreEnv.Location.create_objs(["kitchen"], prefix="")
        self.doors = ExploreEnv.Door.create_objs(["patio_door", "plain_door"], prefix="")
        self.directions = ExploreEnv.Direction.create_objs(["south", "west"], prefix="")

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["kitchen"]),
            self.visited(self.locations["kitchen"]),
            self.at_door(self.doors["patio_door"], self.locations["kitchen"]),
            self.at_door(self.doors["plain_door"], self.locations["kitchen"]),
            ~self.open(self.doors["patio_door"]),
            ~self.open(self.doors["plain_door"]),
            self.connects(self.doors["patio_door"], self.locations["kitchen"], self.locations["unknown1_south"], self.directions["south"]),
            self.connects(self.doors["plain_door"], self.locations["kitchen"], self.locations["unknown2_west"], self.directions["west"])
        ]
        return at

    @goal
    def goal(self):
        # The goal is to visit a not-yet-visited location (beyond one of the closed doors)
        return [self.visited(self.locations.setdefault("unknown1_south", ExploreEnv.Location.create("unknown1_south")))]


### Previous PDDL (generated from the IR)
[df]
(define (domain exploreenv)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (not (door-open ?loc1 ?loc2 ?dir))
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (at ?from)
      (door-open ?from ?to ?dir)
    )
    :effect (and
      (not (at ?from))
      (at ?to)
    )
  )
)

[pf]
(define (problem firstkitchenobservation)
  (:domain exploreenv)
  (:objects
    kitchen unknown1_south unknown2_west - location
    south west - direction
  )
  (:init
    (at kitchen)
    ;; Doors are closed, so do not add door-open for them.
  )
  (:goal (at unknown1_south))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
N/A

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
# imports stays exactly same for all domain files
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreEnv(Domain):
    Location = create_type("Location")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """loc: Location is visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """agent is at loc: Location"""
    
    @predicate(Door)
    def open(self, door):
        """door: Door is open"""

    @predicate(Door, Location, Location, Direction)
    def connects(self, door, loc1, loc2, direction):
        """door connects loc1 to loc2 via direction from loc1"""

    @predicate(Door, Location)
    def at_door(self, door, loc):
        """door is at loc: Location"""

    @action(Door)
    def open_door(self, door):
        precond = [~self.open(door)]
        effect = [self.open(door)]
        return precond, effect

    @action(Door)
    def close_door(self, door):
        precond = [self.open(door)]
        effect = [~self.open(door)]
        return precond, effect

    @action(Location, Door, Location, Direction)
    def move(self, from_loc, door, to_loc, direction):
        precond = [self.agent_at(from_loc),
                   self.connects(door, from_loc, to_loc, direction),
                   self.open(door)]
        effect = [~self.agent_at(from_loc),
                  self.agent_at(to_loc),
                  self.visited(to_loc)]
        return precond, effect

Generated py_problem:
# imports stays the same for all problem files
from py2pddl import goal, init

class AfterPantryRevealed(ExploreEnv):
    def __init__(self):
        super().__init__()
        self.locations = ExploreEnv.Location.create_objs(["kitchen", "pantry", "unknown1_south"], prefix="")
        self.doors = ExploreEnv.Door.create_objs(["patio_door", "plain_door"], prefix="")
        self.directions = ExploreEnv.Direction.create_objs(["south", "west", "east"], prefix="")

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["pantry"]),
            self.visited(self.locations["kitchen"]),
            self.visited(self.locations["pantry"]),
            self.at_door(self.doors["plain_door"], self.locations["kitchen"]),
            self.at_door(self.doors["plain_door"], self.locations["pantry"]),
            self.at_door(self.doors["patio_door"], self.locations["kitchen"]),
            ~self.open(self.doors["patio_door"]),
            self.open(self.doors["plain_door"]),
            self.connects(self.doors["plain_door"], self.locations["kitchen"], self.locations["pantry"], self.directions["west"]),
            self.connects(self.doors["plain_door"], self.locations["pantry"], self.locations["kitchen"], self.directions["east"]),
            self.connects(self.doors["patio_door"], self.locations["kitchen"], self.locations["unknown1_south"], self.directions["south"]),
        ]
        return at

    @goal
    def goal(self):
        # The goal is to visit a not-yet-visited location (unknown1_south)
        return [self.visited(self.locations["unknown1_south"])]


--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: open door to west
You open the plain door, revealing the pantry. 

Action: move west
You are in the pantry. Through an open plain door, to the East you see the kitchen. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploreenv)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (not (door-open ?loc1 ?loc2 ?dir))
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (at ?from)
      (door-open ?from ?to ?dir)
    )
    :effect (and
      (not (at ?from))
      (at ?to)
    )
  )
)

[Problem file]
(define (problem firstkitchenobservation)
  (:domain exploreenv)
  (:objects
    kitchen unknown1_south unknown2_west - location
    south west - direction
  )
  (:init
    (at kitchen)
    ;; Doors are closed, so do not add door-open for them.
  )
  (:goal (at unknown1_south))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
# imports stays exactly same for all domain files
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreEnv(Domain):
    Location = create_type("Location")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """loc: Location is visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """agent is at loc: Location"""
    
    @predicate(Door)
    def open(self, door):
        """door: Door is open"""

    @predicate(Door, Location, Location, Direction)
    def connects(self, door, loc1, loc2, direction):
        """door connects loc1 to loc2 via direction from loc1"""

    @predicate(Door, Location)
    def at_door(self, door, loc):
        """door is at loc: Location"""

    @action(Door)
    def open_door(self, door):
        precond = [~self.open(door)]
        effect = [self.open(door)]
        return precond, effect

    @action(Door)
    def close_door(self, door):
        precond = [self.open(door)]
        effect = [~self.open(door)]
        return precond, effect

    @action(Location, Door, Location, Direction)
    def move(self, from_loc, door, to_loc, direction):
        precond = [self.agent_at(from_loc),
                   self.connects(door, from_loc, to_loc, direction),
                   self.open(door)]
        effect = [~self.agent_at(from_loc),
                  self.agent_at(to_loc),
                  self.visited(to_loc)]
        return precond, effect


### Python IR: problem class
# imports stays the same for all problem files
from py2pddl import goal, init

class AfterPantryRevealed(ExploreEnv):
    def __init__(self):
        super().__init__()
        self.locations = ExploreEnv.Location.create_objs(["kitchen", "pantry", "unknown1_south"], prefix="")
        self.doors = ExploreEnv.Door.create_objs(["patio_door", "plain_door"], prefix="")
        self.directions = ExploreEnv.Direction.create_objs(["south", "west", "east"], prefix="")

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["pantry"]),
            self.visited(self.locations["kitchen"]),
            self.visited(self.locations["pantry"]),
            self.at_door(self.doors["plain_door"], self.locations["kitchen"]),
            self.at_door(self.doors["plain_door"], self.locations["pantry"]),
            self.at_door(self.doors["patio_door"], self.locations["kitchen"]),
            ~self.open(self.doors["patio_door"]),
            self.open(self.doors["plain_door"]),
            self.connects(self.doors["plain_door"], self.locations["kitchen"], self.locations["pantry"], self.directions["west"]),
            self.connects(self.doors["plain_door"], self.locations["pantry"], self.locations["kitchen"], self.directions["east"]),
            self.connects(self.doors["patio_door"], self.locations["kitchen"], self.locations["unknown1_south"], self.directions["south"]),
        ]
        return at

    @goal
    def goal(self):
        # The goal is to visit a not-yet-visited location (unknown1_south)
        return [self.visited(self.locations["unknown1_south"])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploreenv)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (not (door-open ?loc1 ?loc2 ?dir))
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (at ?from)
      (door-open ?from ?to ?dir)
    )
    :effect (and
      (not (at ?from))
      (at ?to)
    )
  )
)


[PDDL pf]
(define (problem afterpantryrevealed)
  (:domain exploreenv)
  (:objects
    kitchen pantry unknown1_south - location
    south west east - direction
  )
  (:init
    (at pantry)
    (door-open kitchen pantry west)
    (door-open pantry kitchen east)
  )
  (:goal (at unknown1_south))
)
Actions from solver: ['open door to south', 'move south'] 
Raw plan text: (OPEN-DOOR PANTRY UNKNOWN1_SOUTH SOUTH)
(MOVE PANTRY UNKNOWN1_SOUTH SOUTH)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 43 nodes.

PDDL problem description loaded: 
	Domain: EXPLOREENV
	Problem: AFTERPANTRYREVEALED
	#Actions: 43
	#Fluents: 53
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[0 / 0]--
--[0 / 1]--
Total time: 0.000285
Nodes generated during search: 36
Nodes expanded during search: 9
Plan found with cost: 2
Fast-BFS search completed in 0.000285 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run__yevzlq0/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 2 

Successful plans:
Value: 2
 /tmp/pddl_run__yevzlq0/plan_tmp.txt 2

Current action_queue: ['open door to south', 'move south'] 
> open door to south 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.
 

----Larger Loop No. 1---- 
successful_actions: ['open door to west', 'move west'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: open door to south
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
# imports stays exactly same for all domain files
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreEnv(Domain):
    Location = create_type("Location")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """loc: Location is visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """agent is at loc: Location"""
    
    @predicate(Door)
    def open(self, door):
        """door: Door is open"""

    @predicate(Door, Location, Location, Direction)
    def connects(self, door, loc1, loc2, direction):
        """door connects loc1 to loc2 via direction from loc1"""

    @predicate(Door, Location)
    def at_door(self, door, loc):
        """door is at loc: Location"""

    @action(Door)
    def open_door(self, door):
        precond = [~self.open(door)]
        effect = [self.open(door)]
        return precond, effect

    @action(Door)
    def close_door(self, door):
        precond = [self.open(door)]
        effect = [~self.open(door)]
        return precond, effect

    @action(Location, Door, Location, Direction)
    def move(self, from_loc, door, to_loc, direction):
        precond = [self.agent_at(from_loc),
                   self.connects(door, from_loc, to_loc, direction),
                   self.open(door)]
        effect = [~self.agent_at(from_loc),
                  self.agent_at(to_loc),
                  self.visited(to_loc)]
        return precond, effect


[py_problem]
# imports stays the same for all problem files
from py2pddl import goal, init

class AfterPantryRevealed(ExploreEnv):
    def __init__(self):
        super().__init__()
        self.locations = ExploreEnv.Location.create_objs(["kitchen", "pantry", "unknown1_south"], prefix="")
        self.doors = ExploreEnv.Door.create_objs(["patio_door", "plain_door"], prefix="")
        self.directions = ExploreEnv.Direction.create_objs(["south", "west", "east"], prefix="")

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["pantry"]),
            self.visited(self.locations["kitchen"]),
            self.visited(self.locations["pantry"]),
            self.at_door(self.doors["plain_door"], self.locations["kitchen"]),
            self.at_door(self.doors["plain_door"], self.locations["pantry"]),
            self.at_door(self.doors["patio_door"], self.locations["kitchen"]),
            ~self.open(self.doors["patio_door"]),
            self.open(self.doors["plain_door"]),
            self.connects(self.doors["plain_door"], self.locations["kitchen"], self.locations["pantry"], self.directions["west"]),
            self.connects(self.doors["plain_door"], self.locations["pantry"], self.locations["kitchen"], self.directions["east"]),
            self.connects(self.doors["patio_door"], self.locations["kitchen"], self.locations["unknown1_south"], self.directions["south"]),
        ]
        return at

    @goal
    def goal(self):
        # The goal is to visit a not-yet-visited location (unknown1_south)
        return [self.visited(self.locations["unknown1_south"])]


### Previous PDDL (generated from the IR)
[df]
(define (domain exploreenv)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (not (door-open ?loc1 ?loc2 ?dir))
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (at ?from)
      (door-open ?from ?to ?dir)
    )
    :effect (and
      (not (at ?from))
      (at ?to)
    )
  )
)


[pf]
(define (problem afterpantryrevealed)
  (:domain exploreenv)
  (:objects
    kitchen pantry unknown1_south - location
    south west east - direction
  )
  (:init
    (at pantry)
    (door-open kitchen pantry west)
    (door-open pantry kitchen east)
  )
  (:goal (at unknown1_south))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
# imports stays exactly same for all domain files
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreEnv(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """loc: Location is visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """agent is at loc: Location"""

    @predicate(Location, Location, Direction)
    def connects(self, from_loc, to_loc, direction):
        """from_loc connects to to_loc via direction from from_loc"""

    @action(Location, Location, Direction)
    def move(self, from_loc, to_loc, direction):
        precond = [self.agent_at(from_loc),
                   self.connects(from_loc, to_loc, direction)]
        effect = [~self.agent_at(from_loc),
                  self.agent_at(to_loc),
                  self.visited(to_loc)]
        return precond, effect

Generated py_problem:
# imports stays the same for all problem files
from py2pddl import goal, init

class AfterPantryRevealed(ExploreEnv):
    def __init__(self):
        super().__init__()
        self.locations = ExploreEnv.Location.create_objs(["kitchen", "pantry", "unknown1_south"], prefix="")
        self.directions = ExploreEnv.Direction.create_objs(["south", "west", "east"], prefix="")

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["pantry"]),
            self.visited(self.locations["kitchen"]),
            self.visited(self.locations["pantry"]),
            self.connects(self.locations["kitchen"], self.locations["pantry"], self.directions["west"]),
            self.connects(self.locations["pantry"], self.locations["kitchen"], self.directions["east"]),
            self.connects(self.locations["kitchen"], self.locations["unknown1_south"], self.directions["south"]),
        ]
        return at

    @goal
    def goal(self):
        return [self.visited(self.locations["unknown1_south"])]


--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: open door to south
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploreenv)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (not (door-open ?loc1 ?loc2 ?dir))
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (at ?from)
      (door-open ?from ?to ?dir)
    )
    :effect (and
      (not (at ?from))
      (at ?to)
    )
  )
)


[Problem file]
(define (problem afterpantryrevealed)
  (:domain exploreenv)
  (:objects
    kitchen pantry unknown1_south - location
    south west east - direction
  )
  (:init
    (at pantry)
    (door-open kitchen pantry west)
    (door-open pantry kitchen east)
  )
  (:goal (at unknown1_south))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


### Python IR: domain class
# imports stays exactly same for all domain files
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreEnv(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """loc: Location is visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """agent is at loc: Location"""

    @predicate(Location, Location, Direction)
    def connects(self, from_loc, to_loc, direction):
        """from_loc connects to to_loc via direction from from_loc"""

    @action(Location, Location, Direction)
    def move(self, from_loc, to_loc, direction):
        precond = [self.agent_at(from_loc),
                   self.connects(from_loc, to_loc, direction)]
        effect = [~self.agent_at(from_loc),
                  self.agent_at(to_loc),
                  self.visited(to_loc)]
        return precond, effect


### Python IR: problem class
# imports stays the same for all problem files
from py2pddl import goal, init

class AfterPantryRevealed(ExploreEnv):
    def __init__(self):
        super().__init__()
        self.locations = ExploreEnv.Location.create_objs(["kitchen", "pantry", "unknown1_south"], prefix="")
        self.directions = ExploreEnv.Direction.create_objs(["south", "west", "east"], prefix="")

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["pantry"]),
            self.visited(self.locations["kitchen"]),
            self.visited(self.locations["pantry"]),
            self.connects(self.locations["kitchen"], self.locations["pantry"], self.directions["west"]),
            self.connects(self.locations["pantry"], self.locations["kitchen"], self.directions["east"]),
            self.connects(self.locations["kitchen"], self.locations["unknown1_south"], self.directions["south"]),
        ]
        return at

    @goal
    def goal(self):
        return [self.visited(self.locations["unknown1_south"])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploreenv)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (not (door-open ?loc1 ?loc2 ?dir))
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (at ?from)
      (door-open ?from ?to ?dir)
    )
    :effect (and
      (not (at ?from))
      (at ?to)
    )
  )
)


[PDDL pf]
(define (problem afterpantryrevealed)
  (:domain exploreenv)
  (:objects
    kitchen pantry unknown1_south - location
    south west east - direction
  )
  (:init
    (at pantry)
    (door-open kitchen pantry west)
    (door-open pantry kitchen east)
    (door-open kitchen unknown1_south south)
  )
  (:goal (at unknown1_south))
)

Actions from solver: ['move east', 'move south'] 
Raw plan text: (MOVE PANTRY KITCHEN EAST)
(MOVE KITCHEN UNKNOWN1_SOUTH SOUTH)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 42 nodes.

PDDL problem description loaded: 
	Domain: EXPLOREENV
	Problem: AFTERPANTRYREVEALED
	#Actions: 42
	#Fluents: 51
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[0 / 0]--
--[0 / 1]--
Total time: 6.6e-05
Nodes generated during search: 28
Nodes expanded during search: 2
Plan found with cost: 2
Fast-BFS search completed in 6.6e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_jsnoyhby/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 2 

Successful plans:
Value: 2
 /tmp/pddl_run_jsnoyhby/plan_tmp.txt 2

Current action_queue: ['move east', 'move south'] 
> move east 
 You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. 
To the South you see a closed patio door. Through an open plain door, to the West you see the pantry.  
Small Loop, action_queue: ['move south'] 
Current action_queue: ['move south'] 
> move south 
 You can't move there, the door is closed.  
Large loop error message: This is the action you take: move south. The door that you are moving to is closed. You should first open door to that direction then move there! 

----Larger Loop No. 2---- 
successful_actions: ['open door to west', 'move west'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: move east
You are in the kitchen. To the South you see a closed patio door. Through an open plain door, to the West you see the pantry. 

Action: move south
You can't move there, the door is closed. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
# imports stays exactly same for all domain files
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreEnv(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """loc: Location is visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """agent is at loc: Location"""

    @predicate(Location, Location, Direction)
    def connects(self, from_loc, to_loc, direction):
        """from_loc connects to to_loc via direction from from_loc"""

    @action(Location, Location, Direction)
    def move(self, from_loc, to_loc, direction):
        precond = [self.agent_at(from_loc),
                   self.connects(from_loc, to_loc, direction)]
        effect = [~self.agent_at(from_loc),
                  self.agent_at(to_loc),
                  self.visited(to_loc)]
        return precond, effect


[py_problem]
# imports stays the same for all problem files
from py2pddl import goal, init

class AfterPantryRevealed(ExploreEnv):
    def __init__(self):
        super().__init__()
        self.locations = ExploreEnv.Location.create_objs(["kitchen", "pantry", "unknown1_south"], prefix="")
        self.directions = ExploreEnv.Direction.create_objs(["south", "west", "east"], prefix="")

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["pantry"]),
            self.visited(self.locations["kitchen"]),
            self.visited(self.locations["pantry"]),
            self.connects(self.locations["kitchen"], self.locations["pantry"], self.directions["west"]),
            self.connects(self.locations["pantry"], self.locations["kitchen"], self.directions["east"]),
            self.connects(self.locations["kitchen"], self.locations["unknown1_south"], self.directions["south"]),
        ]
        return at

    @goal
    def goal(self):
        return [self.visited(self.locations["unknown1_south"])]


### Previous PDDL (generated from the IR)
[df]
(define (domain exploreenv)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (not (door-open ?loc1 ?loc2 ?dir))
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (at ?from)
      (door-open ?from ?to ?dir)
    )
    :effect (and
      (not (at ?from))
      (at ?to)
    )
  )
)


[pf]
(define (problem afterpantryrevealed)
  (:domain exploreenv)
  (:objects
    kitchen pantry unknown1_south - location
    south west east - direction
  )
  (:init
    (at pantry)
    (door-open kitchen pantry west)
    (door-open pantry kitchen east)
    (door-open kitchen unknown1_south south)
  )
  (:goal (at unknown1_south))
)

### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: move south. The door that you are moving to is closed. You should first open door to that direction then move there!

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
# imports stays exactly same for all domain files
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreEnv(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """loc: Location is visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """agent is at loc: Location"""

    @predicate(Location, Location, Direction)
    def connects(self, from_loc, to_loc, direction):
        """from_loc connects to to_loc via direction from from_loc"""

    @predicate(Location, Location, Direction)
    def door_open(self, from_loc, to_loc, direction):
        """the door from from_loc to to_loc via direction is open"""

    @action(Location, Location, Direction)
    def move(self, from_loc, to_loc, direction):
        precond = [self.agent_at(from_loc),
                   self.connects(from_loc, to_loc, direction),
                   self.door_open(from_loc, to_loc, direction)]
        effect = [~self.agent_at(from_loc),
                  self.agent_at(to_loc),
                  self.visited(to_loc)]
        return precond, effect

    @action(Location, Location, Direction)
    def open_door(self, from_loc, to_loc, direction):
        precond = [self.connects(from_loc, to_loc, direction),
                   ~self.door_open(from_loc, to_loc, direction),
                   self.agent_at(from_loc)]
        effect = [self.door_open(from_loc, to_loc, direction)]
        return precond, effect

    @action(Location, Location, Direction)
    def close_door(self, from_loc, to_loc, direction):
        precond = [self.connects(from_loc, to_loc, direction),
                   self.door_open(from_loc, to_loc, direction),
                   self.agent_at(from_loc)]
        effect = [~self.door_open(from_loc, to_loc, direction)]
        return precond, effect

Generated py_problem:
# imports stays the same for all problem files
from py2pddl import goal, init

class AfterPantryRevealed(ExploreEnv):
    def __init__(self):
        super().__init__()
        self.locations = ExploreEnv.Location.create_objs(["kitchen", "pantry", "unknown1_south"], prefix="")
        self.directions = ExploreEnv.Direction.create_objs(["south", "west", "east"], prefix="")

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["kitchen"]),
            self.visited(self.locations["kitchen"]),
            self.connects(self.locations["kitchen"], self.locations["pantry"], self.directions["west"]),
            self.connects(self.locations["pantry"], self.locations["kitchen"], self.directions["east"]),
            self.connects(self.locations["kitchen"], self.locations["unknown1_south"], self.directions["south"]),
            self.door_open(self.locations["kitchen"], self.locations["pantry"], self.directions["west"]),
            self.door_open(self.locations["pantry"], self.locations["kitchen"], self.directions["east"])
            # Note: the door to south is closed, so not including door_open for that direction
        ]
        return at

    @goal
    def goal(self):
        return [self.visited(self.locations["unknown1_south"])]


--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move east
You are in the kitchen. To the South you see a closed patio door. Through an open plain door, to the West you see the pantry. 

Action: move south
You can't move there, the door is closed. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploreenv)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (not (door-open ?loc1 ?loc2 ?dir))
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (at ?from)
      (door-open ?from ?to ?dir)
    )
    :effect (and
      (not (at ?from))
      (at ?to)
    )
  )
)


[Problem file]
(define (problem afterpantryrevealed)
  (:domain exploreenv)
  (:objects
    kitchen pantry unknown1_south - location
    south west east - direction
  )
  (:init
    (at pantry)
    (door-open kitchen pantry west)
    (door-open pantry kitchen east)
    (door-open kitchen unknown1_south south)
  )
  (:goal (at unknown1_south))
)


### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: move south. The door that you are moving to is closed. You should first open door to that direction then move there!

### Python IR: domain class
# imports stays exactly same for all domain files
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreEnv(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """loc: Location is visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """agent is at loc: Location"""

    @predicate(Location, Location, Direction)
    def connects(self, from_loc, to_loc, direction):
        """from_loc connects to to_loc via direction from from_loc"""

    @predicate(Location, Location, Direction)
    def door_open(self, from_loc, to_loc, direction):
        """the door from from_loc to to_loc via direction is open"""

    @action(Location, Location, Direction)
    def move(self, from_loc, to_loc, direction):
        precond = [self.agent_at(from_loc),
                   self.connects(from_loc, to_loc, direction),
                   self.door_open(from_loc, to_loc, direction)]
        effect = [~self.agent_at(from_loc),
                  self.agent_at(to_loc),
                  self.visited(to_loc)]
        return precond, effect

    @action(Location, Location, Direction)
    def open_door(self, from_loc, to_loc, direction):
        precond = [self.connects(from_loc, to_loc, direction),
                   ~self.door_open(from_loc, to_loc, direction),
                   self.agent_at(from_loc)]
        effect = [self.door_open(from_loc, to_loc, direction)]
        return precond, effect

    @action(Location, Location, Direction)
    def close_door(self, from_loc, to_loc, direction):
        precond = [self.connects(from_loc, to_loc, direction),
                   self.door_open(from_loc, to_loc, direction),
                   self.agent_at(from_loc)]
        effect = [~self.door_open(from_loc, to_loc, direction)]
        return precond, effect


### Python IR: problem class
# imports stays the same for all problem files
from py2pddl import goal, init

class AfterPantryRevealed(ExploreEnv):
    def __init__(self):
        super().__init__()
        self.locations = ExploreEnv.Location.create_objs(["kitchen", "pantry", "unknown1_south"], prefix="")
        self.directions = ExploreEnv.Direction.create_objs(["south", "west", "east"], prefix="")

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["kitchen"]),
            self.visited(self.locations["kitchen"]),
            self.connects(self.locations["kitchen"], self.locations["pantry"], self.directions["west"]),
            self.connects(self.locations["pantry"], self.locations["kitchen"], self.directions["east"]),
            self.connects(self.locations["kitchen"], self.locations["unknown1_south"], self.directions["south"]),
            self.door_open(self.locations["kitchen"], self.locations["pantry"], self.directions["west"]),
            self.door_open(self.locations["pantry"], self.locations["kitchen"], self.directions["east"])
            # Note: the door to south is closed, so not including door_open for that direction
        ]
        return at

    @goal
    def goal(self):
        return [self.visited(self.locations["unknown1_south"])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploreenv)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and
      (not (door-open ?loc1 ?loc2 ?dir))
      (at ?loc1)
    )
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (at ?from)
      (door-open ?from ?to ?dir)
    )
    :effect (and
      (not (at ?from))
      (at ?to)
    )
  )
)

[PDDL pf]
(define (problem afterpantryrevealed)
  (:domain exploreenv)
  (:objects
    kitchen pantry unknown1_south - location
    south west east - direction
  )
  (:init
    (at kitchen)
    (door-open kitchen pantry west)
    (door-open pantry kitchen east)
  )
  (:goal (at unknown1_south))
)
Actions from solver: ['open door to west', 'move west'] 
Raw plan text: (OPEN-DOOR KITCHEN UNKNOWN1_SOUTH WEST)
(MOVE KITCHEN UNKNOWN1_SOUTH WEST)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 43 nodes.

PDDL problem description loaded: 
	Domain: EXPLOREENV
	Problem: AFTERPANTRYREVEALED
	#Actions: 43
	#Fluents: 53
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[0 / 0]--
--[0 / 1]--
Total time: 0.000126
Nodes generated during search: 20
Nodes expanded during search: 3
Plan found with cost: 2
Fast-BFS search completed in 0.000126 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_hoa3ege_/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 2 

Successful plans:
Value: 2
 /tmp/pddl_run_hoa3ege_/plan_tmp.txt 2

Current action_queue: ['open door to west', 'move west'] 
> open door to west 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: open door to west. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.
 

----Larger Loop No. 3---- 
successful_actions: ['open door to west', 'move west'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: open door to west
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
# imports stays exactly same for all domain files
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreEnv(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """loc: Location is visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """agent is at loc: Location"""

    @predicate(Location, Location, Direction)
    def connects(self, from_loc, to_loc, direction):
        """from_loc connects to to_loc via direction from from_loc"""

    @predicate(Location, Location, Direction)
    def door_open(self, from_loc, to_loc, direction):
        """the door from from_loc to to_loc via direction is open"""

    @action(Location, Location, Direction)
    def move(self, from_loc, to_loc, direction):
        precond = [self.agent_at(from_loc),
                   self.connects(from_loc, to_loc, direction),
                   self.door_open(from_loc, to_loc, direction)]
        effect = [~self.agent_at(from_loc),
                  self.agent_at(to_loc),
                  self.visited(to_loc)]
        return precond, effect

    @action(Location, Location, Direction)
    def open_door(self, from_loc, to_loc, direction):
        precond = [self.connects(from_loc, to_loc, direction),
                   ~self.door_open(from_loc, to_loc, direction),
                   self.agent_at(from_loc)]
        effect = [self.door_open(from_loc, to_loc, direction)]
        return precond, effect

    @action(Location, Location, Direction)
    def close_door(self, from_loc, to_loc, direction):
        precond = [self.connects(from_loc, to_loc, direction),
                   self.door_open(from_loc, to_loc, direction),
                   self.agent_at(from_loc)]
        effect = [~self.door_open(from_loc, to_loc, direction)]
        return precond, effect


[py_problem]
# imports stays the same for all problem files
from py2pddl import goal, init

class AfterPantryRevealed(ExploreEnv):
    def __init__(self):
        super().__init__()
        self.locations = ExploreEnv.Location.create_objs(["kitchen", "pantry", "unknown1_south"], prefix="")
        self.directions = ExploreEnv.Direction.create_objs(["south", "west", "east"], prefix="")

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["kitchen"]),
            self.visited(self.locations["kitchen"]),
            self.connects(self.locations["kitchen"], self.locations["pantry"], self.directions["west"]),
            self.connects(self.locations["pantry"], self.locations["kitchen"], self.directions["east"]),
            self.connects(self.locations["kitchen"], self.locations["unknown1_south"], self.directions["south"]),
            self.door_open(self.locations["kitchen"], self.locations["pantry"], self.directions["west"]),
            self.door_open(self.locations["pantry"], self.locations["kitchen"], self.directions["east"])
            # Note: the door to south is closed, so not including door_open for that direction
        ]
        return at

    @goal
    def goal(self):
        return [self.visited(self.locations["unknown1_south"])]


### Previous PDDL (generated from the IR)
[df]
(define (domain exploreenv)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and
      (not (door-open ?loc1 ?loc2 ?dir))
      (at ?loc1)
    )
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (at ?from)
      (door-open ?from ?to ?dir)
    )
    :effect (and
      (not (at ?from))
      (at ?to)
    )
  )
)

[pf]
(define (problem afterpantryrevealed)
  (:domain exploreenv)
  (:objects
    kitchen pantry unknown1_south - location
    south west east - direction
  )
  (:init
    (at kitchen)
    (door-open kitchen pantry west)
    (door-open pantry kitchen east)
  )
  (:goal (at unknown1_south))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: open door to west. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
# imports stays exactly same for all domain files
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreEnv(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """loc: Location is visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """agent is at loc: Location"""

    @predicate(Location, Location, Direction)
    def connects(self, from_loc, to_loc, direction):
        """from_loc connects to to_loc via direction from from_loc"""

    @predicate(Location, Location, Direction)
    def door_open(self, from_loc, to_loc, direction):
        """the door from from_loc to to_loc via direction is open"""

    @action(Location, Location, Direction)
    def move(self, from_loc, to_loc, direction):
        precond = [self.agent_at(from_loc),
                   self.connects(from_loc, to_loc, direction),
                   # The agent can move if there is either an open door OR no door at all in that direction
                   # This is handled in the problem's absence of 'door_open' predicate for a connection with no door
                   ]
        # Remove door_open precondition for moving if there is no door (i.e., door_open fact just doesn't exist)
        effect = [~self.agent_at(from_loc),
                  self.agent_at(to_loc),
                  self.visited(to_loc)]
        return precond, effect

    @action(Location, Location, Direction)
    def open_door(self, from_loc, to_loc, direction):
        precond = [self.connects(from_loc, to_loc, direction),
                   ~self.door_open(from_loc, to_loc, direction),
                   self.agent_at(from_loc)]
        effect = [self.door_open(from_loc, to_loc, direction)]
        return precond, effect

    @action(Location, Location, Direction)
    def close_door(self, from_loc, to_loc, direction):
        precond = [self.connects(from_loc, to_loc, direction),
                   self.door_open(from_loc, to_loc, direction),
                   self.agent_at(from_loc)]
        effect = [~self.door_open(from_loc, to_loc, direction)]
        return precond, effect

Generated py_problem:
# imports stays the same for all problem files
from py2pddl import goal, init

class AfterPantryRevealed(ExploreEnv):
    def __init__(self):
        super().__init__()
        self.locations = ExploreEnv.Location.create_objs(["kitchen", "pantry", "unknown1_south"], prefix="")
        self.directions = ExploreEnv.Direction.create_objs(["south", "west", "east"], prefix="")

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["kitchen"]),
            self.visited(self.locations["kitchen"]),
            self.connects(self.locations["kitchen"], self.locations["pantry"], self.directions["west"]),
            self.connects(self.locations["pantry"], self.locations["kitchen"], self.directions["east"]),
            self.connects(self.locations["kitchen"], self.locations["unknown1_south"], self.directions["south"])
            # The door between kitchen and pantry is open
            # There is a connection south from kitchen, but we don't know if there is a door
            # Thus, we define no door_open fact for that connection
        ]
        # For kitchen <-> pantry, open door (as previously observed)
        at.append(self.door_open(self.locations["kitchen"], self.locations["pantry"], self.directions["west"]))
        at.append(self.door_open(self.locations["pantry"], self.locations["kitchen"], self.directions["east"]))
        return at

    @goal
    def goal(self):
        return [self.visited(self.locations["unknown1_south"])]


--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: open door to west
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploreenv)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door-open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and
      (not (door-open ?loc1 ?loc2 ?dir))
      (at ?loc1)
    )
    :effect (door-open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (at ?from)
      (door-open ?from ?to ?dir)
    )
    :effect (and
      (not (at ?from))
      (at ?to)
    )
  )
)

[Problem file]
(define (problem afterpantryrevealed)
  (:domain exploreenv)
  (:objects
    kitchen pantry unknown1_south - location
    south west east - direction
  )
  (:init
    (at kitchen)
    (door-open kitchen pantry west)
    (door-open pantry kitchen east)
  )
  (:goal (at unknown1_south))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: open door to west. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


### Python IR: domain class
# imports stays exactly same for all domain files
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreEnv(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """loc: Location is visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """agent is at loc: Location"""

    @predicate(Location, Location, Direction)
    def connects(self, from_loc, to_loc, direction):
        """from_loc connects to to_loc via direction from from_loc"""

    @predicate(Location, Location, Direction)
    def door_open(self, from_loc, to_loc, direction):
        """the door from from_loc to to_loc via direction is open"""

    @action(Location, Location, Direction)
    def move(self, from_loc, to_loc, direction):
        precond = [self.agent_at(from_loc),
                   self.connects(from_loc, to_loc, direction),
                   # The agent can move if there is either an open door OR no door at all in that direction
                   # This is handled in the problem's absence of 'door_open' predicate for a connection with no door
                   ]
        # Remove door_open precondition for moving if there is no door (i.e., door_open fact just doesn't exist)
        effect = [~self.agent_at(from_loc),
                  self.agent_at(to_loc),
                  self.visited(to_loc)]
        return precond, effect

    @action(Location, Location, Direction)
    def open_door(self, from_loc, to_loc, direction):
        precond = [self.connects(from_loc, to_loc, direction),
                   ~self.door_open(from_loc, to_loc, direction),
                   self.agent_at(from_loc)]
        effect = [self.door_open(from_loc, to_loc, direction)]
        return precond, effect

    @action(Location, Location, Direction)
    def close_door(self, from_loc, to_loc, direction):
        precond = [self.connects(from_loc, to_loc, direction),
                   self.door_open(from_loc, to_loc, direction),
                   self.agent_at(from_loc)]
        effect = [~self.door_open(from_loc, to_loc, direction)]
        return precond, effect


### Python IR: problem class
# imports stays the same for all problem files
from py2pddl import goal, init

class AfterPantryRevealed(ExploreEnv):
    def __init__(self):
        super().__init__()
        self.locations = ExploreEnv.Location.create_objs(["kitchen", "pantry", "unknown1_south"], prefix="")
        self.directions = ExploreEnv.Direction.create_objs(["south", "west", "east"], prefix="")

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["kitchen"]),
            self.visited(self.locations["kitchen"]),
            self.connects(self.locations["kitchen"], self.locations["pantry"], self.directions["west"]),
            self.connects(self.locations["pantry"], self.locations["kitchen"], self.directions["east"]),
            self.connects(self.locations["kitchen"], self.locations["unknown1_south"], self.directions["south"])
            # The door between kitchen and pantry is open
            # There is a connection south from kitchen, but we don't know if there is a door
            # Thus, we define no door_open fact for that connection
        ]
        # For kitchen <-> pantry, open door (as previously observed)
        at.append(self.door_open(self.locations["kitchen"], self.locations["pantry"], self.directions["west"]))
        at.append(self.door_open(self.locations["pantry"], self.locations["kitchen"], self.directions["east"]))
        return at

    @goal
    def goal(self):
        return [self.visited(self.locations["unknown1_south"])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploreenv)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (agent_at ?loc - location)
    (visited ?loc - location)
    (connects ?from - location ?to - location ?dir - direction)
    (door_open ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and
      (connects ?loc1 ?loc2 ?dir)
      (not (door_open ?loc1 ?loc2 ?dir))
      (agent_at ?loc1)
    )
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (agent_at ?from)
      (connects ?from ?to ?dir)
      ; door_open not required: allows move if no door exists, or if door is open
    )
    :effect (and
      (not (agent_at ?from))
      (agent_at ?to)
      (visited ?to)
    )
  )
)

[PDDL pf]
(define (problem afterpantryrevealed)
  (:domain exploreenv)
  (:objects
    kitchen pantry unknown1_south - location
    south west east - direction
  )
  (:init
    (agent_at kitchen)
    (visited kitchen)
    (connects kitchen pantry west)
    (connects pantry kitchen east)
    (connects kitchen unknown1_south south)
    (door_open kitchen pantry west)
    (door_open pantry kitchen east)
  )
  (:goal (visited unknown1_south))
)
Actions from solver: ['move south'] 
Raw plan text: (MOVE KITCHEN UNKNOWN1_SOUTH SOUTH)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLOREENV
	Problem: AFTERPANTRYREVEALED
	#Actions: 4
	#Fluents: 7
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[0 / 0]--
--[0 / 2]--
Total time: 0.000103
Nodes generated during search: 4
Nodes expanded during search: 1
Plan found with cost: 1
Fast-BFS search completed in 0.000103 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_ybte8fsi/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 1 

Successful plans:
Value: 1
 /tmp/pddl_run_ybte8fsi/plan_tmp.txt 1

Current action_queue: ['move south'] 
> move south 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: move south. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status. 

----Larger Loop No. 4---- 
successful_actions: ['open door to west', 'move west'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: move south
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
# imports stays exactly same for all domain files
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreEnv(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """loc: Location is visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """agent is at loc: Location"""

    @predicate(Location, Location, Direction)
    def connects(self, from_loc, to_loc, direction):
        """from_loc connects to to_loc via direction from from_loc"""

    @predicate(Location, Location, Direction)
    def door_open(self, from_loc, to_loc, direction):
        """the door from from_loc to to_loc via direction is open"""

    @action(Location, Location, Direction)
    def move(self, from_loc, to_loc, direction):
        precond = [self.agent_at(from_loc),
                   self.connects(from_loc, to_loc, direction),
                   # The agent can move if there is either an open door OR no door at all in that direction
                   # This is handled in the problem's absence of 'door_open' predicate for a connection with no door
                   ]
        # Remove door_open precondition for moving if there is no door (i.e., door_open fact just doesn't exist)
        effect = [~self.agent_at(from_loc),
                  self.agent_at(to_loc),
                  self.visited(to_loc)]
        return precond, effect

    @action(Location, Location, Direction)
    def open_door(self, from_loc, to_loc, direction):
        precond = [self.connects(from_loc, to_loc, direction),
                   ~self.door_open(from_loc, to_loc, direction),
                   self.agent_at(from_loc)]
        effect = [self.door_open(from_loc, to_loc, direction)]
        return precond, effect

    @action(Location, Location, Direction)
    def close_door(self, from_loc, to_loc, direction):
        precond = [self.connects(from_loc, to_loc, direction),
                   self.door_open(from_loc, to_loc, direction),
                   self.agent_at(from_loc)]
        effect = [~self.door_open(from_loc, to_loc, direction)]
        return precond, effect


[py_problem]
# imports stays the same for all problem files
from py2pddl import goal, init

class AfterPantryRevealed(ExploreEnv):
    def __init__(self):
        super().__init__()
        self.locations = ExploreEnv.Location.create_objs(["kitchen", "pantry", "unknown1_south"], prefix="")
        self.directions = ExploreEnv.Direction.create_objs(["south", "west", "east"], prefix="")

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["kitchen"]),
            self.visited(self.locations["kitchen"]),
            self.connects(self.locations["kitchen"], self.locations["pantry"], self.directions["west"]),
            self.connects(self.locations["pantry"], self.locations["kitchen"], self.directions["east"]),
            self.connects(self.locations["kitchen"], self.locations["unknown1_south"], self.directions["south"])
            # The door between kitchen and pantry is open
            # There is a connection south from kitchen, but we don't know if there is a door
            # Thus, we define no door_open fact for that connection
        ]
        # For kitchen <-> pantry, open door (as previously observed)
        at.append(self.door_open(self.locations["kitchen"], self.locations["pantry"], self.directions["west"]))
        at.append(self.door_open(self.locations["pantry"], self.locations["kitchen"], self.directions["east"]))
        return at

    @goal
    def goal(self):
        return [self.visited(self.locations["unknown1_south"])]


### Previous PDDL (generated from the IR)
[df]
(define (domain exploreenv)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (agent_at ?loc - location)
    (visited ?loc - location)
    (connects ?from - location ?to - location ?dir - direction)
    (door_open ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and
      (connects ?loc1 ?loc2 ?dir)
      (not (door_open ?loc1 ?loc2 ?dir))
      (agent_at ?loc1)
    )
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (agent_at ?from)
      (connects ?from ?to ?dir)
      ; door_open not required: allows move if no door exists, or if door is open
    )
    :effect (and
      (not (agent_at ?from))
      (agent_at ?to)
      (visited ?to)
    )
  )
)

[pf]
(define (problem afterpantryrevealed)
  (:domain exploreenv)
  (:objects
    kitchen pantry unknown1_south - location
    south west east - direction
  )
  (:init
    (agent_at kitchen)
    (visited kitchen)
    (connects kitchen pantry west)
    (connects pantry kitchen east)
    (connects kitchen unknown1_south south)
    (door_open kitchen pantry west)
    (door_open pantry kitchen east)
  )
  (:goal (visited unknown1_south))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: move south. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
# imports stays exactly same for all domain files
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreEnv(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """loc: Location is visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """agent is at loc: Location"""

    @predicate(Location, Location, Direction)
    def connects(self, from_loc, to_loc, direction):
        """from_loc connects to to_loc via direction from from_loc"""

    @predicate(Location, Location, Direction)
    def door_open(self, from_loc, to_loc, direction):
        """the door from from_loc to to_loc via direction is open"""

    @predicate(Location, Location, Direction)
    def door_exists(self, from_loc, to_loc, direction):
        """a door exists between from_loc and to_loc in direction from from_loc"""

    @action(Location, Location, Direction)
    def move(self, from_loc, to_loc, direction):
        precond = [
            self.agent_at(from_loc),
            self.connects(from_loc, to_loc, direction),
            (~self.door_exists(from_loc, to_loc, direction)) |
            (self.door_exists(from_loc, to_loc, direction) & self.door_open(from_loc, to_loc, direction))
        ]
        effect = [~self.agent_at(from_loc), self.agent_at(to_loc), self.visited(to_loc)]
        return precond, effect

    @action(Location, Location, Direction)
    def open_door(self, from_loc, to_loc, direction):
        precond = [self.connects(from_loc, to_loc, direction), self.door_exists(from_loc, to_loc, direction), ~self.door_open(from_loc, to_loc, direction), self.agent_at(from_loc)]
        effect = [self.door_open(from_loc, to_loc, direction)]
        return precond, effect

    @action(Location, Location, Direction)
    def close_door(self, from_loc, to_loc, direction):
        precond = [self.connects(from_loc, to_loc, direction), self.door_exists(from_loc, to_loc, direction), self.door_open(from_loc, to_loc, direction), self.agent_at(from_loc)]
        effect = [~self.door_open(from_loc, to_loc, direction)]
        return precond, effect

Generated py_problem:
# imports stays the same for all problem files
from py2pddl import goal, init

class AfterPantryRevealed(ExploreEnv):
    def __init__(self):
        super().__init__()
        self.locations = ExploreEnv.Location.create_objs(["kitchen", "pantry", "unknown1_south"], prefix="")
        self.directions = ExploreEnv.Direction.create_objs(["south", "west", "east"], prefix="")

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["kitchen"]),
            self.visited(self.locations["kitchen"]),
            self.connects(self.locations["kitchen"], self.locations["pantry"], self.directions["west"]),
            self.connects(self.locations["pantry"], self.locations["kitchen"], self.directions["east"]),
            self.connects(self.locations["kitchen"], self.locations["unknown1_south"], self.directions["south"]),
            self.door_exists(self.locations["kitchen"], self.locations["pantry"], self.directions["west"]),
            self.door_exists(self.locations["pantry"], self.locations["kitchen"], self.directions["east"]),
            self.door_exists(self.locations["kitchen"], self.locations["unknown1_south"], self.directions["south"]),
            self.door_open(self.locations["kitchen"], self.locations["pantry"], self.directions["west"]),
            self.door_open(self.locations["pantry"], self.locations["kitchen"], self.directions["east"]),
            # Door between kitchen and unknown1_south is initially closed (no door_open fact)
        ]
        return at

    @goal
    def goal(self):
        return [self.visited(self.locations["unknown1_south"])]


--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move south
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploreenv)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (agent_at ?loc - location)
    (visited ?loc - location)
    (connects ?from - location ?to - location ?dir - direction)
    (door_open ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and
      (connects ?loc1 ?loc2 ?dir)
      (not (door_open ?loc1 ?loc2 ?dir))
      (agent_at ?loc1)
    )
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (agent_at ?from)
      (connects ?from ?to ?dir)
      ; door_open not required: allows move if no door exists, or if door is open
    )
    :effect (and
      (not (agent_at ?from))
      (agent_at ?to)
      (visited ?to)
    )
  )
)

[Problem file]
(define (problem afterpantryrevealed)
  (:domain exploreenv)
  (:objects
    kitchen pantry unknown1_south - location
    south west east - direction
  )
  (:init
    (agent_at kitchen)
    (visited kitchen)
    (connects kitchen pantry west)
    (connects pantry kitchen east)
    (connects kitchen unknown1_south south)
    (door_open kitchen pantry west)
    (door_open pantry kitchen east)
  )
  (:goal (visited unknown1_south))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: move south. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

### Python IR: domain class
# imports stays exactly same for all domain files
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExploreEnv(Domain):
    Location = create_type("Location")
    Direction = create_type("Direction")

    @predicate(Location)
    def visited(self, loc):
        """loc: Location is visited"""

    @predicate(Location)
    def agent_at(self, loc):
        """agent is at loc: Location"""

    @predicate(Location, Location, Direction)
    def connects(self, from_loc, to_loc, direction):
        """from_loc connects to to_loc via direction from from_loc"""

    @predicate(Location, Location, Direction)
    def door_open(self, from_loc, to_loc, direction):
        """the door from from_loc to to_loc via direction is open"""

    @predicate(Location, Location, Direction)
    def door_exists(self, from_loc, to_loc, direction):
        """a door exists between from_loc and to_loc in direction from from_loc"""

    @action(Location, Location, Direction)
    def move(self, from_loc, to_loc, direction):
        precond = [
            self.agent_at(from_loc),
            self.connects(from_loc, to_loc, direction),
            (~self.door_exists(from_loc, to_loc, direction)) |
            (self.door_exists(from_loc, to_loc, direction) & self.door_open(from_loc, to_loc, direction))
        ]
        effect = [~self.agent_at(from_loc), self.agent_at(to_loc), self.visited(to_loc)]
        return precond, effect

    @action(Location, Location, Direction)
    def open_door(self, from_loc, to_loc, direction):
        precond = [self.connects(from_loc, to_loc, direction), self.door_exists(from_loc, to_loc, direction), ~self.door_open(from_loc, to_loc, direction), self.agent_at(from_loc)]
        effect = [self.door_open(from_loc, to_loc, direction)]
        return precond, effect

    @action(Location, Location, Direction)
    def close_door(self, from_loc, to_loc, direction):
        precond = [self.connects(from_loc, to_loc, direction), self.door_exists(from_loc, to_loc, direction), self.door_open(from_loc, to_loc, direction), self.agent_at(from_loc)]
        effect = [~self.door_open(from_loc, to_loc, direction)]
        return precond, effect


### Python IR: problem class
# imports stays the same for all problem files
from py2pddl import goal, init

class AfterPantryRevealed(ExploreEnv):
    def __init__(self):
        super().__init__()
        self.locations = ExploreEnv.Location.create_objs(["kitchen", "pantry", "unknown1_south"], prefix="")
        self.directions = ExploreEnv.Direction.create_objs(["south", "west", "east"], prefix="")

    @init
    def init(self):
        at = [
            self.agent_at(self.locations["kitchen"]),
            self.visited(self.locations["kitchen"]),
            self.connects(self.locations["kitchen"], self.locations["pantry"], self.directions["west"]),
            self.connects(self.locations["pantry"], self.locations["kitchen"], self.directions["east"]),
            self.connects(self.locations["kitchen"], self.locations["unknown1_south"], self.directions["south"]),
            self.door_exists(self.locations["kitchen"], self.locations["pantry"], self.directions["west"]),
            self.door_exists(self.locations["pantry"], self.locations["kitchen"], self.directions["east"]),
            self.door_exists(self.locations["kitchen"], self.locations["unknown1_south"], self.directions["south"]),
            self.door_open(self.locations["kitchen"], self.locations["pantry"], self.directions["west"]),
            self.door_open(self.locations["pantry"], self.locations["kitchen"], self.directions["east"]),
            # Door between kitchen and unknown1_south is initially closed (no door_open fact)
        ]
        return at

    @goal
    def goal(self):
        return [self.visited(self.locations["unknown1_south"])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploreenv)
  (:requirements :typing)
  (:types location direction)
  (:predicates
    (agent_at ?loc - location)
    (visited ?loc - location)
    (connects ?from - location ?to - location ?dir - direction)
    (door_open ?from - location ?to - location ?dir - direction)
    (door_exists ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and
      (connects ?loc1 ?loc2 ?dir)
      (door_exists ?loc1 ?loc2 ?dir)
      (not (door_open ?loc1 ?loc2 ?dir))
      (agent_at ?loc1)
    )
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
      (agent_at ?from)
      (connects ?from ?to ?dir)
      (or
        (not (door_exists ?from ?to ?dir))
        (and (door_exists ?from ?to ?dir)
             (door_open ?from ?to ?dir))
      )
    )
    :effect (and
      (not (agent_at ?from))
      (agent_at ?to)
      (visited ?to)
    )
  )
)


[PDDL pf]
(define (problem afterpantryrevealed)
  (:domain exploreenv)
  (:objects
    kitchen pantry unknown1_south - location
    south west east - direction
  )
  (:init
    (agent_at kitchen)
    (visited kitchen)
    (connects kitchen pantry west)
    (connects pantry kitchen east)
    (connects kitchen unknown1_south south)
    (door_exists kitchen pantry west)
    (door_exists pantry kitchen east)
    (door_exists kitchen unknown1_south south)
    (door_open kitchen pantry west)
    (door_open pantry kitchen east)
  )
  (:goal (visited unknown1_south))
)

Actions from solver: ['open door to south', 'move south'] 
Raw plan text: (OPEN-DOOR KITCHEN UNKNOWN1_SOUTH SOUTH)
(MOVE KITCHEN UNKNOWN1_SOUTH SOUTH)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLOREENV
	Problem: AFTERPANTRYREVEALED
	#Actions: 4
	#Fluents: 7
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[0 / 0]--
--[0 / 3]--
Total time: 0.000137
Nodes generated during search: 5
Nodes expanded during search: 3
Plan found with cost: 2
Fast-BFS search completed in 0.000137 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_0besl2uw/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 2 

Successful plans:
Value: 2
 /tmp/pddl_run_0besl2uw/plan_tmp.txt 2

Current action_queue: ['open door to south', 'move south'] 
> open door to south 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.
 
