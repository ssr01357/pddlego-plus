Observations: You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. 
To the South you see a closed patio door. To the West you see a closed plain door.  
Gold path: ['look around', 'open door to south', 'open door to west', 'move south', 'open door to west', 'move east', 'open door to north', 'move west', 'move east', 'move north', 'take coin'] 
Valid Actions: ['look around', 'close door to west', 'move west', 'open door to south', 'open door to west', 'inventory', 'move south', 'close door to south'] 
taskDescription: Your task is to search the environment and find the coin.  Once you find the coin, take it. 
brief_obs: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 
 


====Step 0==== 

----Larger Loop No. 0---- 
successful_actions: [] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, r1, d, r2):
        precond = [self.current(r1), self.open_door(d), self.door_south(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r1, d, r2):
        precond = [self.current(r1), self.open_door(d), self.door_west(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect
Generated py_problem:
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Create two room objects: one for the kitchen (current/visited) and one for the target new room
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "room2"])
        # Create two door objects: one patio door to the south and one plain door to the west
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "plainDoor"])

    @init
    def init(self):
        facts = [
            self.current(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["kitchen"]),
            self.door_south(self.doorObjs["patioDoor"]),
            self.door_west(self.doorObjs["plainDoor"])
        ]
        return facts

    @goal
    def goal(self):
        # The goal is to be in a room that is not the kitchen (i.e. the new room 'room2')
        return [self.current(self.roomObjs["room2"])]

--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
N/A

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, r1, d, r2):
        precond = [self.current(r1), self.open_door(d), self.door_south(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r1, d, r2):
        precond = [self.current(r1), self.open_door(d), self.door_west(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

### Python IR: problem class
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Create two room objects: one for the kitchen (current/visited) and one for the target new room
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "room2"])
        # Create two door objects: one patio door to the south and one plain door to the west
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "plainDoor"])

    @init
    def init(self):
        facts = [
            self.current(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["kitchen"]),
            self.door_south(self.doorObjs["patioDoor"]),
            self.door_west(self.doorObjs["plainDoor"])
        ]
        return facts

    @goal
    def goal(self):
        # The goal is to be in a room that is not the kitchen (i.e. the new room 'room2')
        return [self.current(self.roomObjs["room2"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door ?from - location ?to - location ?dir - direction)
    (open ?from - location ?to - location ?dir - direction)
  )
  
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )
  
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (door ?from ?to ?dir) (open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen room2 - location
    south west - direction
  )
  (:init
    (at kitchen)
    (door kitchen room2 south)
    (door kitchen room2 west)
  )
  (:goal (at room2))
)
Actions from solver: ['open door to south', 'move south'] 
Raw plan text: (OPEN-DOOR KITCHEN ROOM2 SOUTH)
(MOVE KITCHEN ROOM2 SOUTH)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 4
	#Fluents: 6
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[0 / 0]--
--[0 / 2]--
Total time: 0.000126
Nodes generated during search: 5
Nodes expanded during search: 2
Plan found with cost: 2
Fast-BFS search completed in 0.000126 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_3pxfeat5/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 2 

Successful plans:
Value: 2
 /tmp/pddl_run_3pxfeat5/plan_tmp.txt 2

Current action_queue: ['open door to south', 'move south'] 
> open door to south 
 You open the patio door, revealing the backyard.  
Small Loop, action_queue: ['move south'] 
Current action_queue: ['move south'] 
> move south 
 You are in the backyard. In one part of the room you see a barbeque. There is also a workbench, that has nothing on it. You also see a patio chair, that has nothing on it. In another part of the room you see a patio table, that has nothing on it. In one part of the room you see a clothes line, that has nothing on it. There is also a garden, that has nothing on it. 
Through an open patio door, to the North you see the kitchen. To the South you see the driveway. To the East you see the street. To the West you see a closed patio door.  


====Step 1==== 

----Larger Loop No. 0---- 
successful_actions: ['open door to south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: open door to south
You open the patio door, revealing the backyard. 

Action: move south
You are in the backyard. Through an open patio door, to the North you see the kitchen. To the South you see the driveway. To the East you see the street. To the West you see a closed patio door. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, r1, d, r2):
        precond = [self.current(r1), self.open_door(d), self.door_south(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r1, d, r2):
        precond = [self.current(r1), self.open_door(d), self.door_west(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

[py_problem]
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Create two room objects: one for the kitchen (current/visited) and one for the target new room
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "room2"])
        # Create two door objects: one patio door to the south and one plain door to the west
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "plainDoor"])

    @init
    def init(self):
        facts = [
            self.current(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["kitchen"]),
            self.door_south(self.doorObjs["patioDoor"]),
            self.door_west(self.doorObjs["plainDoor"])
        ]
        return facts

    @goal
    def goal(self):
        # The goal is to be in a room that is not the kitchen (i.e. the new room 'room2')
        return [self.current(self.roomObjs["room2"])]

### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :typing :strips)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door ?from - location ?to - location ?dir - direction)
    (open ?from - location ?to - location ?dir - direction)
  )
  
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )
  
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (door ?from ?to ?dir) (open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen room2 - location
    south west - direction
  )
  (:init
    (at kitchen)
    (door kitchen room2 south)
    (door kitchen room2 west)
  )
  (:goal (at room2))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
N/A

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, r1, d, r2):
        precond = [self.current(r1), self.open_door(d), self.door_south(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r1, d, r2):
        precond = [self.current(r1), self.open_door(d), self.door_west(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect
Generated py_problem:
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Create room objects: 'kitchen', 'backyard', 'driveway', and 'westRoom' (room behind the west door)
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        # Create door objects: 'patioDoor' (connecting kitchen and backyard), 'drivewayDoor' (for backyard to driveway), and 'westDoor' (for the west exit)
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            # The character started in the kitchen and has moved to the backyard, so both are marked as visited
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            # The current location is now the backyard
            self.current(self.roomObjs["backyard"]),
            # Define door orientations: patioDoor and drivewayDoor are south-facing, westDoor is west-facing
            self.door_south(self.doorObjs["patioDoor"]),
            self.door_south(self.doorObjs["drivewayDoor"]),
            self.door_west(self.doorObjs["westDoor"]),
            # The patio door (connecting kitchen and backyard) is open
            self.open_door(self.doorObjs["patioDoor"])
        ]
        return facts

    @goal
    def goal(self):
        # The exploration objective: move from the current (visited) backyard to a new, unvisited room, the driveway
        return [self.current(self.roomObjs["driveway"])]

--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: open door to south
You open the patio door, revealing the backyard. 

Action: move south
You are in the backyard. Through an open patio door, to the North you see the kitchen. To the South you see the driveway. To the East you see the street. To the West you see a closed patio door. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :strips)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door ?from - location ?to - location ?dir - direction)
    (open ?from - location ?to - location ?dir - direction)
  )
  
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )
  
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (door ?from ?to ?dir) (open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen room2 - location
    south west - direction
  )
  (:init
    (at kitchen)
    (door kitchen room2 south)
    (door kitchen room2 west)
  )
  (:goal (at room2))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, r1, d, r2):
        precond = [self.current(r1), self.open_door(d), self.door_south(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r1, d, r2):
        precond = [self.current(r1), self.open_door(d), self.door_west(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

### Python IR: problem class
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Create room objects: 'kitchen', 'backyard', 'driveway', and 'westRoom' (room behind the west door)
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        # Create door objects: 'patioDoor' (connecting kitchen and backyard), 'drivewayDoor' (for backyard to driveway), and 'westDoor' (for the west exit)
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            # The character started in the kitchen and has moved to the backyard, so both are marked as visited
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            # The current location is now the backyard
            self.current(self.roomObjs["backyard"]),
            # Define door orientations: patioDoor and drivewayDoor are south-facing, westDoor is west-facing
            self.door_south(self.doorObjs["patioDoor"]),
            self.door_south(self.doorObjs["drivewayDoor"]),
            self.door_west(self.doorObjs["westDoor"]),
            # The patio door (connecting kitchen and backyard) is open
            self.open_door(self.doorObjs["patioDoor"])
        ]
        return facts

    @goal
    def goal(self):
        # The exploration objective: move from the current (visited) backyard to a new, unvisited room, the driveway
        return [self.current(self.roomObjs["driveway"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door ?from - location ?to - location ?dir - direction)
    (open ?from - location ?to - location ?dir - direction)
  )
  
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )
  
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (door ?from ?to ?dir) (open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (at backyard)
    (door kitchen backyard south)
    (open kitchen backyard south)
    (door backyard driveway south)
    (door backyard westRoom west)
  )
  (:goal (at driveway))
)
Actions from solver: ['open door to south', 'move south'] 
Raw plan text: (OPEN-DOOR BACKYARD DRIVEWAY SOUTH)
(MOVE BACKYARD DRIVEWAY SOUTH)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 4
	#Fluents: 7
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[0 / 0]--
--[0 / 2]--
Total time: 0.000109
Nodes generated during search: 5
Nodes expanded during search: 2
Plan found with cost: 2
Fast-BFS search completed in 0.000109 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_5fwruabq/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 2 

Successful plans:
Value: 2
 /tmp/pddl_run_5fwruabq/plan_tmp.txt 2

Current action_queue: ['open door to south', 'move south'] 
> open door to south 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.
 

----Larger Loop No. 1---- 
successful_actions: ['open door to south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: open door to south
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, r1, d, r2):
        precond = [self.current(r1), self.open_door(d), self.door_south(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r1, d, r2):
        precond = [self.current(r1), self.open_door(d), self.door_west(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

[py_problem]
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Create room objects: 'kitchen', 'backyard', 'driveway', and 'westRoom' (room behind the west door)
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        # Create door objects: 'patioDoor' (connecting kitchen and backyard), 'drivewayDoor' (for backyard to driveway), and 'westDoor' (for the west exit)
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            # The character started in the kitchen and has moved to the backyard, so both are marked as visited
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            # The current location is now the backyard
            self.current(self.roomObjs["backyard"]),
            # Define door orientations: patioDoor and drivewayDoor are south-facing, westDoor is west-facing
            self.door_south(self.doorObjs["patioDoor"]),
            self.door_south(self.doorObjs["drivewayDoor"]),
            self.door_west(self.doorObjs["westDoor"]),
            # The patio door (connecting kitchen and backyard) is open
            self.open_door(self.doorObjs["patioDoor"])
        ]
        return facts

    @goal
    def goal(self):
        # The exploration objective: move from the current (visited) backyard to a new, unvisited room, the driveway
        return [self.current(self.roomObjs["driveway"])]

### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :typing :strips)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door ?from - location ?to - location ?dir - direction)
    (open ?from - location ?to - location ?dir - direction)
  )
  
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )
  
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (door ?from ?to ?dir) (open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (at backyard)
    (door kitchen backyard south)
    (open kitchen backyard south)
    (door backyard driveway south)
    (door backyard westRoom west)
  )
  (:goal (at driveway))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    # Updated move_south action to allow direct movement when no door is present
    @action(Room, Room)
    def move_south(self, r1, r2):
        precond = [self.current(r1)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r1, d, r2):
        precond = [self.current(r1), self.open_door(d), self.door_west(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect
Generated py_problem:
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            # The agent has visited the kitchen and backyard; current location is backyard
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.current(self.roomObjs["backyard"]),
            
            # Observation: Attempt to open door to south failed because there is no door here.
            # Thus, no south-facing door facts are asserted. Only a west door is present.
            self.door_west(self.doorObjs["westDoor"])
        ]
        return facts

    @goal
    def goal(self):
        # The goal is to move to a not yet visited room, e.g. the driveway
        return [self.current(self.roomObjs["driveway"])]

--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: open door to south
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :strips)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door ?from - location ?to - location ?dir - direction)
    (open ?from - location ?to - location ?dir - direction)
  )
  
  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )
  
  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (door ?from ?to ?dir) (open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (at backyard)
    (door kitchen backyard south)
    (open kitchen backyard south)
    (door backyard driveway south)
    (door backyard westRoom west)
  )
  (:goal (at driveway))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    # Updated move_south action to allow direct movement when no door is present
    @action(Room, Room)
    def move_south(self, r1, r2):
        precond = [self.current(r1)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r1, d, r2):
        precond = [self.current(r1), self.open_door(d), self.door_west(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

### Python IR: problem class
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            # The agent has visited the kitchen and backyard; current location is backyard
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.current(self.roomObjs["backyard"]),
            
            # Observation: Attempt to open door to south failed because there is no door here.
            # Thus, no south-facing door facts are asserted. Only a west door is present.
            self.door_west(self.doorObjs["westDoor"])
        ]
        return facts

    @goal
    def goal(self):
        # The goal is to move to a not yet visited room, e.g. the driveway
        return [self.current(self.roomObjs["driveway"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door ?from - location ?to - location ?dir - direction)
    (open ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (or (not (door ?from ?to ?dir)) (open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
)


[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (at backyard)
    (door backyard westRoom west)
  )
  (:goal (at driveway))
)

Actions from solver: ['move west'] 
Raw plan text: (MOVE BACKYARD DRIVEWAY WEST)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 25 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 25
	#Fluents: 6
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[0 / 0]--
--[0 / 1]--
Total time: 0.000114
Nodes generated during search: 5
Nodes expanded during search: 1
Plan found with cost: 1
Fast-BFS search completed in 0.000114 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_444kifb8/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 1 

Successful plans:
Value: 1
 /tmp/pddl_run_444kifb8/plan_tmp.txt 1

Current action_queue: ['move west'] 
> move west 
 You can't move there, the door is closed.  
Large loop error message: This is the action you take: move west. The door that you are moving to is closed. You should first open door to that direction then move there! 

----Larger Loop No. 2---- 
successful_actions: ['open door to south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: move west
You can't move there, the door is closed. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    # Updated move_south action to allow direct movement when no door is present
    @action(Room, Room)
    def move_south(self, r1, r2):
        precond = [self.current(r1)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r1, d, r2):
        precond = [self.current(r1), self.open_door(d), self.door_west(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

[py_problem]
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            # The agent has visited the kitchen and backyard; current location is backyard
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.current(self.roomObjs["backyard"]),
            
            # Observation: Attempt to open door to south failed because there is no door here.
            # Thus, no south-facing door facts are asserted. Only a west door is present.
            self.door_west(self.doorObjs["westDoor"])
        ]
        return facts

    @goal
    def goal(self):
        # The goal is to move to a not yet visited room, e.g. the driveway
        return [self.current(self.roomObjs["driveway"])]

### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door ?from - location ?to - location ?dir - direction)
    (open ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (or (not (door ?from ?to ?dir)) (open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
)


[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (at backyard)
    (door backyard westRoom west)
  )
  (:goal (at driveway))
)

### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: move west. The door that you are moving to is closed. You should first open door to that direction then move there!

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r1, r2):
        precond = [self.current(r1)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r1, d, r2):
        # To move west the door must be open. The failed move west action indicates that the door is currently closed.
        precond = [self.current(r1), self.open_door(d), self.door_west(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect
Generated py_problem:
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            # The agent has visited the kitchen and backyard and is currently in the backyard
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.current(self.roomObjs["backyard"]),
            # The west door is available but remains closed (no open_door fact asserted)
            self.door_west(self.doorObjs["westDoor"])
        ]
        return facts

    @goal
    def goal(self):
        # The goal is to move to an unvisited location (e.g. the driveway).
        # Note: move_west requires the door to be open, so an open_door_to_west action must be taken before moving west if desired.
        return [self.current(self.roomObjs["driveway"])]


--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move west
You can't move there, the door is closed. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door ?from - location ?to - location ?dir - direction)
    (open ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (or (not (door ?from ?to ?dir)) (open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
)


[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (at backyard)
    (door backyard westRoom west)
  )
  (:goal (at driveway))
)


### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: move west. The door that you are moving to is closed. You should first open door to that direction then move there!

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r1, r2):
        precond = [self.current(r1)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r1, d, r2):
        # To move west the door must be open. The failed move west action indicates that the door is currently closed.
        precond = [self.current(r1), self.open_door(d), self.door_west(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

### Python IR: problem class
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            # The agent has visited the kitchen and backyard and is currently in the backyard
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.current(self.roomObjs["backyard"]),
            # The west door is available but remains closed (no open_door fact asserted)
            self.door_west(self.doorObjs["westDoor"])
        ]
        return facts

    @goal
    def goal(self):
        # The goal is to move to an unvisited location (e.g. the driveway).
        # Note: move_west requires the door to be open, so an open_door_to_west action must be taken before moving west if desired.
        return [self.current(self.roomObjs["driveway"])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (or (not (door ?from ?to ?dir)) (open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (at backyard)
    (door backyard westRoom west)
  )
  (:goal (at driveway))
)
Actions from solver: ['move west'] 
Raw plan text: (MOVE BACKYARD DRIVEWAY WEST)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 25 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 25
	#Fluents: 6
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[0 / 0]--
--[0 / 1]--
Total time: 0.000107
Nodes generated during search: 5
Nodes expanded during search: 1
Plan found with cost: 1
Fast-BFS search completed in 0.000107 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_6_ncwdff/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 1 

Successful plans:
Value: 1
 /tmp/pddl_run_6_ncwdff/plan_tmp.txt 1

Current action_queue: ['move west'] 
> move west 
 You can't move there, the door is closed.  
Large loop error message: This is the action you take: move west. The door that you are moving to is closed. You should first open door to that direction then move there! 

----Larger Loop No. 3---- 
successful_actions: ['open door to south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: move west
You can't move there, the door is closed. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r1, r2):
        precond = [self.current(r1)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r1, d, r2):
        # To move west the door must be open. The failed move west action indicates that the door is currently closed.
        precond = [self.current(r1), self.open_door(d), self.door_west(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

[py_problem]
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            # The agent has visited the kitchen and backyard and is currently in the backyard
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.current(self.roomObjs["backyard"]),
            # The west door is available but remains closed (no open_door fact asserted)
            self.door_west(self.doorObjs["westDoor"])
        ]
        return facts

    @goal
    def goal(self):
        # The goal is to move to an unvisited location (e.g. the driveway).
        # Note: move_west requires the door to be open, so an open_door_to_west action must be taken before moving west if desired.
        return [self.current(self.roomObjs["driveway"])]


### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (or (not (door ?from ?to ?dir)) (open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (at backyard)
    (door backyard westRoom west)
  )
  (:goal (at driveway))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: move west. The door that you are moving to is closed. You should first open door to that direction then move there!

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r1, r2):
        precond = [self.current(r1)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r1, d, r2):
        # To move west the door must be open.
        # Observation: An attempt to move west failed because the door was closed.
        # The agent must execute open_door_to_west before taking move_west.
        precond = [self.current(r1), self.open_door(d), self.door_west(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect
Generated py_problem:
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            # The agent has visited the kitchen and backyard and is currently in the backyard
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.current(self.roomObjs["backyard"]),
            # The west door is available (and is currently closed since open_door is not asserted)
            self.door_west(self.doorObjs["westDoor"]),
            # Also include a south door to allow open/close door to south actions
            self.door_south(self.doorObjs["patioDoor"])
        ]
        return facts

    @goal
    def goal(self):
        # The goal is to move to an unvisited room via the west door (i.e. westRoom), encouraging exploration.
        return [self.current(self.roomObjs["westRoom"])]

--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move west
You can't move there, the door is closed. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (or (not (door ?from ?to ?dir)) (open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (at backyard)
    (door backyard westRoom west)
  )
  (:goal (at driveway))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: move west. The door that you are moving to is closed. You should first open door to that direction then move there!

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r1, r2):
        precond = [self.current(r1)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r1, d, r2):
        # To move west the door must be open.
        # Observation: An attempt to move west failed because the door was closed.
        # The agent must execute open_door_to_west before taking move_west.
        precond = [self.current(r1), self.open_door(d), self.door_west(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

### Python IR: problem class
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            # The agent has visited the kitchen and backyard and is currently in the backyard
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.current(self.roomObjs["backyard"]),
            # The west door is available (and is currently closed since open_door is not asserted)
            self.door_west(self.doorObjs["westDoor"]),
            # Also include a south door to allow open/close door to south actions
            self.door_south(self.doorObjs["patioDoor"])
        ]
        return facts

    @goal
    def goal(self):
        # The goal is to move to an unvisited room via the west door (i.e. westRoom), encouraging exploration.
        return [self.current(self.roomObjs["westRoom"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (or (not (door ?from ?to ?dir)) (open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (at backyard)
    (door backyard westRoom west)
    (door backyard driveway south)
  )
  (:goal (at westRoom))
)
Actions from solver: ['move south'] 
Raw plan text: (MOVE BACKYARD WESTROOM SOUTH)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 26 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 26
	#Fluents: 8
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[0 / 0]--
--[0 / 1]--
Total time: 4.7e-05
Nodes generated during search: 6
Nodes expanded during search: 1
Plan found with cost: 1
Fast-BFS search completed in 4.7e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_5taq8n2_/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 1 

Successful plans:
Value: 1
 /tmp/pddl_run_5taq8n2_/plan_tmp.txt 1

Current action_queue: ['move south'] 
> move south 
 You are in the driveway. 
To the North you see the backyard.  


====Step 2==== 

----Larger Loop No. 0---- 
successful_actions: ['open door to south', 'move south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: move south
You are in the driveway. To the North you see the backyard. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r1, r2):
        precond = [self.current(r1)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r1, d, r2):
        # To move west the door must be open.
        # Observation: An attempt to move west failed because the door was closed.
        # The agent must execute open_door_to_west before taking move_west.
        precond = [self.current(r1), self.open_door(d), self.door_west(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

[py_problem]
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            # The agent has visited the kitchen and backyard and is currently in the backyard
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.current(self.roomObjs["backyard"]),
            # The west door is available (and is currently closed since open_door is not asserted)
            self.door_west(self.doorObjs["westDoor"]),
            # Also include a south door to allow open/close door to south actions
            self.door_south(self.doorObjs["patioDoor"])
        ]
        return facts

    @goal
    def goal(self):
        # The goal is to move to an unvisited room via the west door (i.e. westRoom), encouraging exploration.
        return [self.current(self.roomObjs["westRoom"])]

### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (or (not (door ?from ?to ?dir)) (open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (at backyard)
    (door backyard westRoom west)
    (door backyard driveway south)
  )
  (:goal (at westRoom))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
N/A

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @predicate(Room, Room)
    def north_of(self, r1, r2):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r1, r2):
        precond = [self.current(r1)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r1, d, r2):
        precond = [self.current(r1), self.open_door(d), self.door_west(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect
Generated py_problem:
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            self.current(self.roomObjs["driveway"]),
            self.door_west(self.doorObjs["westDoor"]),
            self.door_south(self.doorObjs["patioDoor"]),
            self.north_of(self.roomObjs["backyard"], self.roomObjs["driveway"])
        ]
        return facts

    @goal
    def goal(self):
        return [self.current(self.roomObjs["westRoom"])]

--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move south
You are in the driveway. To the North you see the backyard. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (or (not (door ?from ?to ?dir)) (open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (at backyard)
    (door backyard westRoom west)
    (door backyard driveway south)
  )
  (:goal (at westRoom))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @predicate(Room, Room)
    def north_of(self, r1, r2):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r1, r2):
        precond = [self.current(r1)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r1, d, r2):
        precond = [self.current(r1), self.open_door(d), self.door_west(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

### Python IR: problem class
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            self.current(self.roomObjs["driveway"]),
            self.door_west(self.doorObjs["westDoor"]),
            self.door_south(self.doorObjs["patioDoor"]),
            self.north_of(self.roomObjs["backyard"], self.roomObjs["driveway"])
        ]
        return facts

    @goal
    def goal(self):
        return [self.current(self.roomObjs["westRoom"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (or (not (door ?from ?to ?dir)) (open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (at driveway)
    (door driveway kitchen south)
    (door driveway westRoom west)
    (north_of backyard driveway)
  )
  (:goal (at westRoom))
)
Actions from solver: ['move south'] 
Raw plan text: (MOVE DRIVEWAY WESTROOM SOUTH)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 26 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 26
	#Fluents: 8
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[0 / 0]--
--[0 / 1]--
Total time: 8.09999e-05
Nodes generated during search: 6
Nodes expanded during search: 1
Plan found with cost: 1
Fast-BFS search completed in 8.09999e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_wa30hyrz/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 1 

Successful plans:
Value: 1
 /tmp/pddl_run_wa30hyrz/plan_tmp.txt 1

Current action_queue: ['move south'] 
> move south 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: move south. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status. 

----Larger Loop No. 1---- 
successful_actions: ['open door to south', 'move south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: move south
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @predicate(Room, Room)
    def north_of(self, r1, r2):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r1, r2):
        precond = [self.current(r1)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r1, d, r2):
        precond = [self.current(r1), self.open_door(d), self.door_west(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

[py_problem]
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            self.current(self.roomObjs["driveway"]),
            self.door_west(self.doorObjs["westDoor"]),
            self.door_south(self.doorObjs["patioDoor"]),
            self.north_of(self.roomObjs["backyard"], self.roomObjs["driveway"])
        ]
        return facts

    @goal
    def goal(self):
        return [self.current(self.roomObjs["westRoom"])]

### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (or (not (door ?from ?to ?dir)) (open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (at driveway)
    (door driveway kitchen south)
    (door driveway westRoom west)
    (north_of backyard driveway)
  )
  (:goal (at westRoom))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: move south. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @predicate(Room, Room)
    def north_of(self, r1, r2):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    # Updated move_south action to include door precondition since a door exists to the south
    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.current(from_room), self.door_south(door), self.open_door(door)]
        effect = [~self.current(from_room), self.current(to_room), self.visited(to_room)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r1, d, r2):
        precond = [self.current(r1), self.open_door(d), self.door_west(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect

Generated py_problem:
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            self.current(self.roomObjs["driveway"]),
            self.door_west(self.doorObjs["westDoor"]),
            self.door_south(self.doorObjs["patioDoor"]),
            self.north_of(self.roomObjs["backyard"], self.roomObjs["driveway"])
        ]
        return facts

    @goal
    def goal(self):
        return [self.current(self.roomObjs["westRoom"])]


--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move south
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (or (not (door ?from ?to ?dir)) (open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (at driveway)
    (door driveway kitchen south)
    (door driveway westRoom west)
    (north_of backyard driveway)
  )
  (:goal (at westRoom))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: move south. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @predicate(Room, Room)
    def north_of(self, r1, r2):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    # Updated move_south action to include door precondition since a door exists to the south
    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.current(from_room), self.door_south(door), self.open_door(door)]
        effect = [~self.current(from_room), self.current(to_room), self.visited(to_room)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r1, d, r2):
        precond = [self.current(r1), self.open_door(d), self.door_west(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect


### Python IR: problem class
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            self.current(self.roomObjs["driveway"]),
            self.door_west(self.doorObjs["westDoor"]),
            self.door_south(self.doorObjs["patioDoor"]),
            self.north_of(self.roomObjs["backyard"], self.roomObjs["driveway"])
        ]
        return facts

    @goal
    def goal(self):
        return [self.current(self.roomObjs["westRoom"])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (or (not (door ?from ?to ?dir)) (open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (at driveway)
    (door driveway kitchen south)
    (door driveway westRoom west)
    (north_of backyard driveway)
  )
  (:goal (at westRoom))
)
Actions from solver: ['move south'] 
Raw plan text: (MOVE DRIVEWAY WESTROOM SOUTH)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 28 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 28
	#Fluents: 9
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[0 / 0]--
--[0 / 2]--
Total time: 0.000101
Nodes generated during search: 6
Nodes expanded during search: 1
Plan found with cost: 1
Fast-BFS search completed in 0.000101 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_5fq3_np4/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 1 

Successful plans:
Value: 1
 /tmp/pddl_run_5fq3_np4/plan_tmp.txt 1

Current action_queue: ['move south'] 
> move south 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: move south. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status. 

----Larger Loop No. 2---- 
successful_actions: ['open door to south', 'move south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: move south
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @predicate(Room, Room)
    def north_of(self, r1, r2):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    # Updated move_south action to include door precondition since a door exists to the south
    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.current(from_room), self.door_south(door), self.open_door(door)]
        effect = [~self.current(from_room), self.current(to_room), self.visited(to_room)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r1, d, r2):
        precond = [self.current(r1), self.open_door(d), self.door_west(d)]
        effect = [~self.current(r1), self.current(r2), self.visited(r2)]
        return precond, effect


[py_problem]
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            self.current(self.roomObjs["driveway"]),
            self.door_west(self.doorObjs["westDoor"]),
            self.door_south(self.doorObjs["patioDoor"]),
            self.north_of(self.roomObjs["backyard"], self.roomObjs["driveway"])
        ]
        return facts

    @goal
    def goal(self):
        return [self.current(self.roomObjs["westRoom"])]


### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (or (not (door ?from ?to ?dir)) (open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (at driveway)
    (door driveway kitchen south)
    (door driveway westRoom west)
    (north_of backyard driveway)
  )
  (:goal (at westRoom))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: move south. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @predicate(Room, Room)
    def north_of(self, r1, r2):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    # The move_south action requires that the door to the south is open.
    # Feedback indicates that attempting to move south without opening the door will fail.
    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.current(from_room), self.door_south(door), self.open_door(door)]
        effect = [~self.current(from_room), self.current(to_room), self.visited(to_room)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [self.current(from_room), self.door_west(door), self.open_door(door)]
        effect = [~self.current(from_room), self.current(to_room), self.visited(to_room)]
        return precond, effect
Generated py_problem:
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            self.current(self.roomObjs["driveway"]),
            self.door_west(self.doorObjs["westDoor"]),
            self.door_south(self.doorObjs["patioDoor"]),
            self.north_of(self.roomObjs["backyard"], self.roomObjs["driveway"])
        ]
        return facts

    @goal
    def goal(self):
        # The goal remains to be in a location that has not been visited yet
        return [self.current(self.roomObjs["westRoom"])]


--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move south
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (or (not (door ?from ?to ?dir)) (open ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (at driveway)
    (door driveway kitchen south)
    (door driveway westRoom west)
    (north_of backyard driveway)
  )
  (:goal (at westRoom))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: move south. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @predicate(Room, Room)
    def north_of(self, r1, r2):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    # The move_south action requires that the door to the south is open.
    # Feedback indicates that attempting to move south without opening the door will fail.
    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.current(from_room), self.door_south(door), self.open_door(door)]
        effect = [~self.current(from_room), self.current(to_room), self.visited(to_room)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [self.current(from_room), self.door_west(door), self.open_door(door)]
        effect = [~self.current(from_room), self.current(to_room), self.visited(to_room)]
        return precond, effect

### Python IR: problem class
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            self.current(self.roomObjs["driveway"]),
            self.door_west(self.doorObjs["westDoor"]),
            self.door_south(self.doorObjs["patioDoor"]),
            self.north_of(self.roomObjs["backyard"], self.roomObjs["driveway"])
        ]
        return facts

    @goal
    def goal(self):
        # The goal remains to be in a location that has not been visited yet
        return [self.current(self.roomObjs["westRoom"])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (door ?from ?to ?dir) (open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (at driveway)
    (door driveway kitchen south)
    (door driveway westRoom west)
    (north_of backyard driveway)
  )
  (:goal (at westRoom))
)
Actions from solver: ['open door to west', 'move west'] 
Raw plan text: (OPEN-DOOR DRIVEWAY WESTROOM WEST)
(MOVE DRIVEWAY WESTROOM WEST)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 4
	#Fluents: 8
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[0 / 0]--
--[0 / 3]--
Total time: 0.000134
Nodes generated during search: 6
Nodes expanded during search: 3
Plan found with cost: 2
Fast-BFS search completed in 0.000134 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_5oxylrc3/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 2 

Successful plans:
Value: 2
 /tmp/pddl_run_5oxylrc3/plan_tmp.txt 2

Current action_queue: ['open door to west', 'move west'] 
> open door to west 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: open door to west. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.
 

----Larger Loop No. 3---- 
successful_actions: ['open door to south', 'move south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: open door to west
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @predicate(Room, Room)
    def north_of(self, r1, r2):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    # The move_south action requires that the door to the south is open.
    # Feedback indicates that attempting to move south without opening the door will fail.
    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.current(from_room), self.door_south(door), self.open_door(door)]
        effect = [~self.current(from_room), self.current(to_room), self.visited(to_room)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [self.current(from_room), self.door_west(door), self.open_door(door)]
        effect = [~self.current(from_room), self.current(to_room), self.visited(to_room)]
        return precond, effect

[py_problem]
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            self.current(self.roomObjs["driveway"]),
            self.door_west(self.doorObjs["westDoor"]),
            self.door_south(self.doorObjs["patioDoor"]),
            self.north_of(self.roomObjs["backyard"], self.roomObjs["driveway"])
        ]
        return facts

    @goal
    def goal(self):
        # The goal remains to be in a location that has not been visited yet
        return [self.current(self.roomObjs["westRoom"])]


### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :typing :strips)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (door ?from ?to ?dir) (open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (at driveway)
    (door driveway kitchen south)
    (door driveway westRoom west)
    (north_of backyard driveway)
  )
  (:goal (at westRoom))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: open door to west. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @predicate(Room, Room)
    def north_of(self, r1, r2):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.current(from_room), self.door_south(door), self.open_door(door)]
        effect = [~self.current(from_room), self.current(to_room), self.visited(to_room)]
        return precond, effect

    # Updated move_west action to allow direct movement when there is no door
    @action(Room, Room)
    def move_west(self, from_room, to_room):
        precond = [self.current(from_room)]
        effect = [~self.current(from_room), self.current(to_room), self.visited(to_room)]
        return precond, effect

Generated py_problem:
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            self.current(self.roomObjs["driveway"]),
            self.door_south(self.doorObjs["patioDoor"]),
            self.north_of(self.roomObjs["backyard"], self.roomObjs["driveway"])
        ]
        return facts

    @goal
    def goal(self):
        return [self.current(self.roomObjs["westRoom"])]


--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: open door to west
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :strips)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (door ?from ?to ?dir) (open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (at driveway)
    (door driveway kitchen south)
    (door driveway westRoom west)
    (north_of backyard driveway)
  )
  (:goal (at westRoom))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: open door to west. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @predicate(Room, Room)
    def north_of(self, r1, r2):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.current(from_room), self.door_south(door), self.open_door(door)]
        effect = [~self.current(from_room), self.current(to_room), self.visited(to_room)]
        return precond, effect

    # Updated move_west action to allow direct movement when there is no door
    @action(Room, Room)
    def move_west(self, from_room, to_room):
        precond = [self.current(from_room)]
        effect = [~self.current(from_room), self.current(to_room), self.visited(to_room)]
        return precond, effect


### Python IR: problem class
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            self.current(self.roomObjs["driveway"]),
            self.door_south(self.doorObjs["patioDoor"]),
            self.north_of(self.roomObjs["backyard"], self.roomObjs["driveway"])
        ]
        return facts

    @goal
    def goal(self):
        return [self.current(self.roomObjs["westRoom"])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions :equality)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
                    (at ?from)
                    (or
                      (and (= ?dir south) (door ?from ?to ?dir) (open ?from ?to ?dir))
                      (and (= ?dir west) (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                                             (not (door ?from ?to ?dir))))
                    )
                  )
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (at driveway)
    (door driveway kitchen south)
    (north_of backyard driveway)
  )
  (:goal (at westRoom))
)
Actions from solver: ['move west'] 
Raw plan text: (MOVE DRIVEWAY WESTROOM WEST)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 15 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 15
	#Fluents: 7
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[0 / 0]--
--[0 / 2]--
Total time: 0.000114
Nodes generated during search: 5
Nodes expanded during search: 1
Plan found with cost: 1
Fast-BFS search completed in 0.000114 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_z1k0lo9i/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 1 

Successful plans:
Value: 1
 /tmp/pddl_run_z1k0lo9i/plan_tmp.txt 1

Current action_queue: ['move west'] 
> move west 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: move west. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status. 

----Larger Loop No. 4---- 
successful_actions: ['open door to south', 'move south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: move west
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @predicate(Room, Room)
    def north_of(self, r1, r2):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.current(from_room), self.door_south(door), self.open_door(door)]
        effect = [~self.current(from_room), self.current(to_room), self.visited(to_room)]
        return precond, effect

    # Updated move_west action to allow direct movement when there is no door
    @action(Room, Room)
    def move_west(self, from_room, to_room):
        precond = [self.current(from_room)]
        effect = [~self.current(from_room), self.current(to_room), self.visited(to_room)]
        return precond, effect


[py_problem]
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            self.current(self.roomObjs["driveway"]),
            self.door_south(self.doorObjs["patioDoor"]),
            self.north_of(self.roomObjs["backyard"], self.roomObjs["driveway"])
        ]
        return facts

    @goal
    def goal(self):
        return [self.current(self.roomObjs["westRoom"])]


### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions :equality)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
                    (at ?from)
                    (or
                      (and (= ?dir south) (door ?from ?to ?dir) (open ?from ?to ?dir))
                      (and (= ?dir west) (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                                             (not (door ?from ?to ?dir))))
                    )
                  )
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (at driveway)
    (door driveway kitchen south)
    (north_of backyard driveway)
  )
  (:goal (at westRoom))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: move west. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @predicate(Room, Room)
    def north_of(self, r1, r2):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.current(from_room), self.door_south(door), self.open_door(door)]
        effect = [~self.current(from_room), self.current(to_room), self.visited(to_room)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [self.current(from_room), self.door_west(door), self.open_door(door)]
        effect = [~self.current(from_room), self.current(to_room), self.visited(to_room)]
        return precond, effect

Generated py_problem:
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            self.current(self.roomObjs["driveway"]),
            self.door_south(self.doorObjs["patioDoor"]),
            self.door_west(self.doorObjs["westDoor"]),
            self.north_of(self.roomObjs["backyard"], self.roomObjs["driveway"])
        ]
        return facts

    @goal
    def goal(self):
        return [self.current(self.roomObjs["westRoom"])]


--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move west
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions :equality)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and
                    (at ?from)
                    (or
                      (and (= ?dir south) (door ?from ?to ?dir) (open ?from ?to ?dir))
                      (and (= ?dir west) (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                                             (not (door ?from ?to ?dir))))
                    )
                  )
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (at driveway)
    (door driveway kitchen south)
    (north_of backyard driveway)
  )
  (:goal (at westRoom))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: move west. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def current(self, r):
        pass

    @predicate(Room)
    def visited(self, r):
        pass

    @predicate(Door)
    def open_door(self, d):
        pass

    @predicate(Door)
    def door_south(self, d):
        pass

    @predicate(Door)
    def door_west(self, d):
        pass

    @predicate(Room, Room)
    def north_of(self, r1, r2):
        pass

    @action(Door)
    def open_door_to_south(self, d):
        precond = [self.door_south(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, d):
        precond = [self.door_south(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, d):
        precond = [self.door_west(d), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, d):
        precond = [self.door_west(d), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.current(from_room), self.door_south(door), self.open_door(door)]
        effect = [~self.current(from_room), self.current(to_room), self.visited(to_room)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [self.current(from_room), self.door_west(door), self.open_door(door)]
        effect = [~self.current(from_room), self.current(to_room), self.visited(to_room)]
        return precond, effect


### Python IR: problem class
from py2pddl import goal, init

class ProblemExploration(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "westRoom"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patioDoor", "drivewayDoor", "westDoor"])

    @init
    def init(self):
        facts = [
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            self.current(self.roomObjs["driveway"]),
            self.door_south(self.doorObjs["patioDoor"]),
            self.door_west(self.doorObjs["westDoor"]),
            self.north_of(self.roomObjs["backyard"], self.roomObjs["driveway"])
        ]
        return facts

    @goal
    def goal(self):
        return [self.current(self.roomObjs["westRoom"])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips :negative-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (visited ?loc - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (door ?from ?to ?dir) (open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)


[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway westRoom - location
    south west - direction
  )
  (:init
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (at driveway)
    (door driveway kitchen south)
    (door driveway westRoom west)
    (north_of backyard driveway)
  )
  (:goal (at westRoom))
)

Actions from solver: ['open door to west', 'move west'] 
Raw plan text: (OPEN-DOOR DRIVEWAY WESTROOM WEST)
(MOVE DRIVEWAY WESTROOM WEST)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 4
	#Fluents: 8
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[0 / 0]--
--[0 / 3]--
Total time: 0.000139
Nodes generated during search: 6
Nodes expanded during search: 3
Plan found with cost: 2
Fast-BFS search completed in 0.000139 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_piryug2u/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 2 

Successful plans:
Value: 2
 /tmp/pddl_run_piryug2u/plan_tmp.txt 2

Current action_queue: ['open door to west', 'move west'] 
> open door to west 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: open door to west. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.
 
