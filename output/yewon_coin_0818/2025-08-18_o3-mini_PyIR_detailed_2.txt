Observations: You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. 
To the South you see a closed patio door. To the West you see a closed plain door.  
Gold path: ['look around', 'open door to south', 'open door to west', 'move west', 'move east', 'move west', 'move east', 'move south', 'open door to west', 'move north', 'move south', 'move north', 'move south', 'move east', 'open door to north', 'move north', 'take coin'] 
Valid Actions: ['look around', 'close door to west', 'move west', 'open door to south', 'open door to west', 'inventory', 'move south', 'close door to south'] 
taskDescription: Your task is to search the environment and find the coin.  Once you find the coin, take it. 
brief_obs: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 
 


====Step 0==== 

----Larger Loop No. 0---- 
successful_actions: [] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    # Define types for rooms, doors, and directions
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    # Predicate to denote the current room of the agent
    @predicate(Room)
    def at(self, room):
        pass

    # Predicate to denote that a door is open
    @predicate(Door)
    def door_open(self, door):
        pass

    # Predicate to denote the direction a door is facing
    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    # Predicate to denote that a door connects two rooms
    @predicate(Room, Door, Room)
    def connected(self, room_from, door, room_to):
        pass

    # Action: Open the door that is to the south
    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    # Action: Open the door that is to the west
    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    # Action: Close the door that is to the south
    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    # Action: Close the door that is to the west
    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    # Action: Move from the current room to a new room through a south-facing door
    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.at(from_room), self.door_open(door), self.facing(door, "south"), self.connected(from_room, door, to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    # Action: Move from the current room to a new room through a west-facing door
    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [self.at(from_room), self.door_open(door), self.facing(door, "west"), self.connected(from_room, door, to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect
Generated py_problem:
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        # Create room objects: the observed kitchen and the rooms behind the doors
        self.roomObjs = DomainExploration.Room.create_objs(["kitchen", "patio", "room_west"])
        # Create door objects as observed
        self.doorObjs = DomainExploration.Door.create_objs(["patio_door", "plain_door"])
        # Create direction objects for south and west
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            # Agent starts in the kitchen
            self.at(self.roomObjs["kitchen"]),
            # Define door orientations
            self.facing(self.doorObjs["patio_door"], self.directionObjs["south"]),
            self.facing(self.doorObjs["plain_door"], self.directionObjs["west"]),
            # Define connections: each door connects the kitchen to a new room
            self.connected(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.roomObjs["patio"]),
            self.connected(self.roomObjs["kitchen"], self.doorObjs["plain_door"], self.roomObjs["room_west"])
        ]
        return state

    @goal
    def goal(self):
        # Goal: move to a room that is not the kitchen (here, we choose the patio)
        return [self.at(self.roomObjs["patio"])]

--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
N/A

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    # Define types for rooms, doors, and directions
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    # Predicate to denote the current room of the agent
    @predicate(Room)
    def at(self, room):
        pass

    # Predicate to denote that a door is open
    @predicate(Door)
    def door_open(self, door):
        pass

    # Predicate to denote the direction a door is facing
    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    # Predicate to denote that a door connects two rooms
    @predicate(Room, Door, Room)
    def connected(self, room_from, door, room_to):
        pass

    # Action: Open the door that is to the south
    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    # Action: Open the door that is to the west
    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    # Action: Close the door that is to the south
    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    # Action: Close the door that is to the west
    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    # Action: Move from the current room to a new room through a south-facing door
    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.at(from_room), self.door_open(door), self.facing(door, "south"), self.connected(from_room, door, to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    # Action: Move from the current room to a new room through a west-facing door
    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [self.at(from_room), self.door_open(door), self.facing(door, "west"), self.connected(from_room, door, to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

### Python IR: problem class
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        # Create room objects: the observed kitchen and the rooms behind the doors
        self.roomObjs = DomainExploration.Room.create_objs(["kitchen", "patio", "room_west"])
        # Create door objects as observed
        self.doorObjs = DomainExploration.Door.create_objs(["patio_door", "plain_door"])
        # Create direction objects for south and west
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            # Agent starts in the kitchen
            self.at(self.roomObjs["kitchen"]),
            # Define door orientations
            self.facing(self.doorObjs["patio_door"], self.directionObjs["south"]),
            self.facing(self.doorObjs["plain_door"], self.directionObjs["west"]),
            # Define connections: each door connects the kitchen to a new room
            self.connected(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.roomObjs["patio"]),
            self.connected(self.roomObjs["kitchen"], self.doorObjs["plain_door"], self.roomObjs["room_west"])
        ]
        return state

    @goal
    def goal(self):
        # Goal: move to a room that is not the kitchen (here, we choose the patio)
        return [self.at(self.roomObjs["patio"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :negative-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connected ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen patio room_west - location
    south west - direction
  )
  (:init
    (at kitchen)
    (connected kitchen patio south)
    (connected kitchen room_west west)
  )
  (:goal (at patio))
)
Actions from solver: ['open door to south', 'move south'] 
Raw plan text: (OPEN-DOOR KITCHEN PATIO SOUTH)
(MOVE KITCHEN PATIO SOUTH)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 4
	#Fluents: 7
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[0 / 0]--
--[0 / 2]--
Total time: 0.000124
Nodes generated during search: 5
Nodes expanded during search: 2
Plan found with cost: 2
Fast-BFS search completed in 0.000124 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_o5xq1yvg/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 2 

Successful plans:
Value: 2
 /tmp/pddl_run_o5xq1yvg/plan_tmp.txt 2

Current action_queue: ['open door to south', 'move south'] 
> open door to south 
 You open the patio door, revealing the backyard.  
Small Loop, action_queue: ['move south'] 
Current action_queue: ['move south'] 
> move south 
 You are in the backyard. In one part of the room you see a barbeque. There is also a workbench, that has nothing on it. You also see a patio chair, that has nothing on it. In another part of the room you see a patio table, that has nothing on it. In one part of the room you see a clothes line, that has nothing on it. There is also a garden, that has nothing on it. 
Through an open patio door, to the North you see the kitchen. To the South you see the driveway. To the East you see the street. To the West you see a closed patio door.  


====Step 1==== 

----Larger Loop No. 0---- 
successful_actions: ['open door to south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: open door to south
You open the patio door, revealing the backyard. 

Action: move south
You are in the backyard. Through an open patio door, to the North you see the kitchen. To the South you see the driveway. To the East you see the street. To the West you see a closed patio door. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    # Define types for rooms, doors, and directions
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    # Predicate to denote the current room of the agent
    @predicate(Room)
    def at(self, room):
        pass

    # Predicate to denote that a door is open
    @predicate(Door)
    def door_open(self, door):
        pass

    # Predicate to denote the direction a door is facing
    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    # Predicate to denote that a door connects two rooms
    @predicate(Room, Door, Room)
    def connected(self, room_from, door, room_to):
        pass

    # Action: Open the door that is to the south
    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    # Action: Open the door that is to the west
    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    # Action: Close the door that is to the south
    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    # Action: Close the door that is to the west
    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    # Action: Move from the current room to a new room through a south-facing door
    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.at(from_room), self.door_open(door), self.facing(door, "south"), self.connected(from_room, door, to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    # Action: Move from the current room to a new room through a west-facing door
    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [self.at(from_room), self.door_open(door), self.facing(door, "west"), self.connected(from_room, door, to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

[py_problem]
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        # Create room objects: the observed kitchen and the rooms behind the doors
        self.roomObjs = DomainExploration.Room.create_objs(["kitchen", "patio", "room_west"])
        # Create door objects as observed
        self.doorObjs = DomainExploration.Door.create_objs(["patio_door", "plain_door"])
        # Create direction objects for south and west
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            # Agent starts in the kitchen
            self.at(self.roomObjs["kitchen"]),
            # Define door orientations
            self.facing(self.doorObjs["patio_door"], self.directionObjs["south"]),
            self.facing(self.doorObjs["plain_door"], self.directionObjs["west"]),
            # Define connections: each door connects the kitchen to a new room
            self.connected(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.roomObjs["patio"]),
            self.connected(self.roomObjs["kitchen"], self.doorObjs["plain_door"], self.roomObjs["room_west"])
        ]
        return state

    @goal
    def goal(self):
        # Goal: move to a room that is not the kitchen (here, we choose the patio)
        return [self.at(self.roomObjs["patio"])]

### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :typing :negative-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connected ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen patio room_west - location
    south west - direction
  )
  (:init
    (at kitchen)
    (connected kitchen patio south)
    (connected kitchen room_west west)
  )
  (:goal (at patio))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
N/A

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    # Define types for rooms, doors, and directions
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    # Predicate that denotes the current room of the agent
    @predicate(Room)
    def at(self, room):
        pass

    # Predicate that denotes whether a door is open
    @predicate(Door)
    def door_open(self, door):
        pass

    # Predicate that denotes the facing direction of a door
    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    # Predicate that denotes that a door connects two rooms
    @predicate(Room, Door, Room)
    def connected(self, room_from, door, room_to):
        pass

    # Action: Open a door that is to the south (e.g. the patio door from kitchen to backyard)
    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    # Action: Open a door that is to the west
    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    # Action: Close a south facing door
    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    # Action: Close a west facing door
    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    # Action: Move from one room to another through a south-facing open door
    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.at(from_room), self.door_open(door), self.facing(door, "south"), self.connected(from_room, door, to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    # Action: Move from one room to another through a west-facing open door
    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [self.at(from_room), self.door_open(door), self.facing(door, "west"), self.connected(from_room, door, to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect
Generated py_problem:
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        # Define room objects based on current observations
        # Rooms: kitchen, backyard (current location), driveway, and a room to the west (behind a closed door)
        self.roomObjs = DomainExploration.Room.create_objs(["kitchen", "backyard", "driveway", "room_west"])
        
        # Define door objects for the observed connections
        # 'patio_door' connects kitchen and backyard (and is open),
        # 'driveway_door' connects backyard and driveway, and
        # 'west_door' connects backyard and room_west (currently closed)
        self.doorObjs = DomainExploration.Door.create_objs(["patio_door", "driveway_door", "west_door"])
        
        # Define direction objects for south and west
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            # Agent is now in the backyard after moving south
            self.at(self.roomObjs["backyard"]),
            
            # The patio door from kitchen to backyard is open
            self.door_open(self.doorObjs["patio_door"]),
            
            # Define door orientations
            self.facing(self.doorObjs["patio_door"], self.directionObjs["south"]),
            self.facing(self.doorObjs["driveway_door"], self.directionObjs["south"]),
            self.facing(self.doorObjs["west_door"], self.directionObjs["west"]),
            
            # Define connections between rooms
            self.connected(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.roomObjs["backyard"]),
            self.connected(self.roomObjs["backyard"], self.doorObjs["driveway_door"], self.roomObjs["driveway"]),
            self.connected(self.roomObjs["backyard"], self.doorObjs["west_door"], self.roomObjs["room_west"])
        ]
        return state

    @goal
    def goal(self):
        # Goal: Explore a new area. Here, the target is the driveway (an unvisited location).
        return [self.at(self.roomObjs["driveway"])]

--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: open door to south
You open the patio door, revealing the backyard. 

Action: move south
You are in the backyard. Through an open patio door, to the North you see the kitchen. To the South you see the driveway. To the East you see the street. To the West you see a closed patio door. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :negative-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connected ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen patio room_west - location
    south west - direction
  )
  (:init
    (at kitchen)
    (connected kitchen patio south)
    (connected kitchen room_west west)
  )
  (:goal (at patio))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    # Define types for rooms, doors, and directions
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    # Predicate that denotes the current room of the agent
    @predicate(Room)
    def at(self, room):
        pass

    # Predicate that denotes whether a door is open
    @predicate(Door)
    def door_open(self, door):
        pass

    # Predicate that denotes the facing direction of a door
    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    # Predicate that denotes that a door connects two rooms
    @predicate(Room, Door, Room)
    def connected(self, room_from, door, room_to):
        pass

    # Action: Open a door that is to the south (e.g. the patio door from kitchen to backyard)
    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    # Action: Open a door that is to the west
    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    # Action: Close a south facing door
    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    # Action: Close a west facing door
    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    # Action: Move from one room to another through a south-facing open door
    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.at(from_room), self.door_open(door), self.facing(door, "south"), self.connected(from_room, door, to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    # Action: Move from one room to another through a west-facing open door
    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [self.at(from_room), self.door_open(door), self.facing(door, "west"), self.connected(from_room, door, to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

### Python IR: problem class
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        # Define room objects based on current observations
        # Rooms: kitchen, backyard (current location), driveway, and a room to the west (behind a closed door)
        self.roomObjs = DomainExploration.Room.create_objs(["kitchen", "backyard", "driveway", "room_west"])
        
        # Define door objects for the observed connections
        # 'patio_door' connects kitchen and backyard (and is open),
        # 'driveway_door' connects backyard and driveway, and
        # 'west_door' connects backyard and room_west (currently closed)
        self.doorObjs = DomainExploration.Door.create_objs(["patio_door", "driveway_door", "west_door"])
        
        # Define direction objects for south and west
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            # Agent is now in the backyard after moving south
            self.at(self.roomObjs["backyard"]),
            
            # The patio door from kitchen to backyard is open
            self.door_open(self.doorObjs["patio_door"]),
            
            # Define door orientations
            self.facing(self.doorObjs["patio_door"], self.directionObjs["south"]),
            self.facing(self.doorObjs["driveway_door"], self.directionObjs["south"]),
            self.facing(self.doorObjs["west_door"], self.directionObjs["west"]),
            
            # Define connections between rooms
            self.connected(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.roomObjs["backyard"]),
            self.connected(self.roomObjs["backyard"], self.doorObjs["driveway_door"], self.roomObjs["driveway"]),
            self.connected(self.roomObjs["backyard"], self.doorObjs["west_door"], self.roomObjs["room_west"])
        ]
        return state

    @goal
    def goal(self):
        # Goal: Explore a new area. Here, the target is the driveway (an unvisited location).
        return [self.at(self.roomObjs["driveway"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :negative-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connected ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway room_west - location
    south west - direction
  )
  (:init
    (at backyard)
    (connected kitchen backyard south)
    (connected backyard driveway south)
    (connected backyard room_west west)
    (door_open kitchen backyard south)
  )
  (:goal (at driveway))
)
Actions from solver: ['open door to south', 'move south'] 
Raw plan text: (OPEN-DOOR BACKYARD DRIVEWAY SOUTH)
(MOVE BACKYARD DRIVEWAY SOUTH)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 4
	#Fluents: 7
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[0 / 0]--
--[0 / 2]--
Total time: 0.000128
Nodes generated during search: 5
Nodes expanded during search: 2
Plan found with cost: 2
Fast-BFS search completed in 0.000128 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_zm4nmhuo/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 2 

Successful plans:
Value: 2
 /tmp/pddl_run_zm4nmhuo/plan_tmp.txt 2

Current action_queue: ['open door to south', 'move south'] 
> open door to south 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.
 

----Larger Loop No. 1---- 
successful_actions: ['open door to south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: open door to south
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    # Define types for rooms, doors, and directions
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    # Predicate that denotes the current room of the agent
    @predicate(Room)
    def at(self, room):
        pass

    # Predicate that denotes whether a door is open
    @predicate(Door)
    def door_open(self, door):
        pass

    # Predicate that denotes the facing direction of a door
    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    # Predicate that denotes that a door connects two rooms
    @predicate(Room, Door, Room)
    def connected(self, room_from, door, room_to):
        pass

    # Action: Open a door that is to the south (e.g. the patio door from kitchen to backyard)
    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    # Action: Open a door that is to the west
    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    # Action: Close a south facing door
    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    # Action: Close a west facing door
    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    # Action: Move from one room to another through a south-facing open door
    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.at(from_room), self.door_open(door), self.facing(door, "south"), self.connected(from_room, door, to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    # Action: Move from one room to another through a west-facing open door
    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [self.at(from_room), self.door_open(door), self.facing(door, "west"), self.connected(from_room, door, to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

[py_problem]
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        # Define room objects based on current observations
        # Rooms: kitchen, backyard (current location), driveway, and a room to the west (behind a closed door)
        self.roomObjs = DomainExploration.Room.create_objs(["kitchen", "backyard", "driveway", "room_west"])
        
        # Define door objects for the observed connections
        # 'patio_door' connects kitchen and backyard (and is open),
        # 'driveway_door' connects backyard and driveway, and
        # 'west_door' connects backyard and room_west (currently closed)
        self.doorObjs = DomainExploration.Door.create_objs(["patio_door", "driveway_door", "west_door"])
        
        # Define direction objects for south and west
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            # Agent is now in the backyard after moving south
            self.at(self.roomObjs["backyard"]),
            
            # The patio door from kitchen to backyard is open
            self.door_open(self.doorObjs["patio_door"]),
            
            # Define door orientations
            self.facing(self.doorObjs["patio_door"], self.directionObjs["south"]),
            self.facing(self.doorObjs["driveway_door"], self.directionObjs["south"]),
            self.facing(self.doorObjs["west_door"], self.directionObjs["west"]),
            
            # Define connections between rooms
            self.connected(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.roomObjs["backyard"]),
            self.connected(self.roomObjs["backyard"], self.doorObjs["driveway_door"], self.roomObjs["driveway"]),
            self.connected(self.roomObjs["backyard"], self.doorObjs["west_door"], self.roomObjs["room_west"])
        ]
        return state

    @goal
    def goal(self):
        # Goal: Explore a new area. Here, the target is the driveway (an unvisited location).
        return [self.at(self.roomObjs["driveway"])]

### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :typing :negative-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connected ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway room_west - location
    south west - direction
  )
  (:init
    (at backyard)
    (connected kitchen backyard south)
    (connected backyard driveway south)
    (connected backyard room_west west)
    (door_open kitchen backyard south)
  )
  (:goal (at driveway))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    # Define types for rooms, doors, and directions
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    # Predicate: agent is at a given room
    @predicate(Room)
    def at(self, room):
        pass

    # Predicate: a door is open
    @predicate(Door)
    def door_open(self, door):
        pass

    # Predicate: a door is facing a particular direction
    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    # Predicate: a door connects two rooms (used for door-mediated movement)
    @predicate(Room, Door, Room)
    def connected(self, from_room, door, to_room):
        pass

    # Predicate: the path from a room in a given direction is clear (i.e. no door exists)
    @predicate(Room, Direction)
    def clear_path(self, room, direction):
        pass

    # Predicate: a direct connection from one room to a neighboring room in a given direction
    @predicate(Room, Direction, Room)
    def connected_direct(self, room, direction, to_room):
        pass

    # Action: attempt to open a door facing south
    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    # Action: attempt to open a door facing west
    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    # Action: close a south facing door
    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    # Action: close a west facing door
    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    # Action: move directly to the south when no door is present
    @action(Room, Room)
    def move_south(self, from_room, to_room):
        precond = [
            self.at(from_room),
            self.clear_path(from_room, "south"),
            self.connected_direct(from_room, "south", to_room)
        ]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    # Action: move to the west through an open door
    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [
            self.at(from_room),
            self.door_open(door),
            self.facing(door, "west"),
            self.connected(from_room, door, to_room)
        ]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

Generated py_problem:
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        # Define room objects: current location (backyard) and two neighboring rooms
        self.roomObjs = DomainExploration.Room.create_objs(["backyard", "room_south", "room_west"])
        
        # Define door objects only for the west direction (south door does not exist)
        self.doorObjs = DomainExploration.Door.create_objs(["west_door"])
        
        # Define direction objects for south and west
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            # Agent starts in the backyard
            self.at(self.roomObjs["backyard"]),
            
            # For west movement: door exists but is initially closed
            self.facing(self.doorObjs["west_door"], self.directionObjs["west"]),
            self.connected(self.roomObjs["backyard"], self.doorObjs["west_door"], self.roomObjs["room_west"]),
            
            # For south movement: no door exists so the path is clear
            self.clear_path(self.roomObjs["backyard"], self.directionObjs["south"]),
            self.connected_direct(self.roomObjs["backyard"], self.directionObjs["south"], self.roomObjs["room_south"])
        ]
        return state

    @goal
    def goal(self):
        # Goal is to reach the unvisited room to the south
        return [self.at(self.roomObjs["room_south"])]


--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: open door to south
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :negative-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connected ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway room_west - location
    south west - direction
  )
  (:init
    (at backyard)
    (connected kitchen backyard south)
    (connected backyard driveway south)
    (connected backyard room_west west)
    (door_open kitchen backyard south)
  )
  (:goal (at driveway))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    # Define types for rooms, doors, and directions
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    # Predicate: agent is at a given room
    @predicate(Room)
    def at(self, room):
        pass

    # Predicate: a door is open
    @predicate(Door)
    def door_open(self, door):
        pass

    # Predicate: a door is facing a particular direction
    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    # Predicate: a door connects two rooms (used for door-mediated movement)
    @predicate(Room, Door, Room)
    def connected(self, from_room, door, to_room):
        pass

    # Predicate: the path from a room in a given direction is clear (i.e. no door exists)
    @predicate(Room, Direction)
    def clear_path(self, room, direction):
        pass

    # Predicate: a direct connection from one room to a neighboring room in a given direction
    @predicate(Room, Direction, Room)
    def connected_direct(self, room, direction, to_room):
        pass

    # Action: attempt to open a door facing south
    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    # Action: attempt to open a door facing west
    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    # Action: close a south facing door
    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    # Action: close a west facing door
    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    # Action: move directly to the south when no door is present
    @action(Room, Room)
    def move_south(self, from_room, to_room):
        precond = [
            self.at(from_room),
            self.clear_path(from_room, "south"),
            self.connected_direct(from_room, "south", to_room)
        ]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    # Action: move to the west through an open door
    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [
            self.at(from_room),
            self.door_open(door),
            self.facing(door, "west"),
            self.connected(from_room, door, to_room)
        ]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect


### Python IR: problem class
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        # Define room objects: current location (backyard) and two neighboring rooms
        self.roomObjs = DomainExploration.Room.create_objs(["backyard", "room_south", "room_west"])
        
        # Define door objects only for the west direction (south door does not exist)
        self.doorObjs = DomainExploration.Door.create_objs(["west_door"])
        
        # Define direction objects for south and west
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            # Agent starts in the backyard
            self.at(self.roomObjs["backyard"]),
            
            # For west movement: door exists but is initially closed
            self.facing(self.doorObjs["west_door"], self.directionObjs["west"]),
            self.connected(self.roomObjs["backyard"], self.doorObjs["west_door"], self.roomObjs["room_west"]),
            
            # For south movement: no door exists so the path is clear
            self.clear_path(self.roomObjs["backyard"], self.directionObjs["south"]),
            self.connected_direct(self.roomObjs["backyard"], self.directionObjs["south"], self.roomObjs["room_south"])
        ]
        return state

    @goal
    def goal(self):
        # Goal is to reach the unvisited room to the south
        return [self.at(self.roomObjs["room_south"])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :negative-preconditions :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (clear_path ?loc - location ?dir - direction)
    (connected_direct ?loc - location ?dir - direction ?to - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (or (and (connected ?from ?to ?dir) (door_open ?from ?to ?dir))
                           (and (clear_path ?from ?dir) (connected_direct ?from ?dir ?to))
                       )
              )
    :effect (and (not (at ?from)) (at ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    backyard room_south room_west - location
    south west - direction
  )
  (:init
    (at backyard)
    (connected backyard room_west west)
    (clear_path backyard south)
    (connected_direct backyard south room_south)
  )
  (:goal (at room_south))
)
Actions from solver: ['move south'] 
Raw plan text: (MOVE BACKYARD ROOM_SOUTH SOUTH)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 3 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 3
	#Fluents: 5
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[0 / 0]--
--[0 / 1]--
Total time: 0.000101
Nodes generated during search: 3
Nodes expanded during search: 1
Plan found with cost: 1
Fast-BFS search completed in 0.000101 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_ain4rmcr/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 1 

Successful plans:
Value: 1
 /tmp/pddl_run_ain4rmcr/plan_tmp.txt 1

Current action_queue: ['move south'] 
> move south 
 You are in the driveway. 
To the North you see the backyard.  


====Step 2==== 

----Larger Loop No. 0---- 
successful_actions: ['open door to south', 'move south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: move south
You are in the driveway. To the North you see the backyard. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    # Define types for rooms, doors, and directions
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    # Predicate: agent is at a given room
    @predicate(Room)
    def at(self, room):
        pass

    # Predicate: a door is open
    @predicate(Door)
    def door_open(self, door):
        pass

    # Predicate: a door is facing a particular direction
    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    # Predicate: a door connects two rooms (used for door-mediated movement)
    @predicate(Room, Door, Room)
    def connected(self, from_room, door, to_room):
        pass

    # Predicate: the path from a room in a given direction is clear (i.e. no door exists)
    @predicate(Room, Direction)
    def clear_path(self, room, direction):
        pass

    # Predicate: a direct connection from one room to a neighboring room in a given direction
    @predicate(Room, Direction, Room)
    def connected_direct(self, room, direction, to_room):
        pass

    # Action: attempt to open a door facing south
    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    # Action: attempt to open a door facing west
    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    # Action: close a south facing door
    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    # Action: close a west facing door
    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    # Action: move directly to the south when no door is present
    @action(Room, Room)
    def move_south(self, from_room, to_room):
        precond = [
            self.at(from_room),
            self.clear_path(from_room, "south"),
            self.connected_direct(from_room, "south", to_room)
        ]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    # Action: move to the west through an open door
    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [
            self.at(from_room),
            self.door_open(door),
            self.facing(door, "west"),
            self.connected(from_room, door, to_room)
        ]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect


[py_problem]
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        # Define room objects: current location (backyard) and two neighboring rooms
        self.roomObjs = DomainExploration.Room.create_objs(["backyard", "room_south", "room_west"])
        
        # Define door objects only for the west direction (south door does not exist)
        self.doorObjs = DomainExploration.Door.create_objs(["west_door"])
        
        # Define direction objects for south and west
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            # Agent starts in the backyard
            self.at(self.roomObjs["backyard"]),
            
            # For west movement: door exists but is initially closed
            self.facing(self.doorObjs["west_door"], self.directionObjs["west"]),
            self.connected(self.roomObjs["backyard"], self.doorObjs["west_door"], self.roomObjs["room_west"]),
            
            # For south movement: no door exists so the path is clear
            self.clear_path(self.roomObjs["backyard"], self.directionObjs["south"]),
            self.connected_direct(self.roomObjs["backyard"], self.directionObjs["south"], self.roomObjs["room_south"])
        ]
        return state

    @goal
    def goal(self):
        # Goal is to reach the unvisited room to the south
        return [self.at(self.roomObjs["room_south"])]


### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :typing :negative-preconditions :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (clear_path ?loc - location ?dir - direction)
    (connected_direct ?loc - location ?dir - direction ?to - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (or (and (connected ?from ?to ?dir) (door_open ?from ?to ?dir))
                           (and (clear_path ?from ?dir) (connected_direct ?from ?dir ?to))
                       )
              )
    :effect (and (not (at ?from)) (at ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    backyard room_south room_west - location
    south west - direction
  )
  (:init
    (at backyard)
    (connected backyard room_west west)
    (clear_path backyard south)
    (connected_direct backyard south room_south)
  )
  (:goal (at room_south))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
N/A

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    @predicate(Room, Door, Room)
    def connected(self, from_room, door, to_room):
        pass

    @predicate(Room, Direction)
    def clear_path(self, room, direction):
        pass

    @predicate(Room, Direction, Room)
    def connected_direct(self, room, direction, to_room):
        pass

    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, from_room, to_room):
        precond = [self.at(from_room), self.clear_path(from_room, "south"), self.connected_direct(from_room, "south", to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [self.at(from_room), self.door_open(door), self.facing(door, "west"), self.connected(from_room, door, to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect
Generated py_problem:
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        # We update the room objects based on current observations.
        # Previously the agent was in 'backyard' and moved south into 'room_south'.
        # We now rename 'room_south' to 'driveway' to reflect: "You are in the driveway." 
        # Also, the valid domain actions include move_west (via a door) which will lead to an unvisited room 'room_west'.
        self.roomObjs = DomainExploration.Room.create_objs(["backyard", "driveway", "room_west"])
        self.doorObjs = DomainExploration.Door.create_objs(["west_door"])
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            # The agent executed move_south from backyard and is now in the driveway.
            self.at(self.roomObjs["driveway"]),
            # The clear path and direct connection from backyard (the previous location) to driveway
            # represent the effect of the move_south action (even though from the agent's current view,
            # backyard lies to the north of driveway).
            self.clear_path(self.roomObjs["backyard"], self.directionObjs["south"]),
            self.connected_direct(self.roomObjs["backyard"], self.directionObjs["south"], self.roomObjs["driveway"]),
            # The door to the west is available from the driveway leading to a new, unvisited room
            self.facing(self.doorObjs["west_door"], self.directionObjs["west"]),
            self.connected(self.roomObjs["driveway"], self.doorObjs["west_door"], self.roomObjs["room_west"])
        ]
        return state

    @goal
    def goal(self):
        # As the exploration objective is to visit a new location, the goal is to reach room_west.
        return [self.at(self.roomObjs["room_west"])]

--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move south
You are in the driveway. To the North you see the backyard. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :negative-preconditions :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (clear_path ?loc - location ?dir - direction)
    (connected_direct ?loc - location ?dir - direction ?to - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (or (and (connected ?from ?to ?dir) (door_open ?from ?to ?dir))
                           (and (clear_path ?from ?dir) (connected_direct ?from ?dir ?to))
                       )
              )
    :effect (and (not (at ?from)) (at ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    backyard room_south room_west - location
    south west - direction
  )
  (:init
    (at backyard)
    (connected backyard room_west west)
    (clear_path backyard south)
    (connected_direct backyard south room_south)
  )
  (:goal (at room_south))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    @predicate(Room, Door, Room)
    def connected(self, from_room, door, to_room):
        pass

    @predicate(Room, Direction)
    def clear_path(self, room, direction):
        pass

    @predicate(Room, Direction, Room)
    def connected_direct(self, room, direction, to_room):
        pass

    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, from_room, to_room):
        precond = [self.at(from_room), self.clear_path(from_room, "south"), self.connected_direct(from_room, "south", to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [self.at(from_room), self.door_open(door), self.facing(door, "west"), self.connected(from_room, door, to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

### Python IR: problem class
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        # We update the room objects based on current observations.
        # Previously the agent was in 'backyard' and moved south into 'room_south'.
        # We now rename 'room_south' to 'driveway' to reflect: "You are in the driveway." 
        # Also, the valid domain actions include move_west (via a door) which will lead to an unvisited room 'room_west'.
        self.roomObjs = DomainExploration.Room.create_objs(["backyard", "driveway", "room_west"])
        self.doorObjs = DomainExploration.Door.create_objs(["west_door"])
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            # The agent executed move_south from backyard and is now in the driveway.
            self.at(self.roomObjs["driveway"]),
            # The clear path and direct connection from backyard (the previous location) to driveway
            # represent the effect of the move_south action (even though from the agent's current view,
            # backyard lies to the north of driveway).
            self.clear_path(self.roomObjs["backyard"], self.directionObjs["south"]),
            self.connected_direct(self.roomObjs["backyard"], self.directionObjs["south"], self.roomObjs["driveway"]),
            # The door to the west is available from the driveway leading to a new, unvisited room
            self.facing(self.doorObjs["west_door"], self.directionObjs["west"]),
            self.connected(self.roomObjs["driveway"], self.doorObjs["west_door"], self.roomObjs["room_west"])
        ]
        return state

    @goal
    def goal(self):
        # As the exploration objective is to visit a new location, the goal is to reach room_west.
        return [self.at(self.roomObjs["room_west"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :negative-preconditions :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (clear_path ?loc - location ?dir - direction)
    (connected_direct ?loc - location ?dir - direction ?to - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (or (and (connected ?from ?to ?dir) (door_open ?from ?to ?dir))
                           (and (clear_path ?from ?dir) (connected_direct ?from ?dir ?to))
                       )
              )
    :effect (and (not (at ?from)) (at ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    backyard driveway room_west - location
    south west - direction
  )
  (:init
    (at driveway)
    (clear_path backyard south)
    (connected_direct backyard south driveway)
    (connected driveway room_west west)
  )
  (:goal (at room_west))
)
Actions from solver: ['open door to west', 'move west'] 
Raw plan text: (OPEN-DOOR DRIVEWAY ROOM_WEST WEST)
(MOVE DRIVEWAY ROOM_WEST WEST)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 2 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 2
	#Fluents: 4
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[0 / 0]--
--[0 / 2]--
Total time: 0.000139
Nodes generated during search: 3
Nodes expanded during search: 2
Plan found with cost: 2
Fast-BFS search completed in 0.000139 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_33qpup6v/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 2 

Successful plans:
Value: 2
 /tmp/pddl_run_33qpup6v/plan_tmp.txt 2

Current action_queue: ['open door to west', 'move west'] 
> open door to west 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: open door to west. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.
 

----Larger Loop No. 1---- 
successful_actions: ['open door to south', 'move south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: open door to west
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    @predicate(Room, Door, Room)
    def connected(self, from_room, door, to_room):
        pass

    @predicate(Room, Direction)
    def clear_path(self, room, direction):
        pass

    @predicate(Room, Direction, Room)
    def connected_direct(self, room, direction, to_room):
        pass

    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, from_room, to_room):
        precond = [self.at(from_room), self.clear_path(from_room, "south"), self.connected_direct(from_room, "south", to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [self.at(from_room), self.door_open(door), self.facing(door, "west"), self.connected(from_room, door, to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

[py_problem]
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        # We update the room objects based on current observations.
        # Previously the agent was in 'backyard' and moved south into 'room_south'.
        # We now rename 'room_south' to 'driveway' to reflect: "You are in the driveway." 
        # Also, the valid domain actions include move_west (via a door) which will lead to an unvisited room 'room_west'.
        self.roomObjs = DomainExploration.Room.create_objs(["backyard", "driveway", "room_west"])
        self.doorObjs = DomainExploration.Door.create_objs(["west_door"])
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            # The agent executed move_south from backyard and is now in the driveway.
            self.at(self.roomObjs["driveway"]),
            # The clear path and direct connection from backyard (the previous location) to driveway
            # represent the effect of the move_south action (even though from the agent's current view,
            # backyard lies to the north of driveway).
            self.clear_path(self.roomObjs["backyard"], self.directionObjs["south"]),
            self.connected_direct(self.roomObjs["backyard"], self.directionObjs["south"], self.roomObjs["driveway"]),
            # The door to the west is available from the driveway leading to a new, unvisited room
            self.facing(self.doorObjs["west_door"], self.directionObjs["west"]),
            self.connected(self.roomObjs["driveway"], self.doorObjs["west_door"], self.roomObjs["room_west"])
        ]
        return state

    @goal
    def goal(self):
        # As the exploration objective is to visit a new location, the goal is to reach room_west.
        return [self.at(self.roomObjs["room_west"])]

### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :typing :negative-preconditions :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (clear_path ?loc - location ?dir - direction)
    (connected_direct ?loc - location ?dir - direction ?to - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (or (and (connected ?from ?to ?dir) (door_open ?from ?to ?dir))
                           (and (clear_path ?from ?dir) (connected_direct ?from ?dir ?to))
                       )
              )
    :effect (and (not (at ?from)) (at ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    backyard driveway room_west - location
    south west - direction
  )
  (:init
    (at driveway)
    (clear_path backyard south)
    (connected_direct backyard south driveway)
    (connected driveway room_west west)
  )
  (:goal (at room_west))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: open door to west. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    @predicate(Room, Door, Room)
    def connected(self, from_room, door, to_room):
        pass

    @predicate(Room, Direction)
    def clear_path(self, room, direction):
        pass

    @predicate(Room, Direction, Room)
    def connected_direct(self, room, direction, to_room):
        pass

    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, from_room, to_room):
        precond = [self.at(from_room), self.clear_path(from_room, "south"), self.connected_direct(from_room, "south", to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    @action(Room, Room)
    def move_west(self, from_room, to_room):
        precond = [self.at(from_room), self.clear_path(from_room, "west"), self.connected_direct(from_room, "west", to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

Generated py_problem:
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        self.roomObjs = DomainExploration.Room.create_objs(["backyard", "driveway", "room_west"])
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            self.at(self.roomObjs["driveway"]),
            self.clear_path(self.roomObjs["backyard"], self.directionObjs["south"]),
            self.connected_direct(self.roomObjs["backyard"], self.directionObjs["south"], self.roomObjs["driveway"]),
            self.clear_path(self.roomObjs["driveway"], self.directionObjs["west"]),
            self.connected_direct(self.roomObjs["driveway"], self.directionObjs["west"], self.roomObjs["room_west"])
        ]
        return state

    @goal
    def goal(self):
        return [self.at(self.roomObjs["room_west"])]


--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: open door to west
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :negative-preconditions :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (clear_path ?loc - location ?dir - direction)
    (connected_direct ?loc - location ?dir - direction ?to - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (or (and (connected ?from ?to ?dir) (door_open ?from ?to ?dir))
                           (and (clear_path ?from ?dir) (connected_direct ?from ?dir ?to))
                       )
              )
    :effect (and (not (at ?from)) (at ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    backyard driveway room_west - location
    south west - direction
  )
  (:init
    (at driveway)
    (clear_path backyard south)
    (connected_direct backyard south driveway)
    (connected driveway room_west west)
  )
  (:goal (at room_west))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: open door to west. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    @predicate(Room, Door, Room)
    def connected(self, from_room, door, to_room):
        pass

    @predicate(Room, Direction)
    def clear_path(self, room, direction):
        pass

    @predicate(Room, Direction, Room)
    def connected_direct(self, room, direction, to_room):
        pass

    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, from_room, to_room):
        precond = [self.at(from_room), self.clear_path(from_room, "south"), self.connected_direct(from_room, "south", to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    @action(Room, Room)
    def move_west(self, from_room, to_room):
        precond = [self.at(from_room), self.clear_path(from_room, "west"), self.connected_direct(from_room, "west", to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect


### Python IR: problem class
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        self.roomObjs = DomainExploration.Room.create_objs(["backyard", "driveway", "room_west"])
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            self.at(self.roomObjs["driveway"]),
            self.clear_path(self.roomObjs["backyard"], self.directionObjs["south"]),
            self.connected_direct(self.roomObjs["backyard"], self.directionObjs["south"], self.roomObjs["driveway"]),
            self.clear_path(self.roomObjs["driveway"], self.directionObjs["west"]),
            self.connected_direct(self.roomObjs["driveway"], self.directionObjs["west"], self.roomObjs["room_west"])
        ]
        return state

    @goal
    def goal(self):
        return [self.at(self.roomObjs["room_west"])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :negative-preconditions :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (clear_path ?loc - location ?dir - direction)
    (connected_direct ?loc - location ?dir - direction ?to - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir)
                       (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (or (and (connected ?from ?to ?dir) (door_open ?from ?to ?dir))
                           (and (clear_path ?from ?dir) (connected_direct ?from ?dir ?to))
                       )
              )
    :effect (and (not (at ?from)) (at ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    backyard driveway room_west - location
    south west - direction
  )
  (:init
    (at driveway)
    (clear_path backyard south)
    (connected_direct backyard south driveway)
    (clear_path driveway west)
    (connected_direct driveway west room_west)
  )
  (:goal (at room_west))
)
Actions from solver: ['move west'] 
Raw plan text: (MOVE DRIVEWAY ROOM_WEST WEST)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 1 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 1
	#Fluents: 2
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[0 / 0]--
--[0 / 1]--
Total time: 5.29999e-05
Nodes generated during search: 2
Nodes expanded during search: 1
Plan found with cost: 1
Fast-BFS search completed in 5.29999e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_1bjc6jy6/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 1 

Successful plans:
Value: 1
 /tmp/pddl_run_1bjc6jy6/plan_tmp.txt 1

Current action_queue: ['move west'] 
> move west 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: move west. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status. 

----Larger Loop No. 2---- 
successful_actions: ['open door to south', 'move south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: move west
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    @predicate(Room, Door, Room)
    def connected(self, from_room, door, to_room):
        pass

    @predicate(Room, Direction)
    def clear_path(self, room, direction):
        pass

    @predicate(Room, Direction, Room)
    def connected_direct(self, room, direction, to_room):
        pass

    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, from_room, to_room):
        precond = [self.at(from_room), self.clear_path(from_room, "south"), self.connected_direct(from_room, "south", to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    @action(Room, Room)
    def move_west(self, from_room, to_room):
        precond = [self.at(from_room), self.clear_path(from_room, "west"), self.connected_direct(from_room, "west", to_room)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect


[py_problem]
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        self.roomObjs = DomainExploration.Room.create_objs(["backyard", "driveway", "room_west"])
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            self.at(self.roomObjs["driveway"]),
            self.clear_path(self.roomObjs["backyard"], self.directionObjs["south"]),
            self.connected_direct(self.roomObjs["backyard"], self.directionObjs["south"], self.roomObjs["driveway"]),
            self.clear_path(self.roomObjs["driveway"], self.directionObjs["west"]),
            self.connected_direct(self.roomObjs["driveway"], self.directionObjs["west"], self.roomObjs["room_west"])
        ]
        return state

    @goal
    def goal(self):
        return [self.at(self.roomObjs["room_west"])]


### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :typing :negative-preconditions :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (clear_path ?loc - location ?dir - direction)
    (connected_direct ?loc - location ?dir - direction ?to - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir)
                       (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (or (and (connected ?from ?to ?dir) (door_open ?from ?to ?dir))
                           (and (clear_path ?from ?dir) (connected_direct ?from ?dir ?to))
                       )
              )
    :effect (and (not (at ?from)) (at ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    backyard driveway room_west - location
    south west - direction
  )
  (:init
    (at driveway)
    (clear_path backyard south)
    (connected_direct backyard south driveway)
    (clear_path driveway west)
    (connected_direct driveway west room_west)
  )
  (:goal (at room_west))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: move west. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    @predicate(Room, Door, Room)
    def connected(self, from_room, door, to_room):
        pass

    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.at(from_room), self.facing(door, "south"), self.connected(from_room, door, to_room), self.door_open(door)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [self.at(from_room), self.facing(door, "west"), self.connected(from_room, door, to_room), self.door_open(door)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect
Generated py_problem:
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        self.roomObjs = DomainExploration.Room.create_objs(["driveway", "backyard", "room_west"])
        self.doorObjs = DomainExploration.Door.create_objs(["door_south", "door_west"])
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            # Agent is at the starting room
            self.at(self.roomObjs["driveway"]),
            
            # South door: connection from driveway to backyard; door is open
            self.facing(self.doorObjs["door_south"], self.directionObjs["south"]),
            self.connected(self.roomObjs["driveway"], self.doorObjs["door_south"], self.roomObjs["backyard"]),
            self.door_open(self.doorObjs["door_south"]),
            
            # West door: connection from driveway to room_west; door is closed (move west action will fail until opened)
            self.facing(self.doorObjs["door_west"], self.directionObjs["west"]),
            self.connected(self.roomObjs["driveway"], self.doorObjs["door_west"], self.roomObjs["room_west"])
        ]
        return state

    @goal
    def goal(self):
        return [self.at(self.roomObjs["room_west"])]

--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move west
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :negative-preconditions :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (clear_path ?loc - location ?dir - direction)
    (connected_direct ?loc - location ?dir - direction ?to - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir)
                       (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (or (and (connected ?from ?to ?dir) (door_open ?from ?to ?dir))
                           (and (clear_path ?from ?dir) (connected_direct ?from ?dir ?to))
                       )
              )
    :effect (and (not (at ?from)) (at ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    backyard driveway room_west - location
    south west - direction
  )
  (:init
    (at driveway)
    (clear_path backyard south)
    (connected_direct backyard south driveway)
    (clear_path driveway west)
    (connected_direct driveway west room_west)
  )
  (:goal (at room_west))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: move west. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    @predicate(Room, Door, Room)
    def connected(self, from_room, door, to_room):
        pass

    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.at(from_room), self.facing(door, "south"), self.connected(from_room, door, to_room), self.door_open(door)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [self.at(from_room), self.facing(door, "west"), self.connected(from_room, door, to_room), self.door_open(door)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

### Python IR: problem class
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        self.roomObjs = DomainExploration.Room.create_objs(["driveway", "backyard", "room_west"])
        self.doorObjs = DomainExploration.Door.create_objs(["door_south", "door_west"])
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            # Agent is at the starting room
            self.at(self.roomObjs["driveway"]),
            
            # South door: connection from driveway to backyard; door is open
            self.facing(self.doorObjs["door_south"], self.directionObjs["south"]),
            self.connected(self.roomObjs["driveway"], self.doorObjs["door_south"], self.roomObjs["backyard"]),
            self.door_open(self.doorObjs["door_south"]),
            
            # West door: connection from driveway to room_west; door is closed (move west action will fail until opened)
            self.facing(self.doorObjs["door_west"], self.directionObjs["west"]),
            self.connected(self.roomObjs["driveway"], self.doorObjs["door_west"], self.roomObjs["room_west"])
        ]
        return state

    @goal
    def goal(self):
        return [self.at(self.roomObjs["room_west"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :negative-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir)
                       (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (connected ?from ?to ?dir)
                       (door_open ?from ?to ?dir))
    :effect (and (not (at ?from))
                 (at ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    driveway backyard room_west - location
    south west - direction
  )
  (:init
    (at driveway)
    (connected driveway backyard south)
    (door_open driveway backyard south)
    (connected driveway room_west west)
  )
  (:goal (at room_west))
)
Actions from solver: ['open door to west', 'move west'] 
Raw plan text: (OPEN-DOOR DRIVEWAY ROOM_WEST WEST)
(MOVE DRIVEWAY ROOM_WEST WEST)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 3 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 3
	#Fluents: 5
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[0 / 0]--
--[0 / 2]--
Total time: 0.000136
Nodes generated during search: 5
Nodes expanded during search: 3
Plan found with cost: 2
Fast-BFS search completed in 0.000136 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_qs4c3xfu/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 2 

Successful plans:
Value: 2
 /tmp/pddl_run_qs4c3xfu/plan_tmp.txt 2

Current action_queue: ['open door to west', 'move west'] 
> open door to west 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: open door to west. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.
 

----Larger Loop No. 3---- 
successful_actions: ['open door to south', 'move south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: open door to west
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    @predicate(Room, Door, Room)
    def connected(self, from_room, door, to_room):
        pass

    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.at(from_room), self.facing(door, "south"), self.connected(from_room, door, to_room), self.door_open(door)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [self.at(from_room), self.facing(door, "west"), self.connected(from_room, door, to_room), self.door_open(door)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

[py_problem]
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        self.roomObjs = DomainExploration.Room.create_objs(["driveway", "backyard", "room_west"])
        self.doorObjs = DomainExploration.Door.create_objs(["door_south", "door_west"])
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            # Agent is at the starting room
            self.at(self.roomObjs["driveway"]),
            
            # South door: connection from driveway to backyard; door is open
            self.facing(self.doorObjs["door_south"], self.directionObjs["south"]),
            self.connected(self.roomObjs["driveway"], self.doorObjs["door_south"], self.roomObjs["backyard"]),
            self.door_open(self.doorObjs["door_south"]),
            
            # West door: connection from driveway to room_west; door is closed (move west action will fail until opened)
            self.facing(self.doorObjs["door_west"], self.directionObjs["west"]),
            self.connected(self.roomObjs["driveway"], self.doorObjs["door_west"], self.roomObjs["room_west"])
        ]
        return state

    @goal
    def goal(self):
        return [self.at(self.roomObjs["room_west"])]

### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :typing :negative-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir)
                       (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (connected ?from ?to ?dir)
                       (door_open ?from ?to ?dir))
    :effect (and (not (at ?from))
                 (at ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    driveway backyard room_west - location
    south west - direction
  )
  (:init
    (at driveway)
    (connected driveway backyard south)
    (door_open driveway backyard south)
    (connected driveway room_west west)
  )
  (:goal (at room_west))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: open door to west. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    @predicate(Room, Door, Room)
    def connected(self, from_room, door, to_room):
        pass

    # New predicate to represent a direct doorless connection
    @predicate(Room, Room, Direction)
    def direct_connected(self, room1, room2, direction):
        pass

    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.at(from_room), self.facing(door, "south"), self.connected(from_room, door, to_room), self.door_open(door)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    # Updated move_west action for doorless movement
    @action(Room, Room)
    def move_west(self, from_room, to_room):
        precond = [self.at(from_room), self.direct_connected(from_room, to_room, "west")]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect
Generated py_problem:
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        self.roomObjs = DomainExploration.Room.create_objs(["driveway", "backyard", "room_west"])
        self.doorObjs = DomainExploration.Door.create_objs(["door_south", "door_west"])
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            # Agent starts at the driveway
            self.at(self.roomObjs["driveway"]),
            
            # South door is present and open connecting driveway to backyard
            self.facing(self.doorObjs["door_south"], self.directionObjs["south"]),
            self.connected(self.roomObjs["driveway"], self.doorObjs["door_south"], self.roomObjs["backyard"]),
            self.door_open(self.doorObjs["door_south"]),
            
            # There is NO door to the west; a direct connection exists
            self.direct_connected(self.roomObjs["driveway"], self.roomObjs["room_west"], self.directionObjs["west"])
        ]
        return state

    @goal
    def goal(self):
        # The goal is to explore a new, unvisited location: room_west
        return [self.at(self.roomObjs["room_west"])]

--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: open door to west
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :negative-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir)
                       (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (connected ?from ?to ?dir)
                       (door_open ?from ?to ?dir))
    :effect (and (not (at ?from))
                 (at ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    driveway backyard room_west - location
    south west - direction
  )
  (:init
    (at driveway)
    (connected driveway backyard south)
    (door_open driveway backyard south)
    (connected driveway room_west west)
  )
  (:goal (at room_west))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: open door to west. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    @predicate(Room, Door, Room)
    def connected(self, from_room, door, to_room):
        pass

    # New predicate to represent a direct doorless connection
    @predicate(Room, Room, Direction)
    def direct_connected(self, room1, room2, direction):
        pass

    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.at(from_room), self.facing(door, "south"), self.connected(from_room, door, to_room), self.door_open(door)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    # Updated move_west action for doorless movement
    @action(Room, Room)
    def move_west(self, from_room, to_room):
        precond = [self.at(from_room), self.direct_connected(from_room, to_room, "west")]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

### Python IR: problem class
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        self.roomObjs = DomainExploration.Room.create_objs(["driveway", "backyard", "room_west"])
        self.doorObjs = DomainExploration.Door.create_objs(["door_south", "door_west"])
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            # Agent starts at the driveway
            self.at(self.roomObjs["driveway"]),
            
            # South door is present and open connecting driveway to backyard
            self.facing(self.doorObjs["door_south"], self.directionObjs["south"]),
            self.connected(self.roomObjs["driveway"], self.doorObjs["door_south"], self.roomObjs["backyard"]),
            self.door_open(self.doorObjs["door_south"]),
            
            # There is NO door to the west; a direct connection exists
            self.direct_connected(self.roomObjs["driveway"], self.roomObjs["room_west"], self.directionObjs["west"])
        ]
        return state

    @goal
    def goal(self):
        # The goal is to explore a new, unvisited location: room_west
        return [self.at(self.roomObjs["room_west"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :negative-preconditions :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (direct_connected ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (or (and (connected ?from ?to ?dir) (door_open ?from ?to ?dir))
                           (direct_connected ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    driveway backyard room_west - location
    south west - direction
  )
  (:init
    (at driveway)
    (connected driveway backyard south)
    (door_open driveway backyard south)
    (direct_connected driveway room_west west)
  )
  (:goal (at room_west))
)
Actions from solver: ['move west'] 
Raw plan text: (MOVE DRIVEWAY ROOM_WEST WEST)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 2 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 2
	#Fluents: 3
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[0 / 0]--
--[0 / 1]--
Total time: 0.000114
Nodes generated during search: 3
Nodes expanded during search: 1
Plan found with cost: 1
Fast-BFS search completed in 0.000114 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_ebbjum7x/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 1 

Successful plans:
Value: 1
 /tmp/pddl_run_ebbjum7x/plan_tmp.txt 1

Current action_queue: ['move west'] 
> move west 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: move west. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status. 

----Larger Loop No. 4---- 
successful_actions: ['open door to south', 'move south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: move west
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    @predicate(Room, Door, Room)
    def connected(self, from_room, door, to_room):
        pass

    # New predicate to represent a direct doorless connection
    @predicate(Room, Room, Direction)
    def direct_connected(self, room1, room2, direction):
        pass

    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.at(from_room), self.facing(door, "south"), self.connected(from_room, door, to_room), self.door_open(door)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    # Updated move_west action for doorless movement
    @action(Room, Room)
    def move_west(self, from_room, to_room):
        precond = [self.at(from_room), self.direct_connected(from_room, to_room, "west")]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

[py_problem]
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        self.roomObjs = DomainExploration.Room.create_objs(["driveway", "backyard", "room_west"])
        self.doorObjs = DomainExploration.Door.create_objs(["door_south", "door_west"])
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            # Agent starts at the driveway
            self.at(self.roomObjs["driveway"]),
            
            # South door is present and open connecting driveway to backyard
            self.facing(self.doorObjs["door_south"], self.directionObjs["south"]),
            self.connected(self.roomObjs["driveway"], self.doorObjs["door_south"], self.roomObjs["backyard"]),
            self.door_open(self.doorObjs["door_south"]),
            
            # There is NO door to the west; a direct connection exists
            self.direct_connected(self.roomObjs["driveway"], self.roomObjs["room_west"], self.directionObjs["west"])
        ]
        return state

    @goal
    def goal(self):
        # The goal is to explore a new, unvisited location: room_west
        return [self.at(self.roomObjs["room_west"])]

### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :typing :negative-preconditions :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (direct_connected ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (or (and (connected ?from ?to ?dir) (door_open ?from ?to ?dir))
                           (direct_connected ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    driveway backyard room_west - location
    south west - direction
  )
  (:init
    (at driveway)
    (connected driveway backyard south)
    (door_open driveway backyard south)
    (direct_connected driveway room_west west)
  )
  (:goal (at room_west))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: move west. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    @predicate(Room, Door, Room)
    def connected(self, from_room, door, to_room):
        pass

    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.at(from_room), self.facing(door, "south"), self.connected(from_room, door, to_room), self.door_open(door)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [self.at(from_room), self.facing(door, "west"), self.connected(from_room, door, to_room), self.door_open(door)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect
Generated py_problem:
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        self.roomObjs = DomainExploration.Room.create_objs(["driveway", "backyard", "room_west"])
        self.doorObjs = DomainExploration.Door.create_objs(["door_south", "door_west"])
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            self.at(self.roomObjs["driveway"]),
            self.facing(self.doorObjs["door_south"], self.directionObjs["south"]),
            self.facing(self.doorObjs["door_west"], self.directionObjs["west"]),
            self.connected(self.roomObjs["driveway"], self.doorObjs["door_south"], self.roomObjs["backyard"]),
            self.connected(self.roomObjs["driveway"], self.doorObjs["door_west"], self.roomObjs["room_west"]),
            self.door_open(self.doorObjs["door_south"])
        ]
        return state

    @goal
    def goal(self):
        return [self.at(self.roomObjs["room_west"])]

--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move west
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :negative-preconditions :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (direct_connected ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (or (and (connected ?from ?to ?dir) (door_open ?from ?to ?dir))
                           (direct_connected ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    driveway backyard room_west - location
    south west - direction
  )
  (:init
    (at driveway)
    (connected driveway backyard south)
    (door_open driveway backyard south)
    (direct_connected driveway room_west west)
  )
  (:goal (at room_west))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: move west. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainExploration(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Door, Direction)
    def facing(self, door, direction):
        pass

    @predicate(Room, Door, Room)
    def connected(self, from_room, door, to_room):
        pass

    @action(Door)
    def open_door_south(self, door):
        precond = [~self.door_open(door), self.facing(door, "south")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def open_door_west(self, door):
        precond = [~self.door_open(door), self.facing(door, "west")]
        effect = [self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_south(self, door):
        precond = [self.door_open(door), self.facing(door, "south")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_west(self, door):
        precond = [self.door_open(door), self.facing(door, "west")]
        effect = [~self.door_open(door)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, from_room, door, to_room):
        precond = [self.at(from_room), self.facing(door, "south"), self.connected(from_room, door, to_room), self.door_open(door)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, from_room, door, to_room):
        precond = [self.at(from_room), self.facing(door, "west"), self.connected(from_room, door, to_room), self.door_open(door)]
        effect = [~self.at(from_room), self.at(to_room)]
        return precond, effect

### Python IR: problem class
from py2pddl import init, goal

class ProblemExploration(DomainExploration):
    def __init__(self):
        super().__init__()
        self.roomObjs = DomainExploration.Room.create_objs(["driveway", "backyard", "room_west"])
        self.doorObjs = DomainExploration.Door.create_objs(["door_south", "door_west"])
        self.directionObjs = DomainExploration.Direction.create_objs(["south", "west"])

    @init
    def init(self):
        state = [
            self.at(self.roomObjs["driveway"]),
            self.facing(self.doorObjs["door_south"], self.directionObjs["south"]),
            self.facing(self.doorObjs["door_west"], self.directionObjs["west"]),
            self.connected(self.roomObjs["driveway"], self.doorObjs["door_south"], self.roomObjs["backyard"]),
            self.connected(self.roomObjs["driveway"], self.doorObjs["door_west"], self.roomObjs["room_west"]),
            self.door_open(self.doorObjs["door_south"])
        ]
        return state

    @goal
    def goal(self):
        return [self.at(self.roomObjs["room_west"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :negative-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (connected ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connected ?loc1 ?loc2 ?dir) (not (door_open ?loc1 ?loc2 ?dir)))
    :effect (door_open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connected ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    driveway backyard room_west - location
    south west - direction
  )
  (:init
    (at driveway)
    (connected driveway backyard south)
    (door_open driveway backyard south)
    (connected driveway room_west west)
  )
  (:goal (at room_west))
)
Actions from solver: ['open door to west', 'move west'] 
Raw plan text: (OPEN-DOOR DRIVEWAY ROOM_WEST WEST)
(MOVE DRIVEWAY ROOM_WEST WEST)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 3 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 3
	#Fluents: 5
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[0 / 0]--
--[0 / 2]--
Total time: 6.40001e-05
Nodes generated during search: 5
Nodes expanded during search: 3
Plan found with cost: 2
Fast-BFS search completed in 6.40001e-05 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_m82lahhl/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 2 

Successful plans:
Value: 2
 /tmp/pddl_run_m82lahhl/plan_tmp.txt 2

Current action_queue: ['open door to west', 'move west'] 
> open door to west 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: open door to west. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.
 
