Observations: You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. 
To the South you see a closed patio door. To the West you see a closed plain door.  
Gold path: ['look around', 'open door to south', 'open door to west', 'move south', 'open door to west', 'move east', 'open door to north', 'move west', 'move south', 'move north', 'move south', 'move north', 'move south', 'move north', 'move west', 'open door to south', 'move east', 'move east', 'move north', 'take coin'] 
Valid Actions: ['look around', 'close door to west', 'move west', 'open door to south', 'open door to west', 'inventory', 'move south', 'close door to south'] 
taskDescription: Your task is to search the environment and find the coin.  Once you find the coin, take it. 
brief_obs: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 
 


====Step 0==== 

----Larger Loop No. 0---- 
successful_actions: [] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    
    @predicate(Room)
    def at(self, room):
        pass
        
    @predicate(Door)
    def door_closed(self, door):
        pass
        
    @predicate(Door)
    def door_open(self, door):
        pass
        
    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass
        
    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect
        
    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect
        
    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect
        
    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect
        
    @action(Room, Door, Room)
    def move_south(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect
        
    @action(Room, Door, Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect
Generated py_problem:
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.rooms = ExplorationDomain.Room.create_objs(["kitchen", "patio", "west_room"])
        self.doors = ExplorationDomain.Door.create_objs(["south_door", "west_door"])
    
    @init
    def init(self):
        init_state = [
            self.at(self.rooms["kitchen"]),
            self.door_closed(self.doors["south_door"]),
            self.door_closed(self.doors["west_door"]),
            self.connects(self.rooms["kitchen"], self.doors["south_door"], self.rooms["patio"]),
            self.connects(self.rooms["kitchen"], self.doors["west_door"], self.rooms["west_room"])
        ]
        return init_state
    
    @goal
    def goal(self):
        return [self.at(self.rooms["patio"])]

--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
N/A

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    
    @predicate(Room)
    def at(self, room):
        pass
        
    @predicate(Door)
    def door_closed(self, door):
        pass
        
    @predicate(Door)
    def door_open(self, door):
        pass
        
    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass
        
    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect
        
    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect
        
    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect
        
    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect
        
    @action(Room, Door, Room)
    def move_south(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect
        
    @action(Room, Door, Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

### Python IR: problem class
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.rooms = ExplorationDomain.Room.create_objs(["kitchen", "patio", "west_room"])
        self.doors = ExplorationDomain.Door.create_objs(["south_door", "west_door"])
    
    @init
    def init(self):
        init_state = [
            self.at(self.rooms["kitchen"]),
            self.door_closed(self.doors["south_door"]),
            self.door_closed(self.doors["west_door"]),
            self.connects(self.rooms["kitchen"], self.doors["south_door"], self.rooms["patio"]),
            self.connects(self.rooms["kitchen"], self.doors["west_door"], self.rooms["west_room"])
        ]
        return init_state
    
    @goal
    def goal(self):
        return [self.at(self.rooms["patio"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connects ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen patio west_room - location
    south west - direction
  )
  (:init
    (at kitchen)
    (connects kitchen patio south)
    (door_closed kitchen patio south)
    (connects kitchen west_room west)
    (door_closed kitchen west_room west)
  )
  (:goal (and (at patio)))
)
Actions from solver: ['open door to south', 'move south'] 
Raw plan text: (OPEN-DOOR KITCHEN PATIO SOUTH)
(MOVE KITCHEN PATIO SOUTH)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 4
	#Fluents: 7
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[0 / 0]--
--[0 / 2]--
Total time: 0.000127
Nodes generated during search: 5
Nodes expanded during search: 2
Plan found with cost: 2
Fast-BFS search completed in 0.000127 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_z7ub8vpj/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 2 

Successful plans:
Value: 2
 /tmp/pddl_run_z7ub8vpj/plan_tmp.txt 2

Current action_queue: ['open door to south', 'move south'] 
> open door to south 
 You open the patio door, revealing the backyard.  
Small Loop, action_queue: ['move south'] 
Current action_queue: ['move south'] 
> move south 
 You are in the backyard. In one part of the room you see a barbeque. There is also a workbench, that has nothing on it. You also see a patio chair, that has nothing on it. In another part of the room you see a patio table, that has nothing on it. In one part of the room you see a clothes line, that has nothing on it. There is also a garden, that has nothing on it. 
Through an open patio door, to the North you see the kitchen. To the South you see the driveway. To the East you see the street. To the West you see a closed patio door.  


====Step 1==== 

----Larger Loop No. 0---- 
successful_actions: ['open door to south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: open door to south
You open the patio door, revealing the backyard. 

Action: move south
You are in the backyard. Through an open patio door, to the North you see the kitchen. To the South you see the driveway. To the East you see the street. To the West you see a closed patio door. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    
    @predicate(Room)
    def at(self, room):
        pass
        
    @predicate(Door)
    def door_closed(self, door):
        pass
        
    @predicate(Door)
    def door_open(self, door):
        pass
        
    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass
        
    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect
        
    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect
        
    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect
        
    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect
        
    @action(Room, Door, Room)
    def move_south(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect
        
    @action(Room, Door, Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

[py_problem]
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.rooms = ExplorationDomain.Room.create_objs(["kitchen", "patio", "west_room"])
        self.doors = ExplorationDomain.Door.create_objs(["south_door", "west_door"])
    
    @init
    def init(self):
        init_state = [
            self.at(self.rooms["kitchen"]),
            self.door_closed(self.doors["south_door"]),
            self.door_closed(self.doors["west_door"]),
            self.connects(self.rooms["kitchen"], self.doors["south_door"], self.rooms["patio"]),
            self.connects(self.rooms["kitchen"], self.doors["west_door"], self.rooms["west_room"])
        ]
        return init_state
    
    @goal
    def goal(self):
        return [self.at(self.rooms["patio"])]

### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connects ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen patio west_room - location
    south west - direction
  )
  (:init
    (at kitchen)
    (connects kitchen patio south)
    (door_closed kitchen patio south)
    (connects kitchen west_room west)
    (door_closed kitchen west_room west)
  )
  (:goal (and (at patio)))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
N/A

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def at(self, room):
        pass
        
    @predicate(Door)
    def door_closed(self, door):
        pass
        
    @predicate(Door)
    def door_open(self, door):
        pass
        
    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass
        
    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect
        
    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect
        
    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect
        
    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect
        
    @action(Room, Door, Room)
    def move_south(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect
        
    @action(Room, Door, Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

Generated py_problem:
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define the rooms: the agent started in the kitchen but has now moved into the backyard.
        # Also, the backyard leads to the driveway (south) and to a room to the west behind a closed door.
        self.rooms = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room"])
        # Define door objects for each connection
        # - 'south_door_kitchen_backyard' connects kitchen and backyard and is already open
        # - 'south_door_backyard_driveway' connects backyard to driveway and is still closed
        # - 'west_door' connects backyard to west_room and is closed
        self.doors = ExplorationDomain.Door.create_objs(["south_door_kitchen_backyard", "south_door_backyard_driveway", "west_door"])
    
    @init
    def init(self):
        init_state = [
            # Agent is currently in the backyard
            self.at(self.rooms["backyard"]),
            # The door between kitchen and backyard has been opened
            self.door_open(self.doors["south_door_kitchen_backyard"]),
            # The door from backyard to driveway is closed
            self.door_closed(self.doors["south_door_backyard_driveway"]),
            # The door to the west is closed
            self.door_closed(self.doors["west_door"]),
            # Environment connections
            self.connects(self.rooms["kitchen"], self.doors["south_door_kitchen_backyard"], self.rooms["backyard"]),
            self.connects(self.rooms["backyard"], self.doors["south_door_backyard_driveway"], self.rooms["driveway"]),
            self.connects(self.rooms["backyard"], self.doors["west_door"], self.rooms["west_room"])
        ]
        return init_state
    
    @goal
    def goal(self):
        # The goal is to explore a new (unvisited) location; here, the driveway is chosen.
        return [self.at(self.rooms["driveway"])]


--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: open door to south
You open the patio door, revealing the backyard. 

Action: move south
You are in the backyard. Through an open patio door, to the North you see the kitchen. To the South you see the driveway. To the East you see the street. To the West you see a closed patio door. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connects ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen patio west_room - location
    south west - direction
  )
  (:init
    (at kitchen)
    (connects kitchen patio south)
    (door_closed kitchen patio south)
    (connects kitchen west_room west)
    (door_closed kitchen west_room west)
  )
  (:goal (and (at patio)))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def at(self, room):
        pass
        
    @predicate(Door)
    def door_closed(self, door):
        pass
        
    @predicate(Door)
    def door_open(self, door):
        pass
        
    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass
        
    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect
        
    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect
        
    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect
        
    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect
        
    @action(Room, Door, Room)
    def move_south(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect
        
    @action(Room, Door, Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect


### Python IR: problem class
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define the rooms: the agent started in the kitchen but has now moved into the backyard.
        # Also, the backyard leads to the driveway (south) and to a room to the west behind a closed door.
        self.rooms = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room"])
        # Define door objects for each connection
        # - 'south_door_kitchen_backyard' connects kitchen and backyard and is already open
        # - 'south_door_backyard_driveway' connects backyard to driveway and is still closed
        # - 'west_door' connects backyard to west_room and is closed
        self.doors = ExplorationDomain.Door.create_objs(["south_door_kitchen_backyard", "south_door_backyard_driveway", "west_door"])
    
    @init
    def init(self):
        init_state = [
            # Agent is currently in the backyard
            self.at(self.rooms["backyard"]),
            # The door between kitchen and backyard has been opened
            self.door_open(self.doors["south_door_kitchen_backyard"]),
            # The door from backyard to driveway is closed
            self.door_closed(self.doors["south_door_backyard_driveway"]),
            # The door to the west is closed
            self.door_closed(self.doors["west_door"]),
            # Environment connections
            self.connects(self.rooms["kitchen"], self.doors["south_door_kitchen_backyard"], self.rooms["backyard"]),
            self.connects(self.rooms["backyard"], self.doors["south_door_backyard_driveway"], self.rooms["driveway"]),
            self.connects(self.rooms["backyard"], self.doors["west_door"], self.rooms["west_room"])
        ]
        return init_state
    
    @goal
    def goal(self):
        # The goal is to explore a new (unvisited) location; here, the driveway is chosen.
        return [self.at(self.rooms["driveway"])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connects ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room - location
    south west - direction
  )
  (:init
    (at backyard)
    (connects kitchen backyard south)
    (door_open kitchen backyard south)
    (connects backyard driveway south)
    (door_closed backyard driveway south)
    (connects backyard west_room west)
    (door_closed backyard west_room west)
  )
  (:goal (and (at driveway)))
)
Actions from solver: ['open door to south', 'move south'] 
Raw plan text: (OPEN-DOOR BACKYARD DRIVEWAY SOUTH)
(MOVE BACKYARD DRIVEWAY SOUTH)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 4
	#Fluents: 7
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[0 / 0]--
--[0 / 2]--
Total time: 0.00013
Nodes generated during search: 5
Nodes expanded during search: 2
Plan found with cost: 2
Fast-BFS search completed in 0.00013 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_v8rm27r2/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 2 

Successful plans:
Value: 2
 /tmp/pddl_run_v8rm27r2/plan_tmp.txt 2

Current action_queue: ['open door to south', 'move south'] 
> open door to south 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.
 

----Larger Loop No. 1---- 
successful_actions: ['open door to south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: open door to south
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def at(self, room):
        pass
        
    @predicate(Door)
    def door_closed(self, door):
        pass
        
    @predicate(Door)
    def door_open(self, door):
        pass
        
    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass
        
    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect
        
    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect
        
    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect
        
    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect
        
    @action(Room, Door, Room)
    def move_south(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect
        
    @action(Room, Door, Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect


[py_problem]
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define the rooms: the agent started in the kitchen but has now moved into the backyard.
        # Also, the backyard leads to the driveway (south) and to a room to the west behind a closed door.
        self.rooms = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room"])
        # Define door objects for each connection
        # - 'south_door_kitchen_backyard' connects kitchen and backyard and is already open
        # - 'south_door_backyard_driveway' connects backyard to driveway and is still closed
        # - 'west_door' connects backyard to west_room and is closed
        self.doors = ExplorationDomain.Door.create_objs(["south_door_kitchen_backyard", "south_door_backyard_driveway", "west_door"])
    
    @init
    def init(self):
        init_state = [
            # Agent is currently in the backyard
            self.at(self.rooms["backyard"]),
            # The door between kitchen and backyard has been opened
            self.door_open(self.doors["south_door_kitchen_backyard"]),
            # The door from backyard to driveway is closed
            self.door_closed(self.doors["south_door_backyard_driveway"]),
            # The door to the west is closed
            self.door_closed(self.doors["west_door"]),
            # Environment connections
            self.connects(self.rooms["kitchen"], self.doors["south_door_kitchen_backyard"], self.rooms["backyard"]),
            self.connects(self.rooms["backyard"], self.doors["south_door_backyard_driveway"], self.rooms["driveway"]),
            self.connects(self.rooms["backyard"], self.doors["west_door"], self.rooms["west_room"])
        ]
        return init_state
    
    @goal
    def goal(self):
        # The goal is to explore a new (unvisited) location; here, the driveway is chosen.
        return [self.at(self.rooms["driveway"])]


### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connects ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room - location
    south west - direction
  )
  (:init
    (at backyard)
    (connects kitchen backyard south)
    (door_open kitchen backyard south)
    (connects backyard driveway south)
    (door_closed backyard driveway south)
    (connects backyard west_room west)
    (door_closed backyard west_room west)
  )
  (:goal (and (at driveway)))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_closed(self, door):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass

    @predicate(Room, Room)
    def direct_connects(self, room_from, room_to):
        pass

    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, room_from, room_to):
        # Updated move_south for doorless connection based on feedback: if there is no door, move directly
        precond = [self.at(room_from), self.direct_connects(room_from, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

Generated py_problem:
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define rooms and doors for the current problem instance
        self.rooms = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room"])
        # Only include door objects where physical doors exist
        self.doors = ExplorationDomain.Door.create_objs(["south_door_kitchen_backyard", "west_door"])

    @init
    def init(self):
        init_state = [
            # Agent is currently in the backyard
            self.at(self.rooms["backyard"]),
            # The door between kitchen and backyard is open
            self.door_open(self.doors["south_door_kitchen_backyard"]),
            # The door to the west is closed
            self.door_closed(self.doors["west_door"]),
            # Connectivity via door from kitchen to backyard
            self.connects(self.rooms["kitchen"], self.doors["south_door_kitchen_backyard"], self.rooms["backyard"]),
            # Direct connectivity (no door) from backyard to driveway, since open door to south fails
            self.direct_connects(self.rooms["backyard"], self.rooms["driveway"]),
            # Connectivity via door from backyard to west_room
            self.connects(self.rooms["backyard"], self.doors["west_door"], self.rooms["west_room"])
        ]
        return init_state

    @goal
    def goal(self):
        # Goal: explore an unvisited location; here, the driveway is chosen
        return [self.at(self.rooms["driveway"])]


--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: open door to south
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connects ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room - location
    south west - direction
  )
  (:init
    (at backyard)
    (connects kitchen backyard south)
    (door_open kitchen backyard south)
    (connects backyard driveway south)
    (door_closed backyard driveway south)
    (connects backyard west_room west)
    (door_closed backyard west_room west)
  )
  (:goal (and (at driveway)))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_closed(self, door):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass

    @predicate(Room, Room)
    def direct_connects(self, room_from, room_to):
        pass

    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, room_from, room_to):
        # Updated move_south for doorless connection based on feedback: if there is no door, move directly
        precond = [self.at(room_from), self.direct_connects(room_from, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect


### Python IR: problem class
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define rooms and doors for the current problem instance
        self.rooms = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room"])
        # Only include door objects where physical doors exist
        self.doors = ExplorationDomain.Door.create_objs(["south_door_kitchen_backyard", "west_door"])

    @init
    def init(self):
        init_state = [
            # Agent is currently in the backyard
            self.at(self.rooms["backyard"]),
            # The door between kitchen and backyard is open
            self.door_open(self.doors["south_door_kitchen_backyard"]),
            # The door to the west is closed
            self.door_closed(self.doors["west_door"]),
            # Connectivity via door from kitchen to backyard
            self.connects(self.rooms["kitchen"], self.doors["south_door_kitchen_backyard"], self.rooms["backyard"]),
            # Direct connectivity (no door) from backyard to driveway, since open door to south fails
            self.direct_connects(self.rooms["backyard"], self.rooms["driveway"]),
            # Connectivity via door from backyard to west_room
            self.connects(self.rooms["backyard"], self.doors["west_door"], self.rooms["west_room"])
        ]
        return init_state

    @goal
    def goal(self):
        # Goal: explore an unvisited location; here, the driveway is chosen
        return [self.at(self.rooms["driveway"])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connects ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)


[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room - location
    south west - direction
  )
  (:init
    (at backyard)
    (connects kitchen backyard south)
    (door_open kitchen backyard south)
    (connects backyard driveway south)
    (door_open backyard driveway south)
    (connects backyard west_room west)
    (door_closed backyard west_room west)
  )
  (:goal (at driveway))
)

Actions from solver: ['move south'] 
Raw plan text: (MOVE BACKYARD DRIVEWAY SOUTH)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 3 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 3
	#Fluents: 5
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[0 / 0]--
--[0 / 1]--
Total time: 0.000109
Nodes generated during search: 3
Nodes expanded during search: 1
Plan found with cost: 1
Fast-BFS search completed in 0.000109 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_q6zktf_7/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 1 

Successful plans:
Value: 1
 /tmp/pddl_run_q6zktf_7/plan_tmp.txt 1

Current action_queue: ['move south'] 
> move south 
 You are in the driveway. 
To the North you see the backyard.  


====Step 2==== 

----Larger Loop No. 0---- 
successful_actions: ['open door to south', 'move south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: move south
You are in the driveway. To the North you see the backyard. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_closed(self, door):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass

    @predicate(Room, Room)
    def direct_connects(self, room_from, room_to):
        pass

    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, room_from, room_to):
        # Updated move_south for doorless connection based on feedback: if there is no door, move directly
        precond = [self.at(room_from), self.direct_connects(room_from, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect


[py_problem]
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define rooms and doors for the current problem instance
        self.rooms = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room"])
        # Only include door objects where physical doors exist
        self.doors = ExplorationDomain.Door.create_objs(["south_door_kitchen_backyard", "west_door"])

    @init
    def init(self):
        init_state = [
            # Agent is currently in the backyard
            self.at(self.rooms["backyard"]),
            # The door between kitchen and backyard is open
            self.door_open(self.doors["south_door_kitchen_backyard"]),
            # The door to the west is closed
            self.door_closed(self.doors["west_door"]),
            # Connectivity via door from kitchen to backyard
            self.connects(self.rooms["kitchen"], self.doors["south_door_kitchen_backyard"], self.rooms["backyard"]),
            # Direct connectivity (no door) from backyard to driveway, since open door to south fails
            self.direct_connects(self.rooms["backyard"], self.rooms["driveway"]),
            # Connectivity via door from backyard to west_room
            self.connects(self.rooms["backyard"], self.doors["west_door"], self.rooms["west_room"])
        ]
        return init_state

    @goal
    def goal(self):
        # Goal: explore an unvisited location; here, the driveway is chosen
        return [self.at(self.rooms["driveway"])]


### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connects ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)


[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room - location
    south west - direction
  )
  (:init
    (at backyard)
    (connects kitchen backyard south)
    (door_open kitchen backyard south)
    (connects backyard driveway south)
    (door_open backyard driveway south)
    (connects backyard west_room west)
    (door_closed backyard west_room west)
  )
  (:goal (at driveway))
)

### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
N/A

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    
    @predicate(Room)
    def at(self, room):
        pass
    
    @predicate(Door)
    def door_closed(self, door):
        pass
    
    @predicate(Door)
    def door_open(self, door):
        pass
    
    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass
    
    @predicate(Room, Room)
    def direct_connects(self, room_from, room_to):
        pass
    
    # New predicate to capture the observed northward relation
    @predicate(Room, Room)
    def north_of(self, room_from, room_to):
        pass
    
    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect
    
    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect
    
    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect
    
    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect
    
    @action(Room, Room)
    def move_south(self, room_from, room_to):
        precond = [self.at(room_from), self.direct_connects(room_from, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect
    
    @action(Room, Door, Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect
Generated py_problem:
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Retain previously observed objects
        self.rooms = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room"])
        self.doors = ExplorationDomain.Door.create_objs(["south_door_kitchen_backyard", "west_door"])
    
    @init
    def init(self):
        init_state = [
            # Agent has executed move south and is now in the driveway
            self.at(self.rooms["driveway"]),
            # Door statuses as previously observed
            self.door_open(self.doors["south_door_kitchen_backyard"]),
            self.door_closed(self.doors["west_door"]),
            # Connectivity: kitchen is connected to backyard via the south door
            self.connects(self.rooms["kitchen"], self.doors["south_door_kitchen_backyard"], self.rooms["backyard"]),
            # Direct connectivity indicates that driveway is reachable from backyard (i.e. driveway is south of backyard)
            self.direct_connects(self.rooms["backyard"], self.rooms["driveway"]),
            # Adding symmetric connectivity to allow reverse movement if needed
            self.direct_connects(self.rooms["driveway"], self.rooms["backyard"]),
            # Connectivity from backyard to west_room via the west door
            self.connects(self.rooms["backyard"], self.doors["west_door"], self.rooms["west_room"]),
            # New observation: from the driveway, the agent sees the backyard to the north
            self.north_of(self.rooms["driveway"], self.rooms["backyard"])
        ]
        return init_state
    
    @goal
    def goal(self):
        # New exploration goal: move to a not-yet visited location (here, west_room is chosen)
        return [self.at(self.rooms["west_room"])]

--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move south
You are in the driveway. To the North you see the backyard. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connects ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)


[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room - location
    south west - direction
  )
  (:init
    (at backyard)
    (connects kitchen backyard south)
    (door_open kitchen backyard south)
    (connects backyard driveway south)
    (door_open backyard driveway south)
    (connects backyard west_room west)
    (door_closed backyard west_room west)
  )
  (:goal (at driveway))
)


### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    
    @predicate(Room)
    def at(self, room):
        pass
    
    @predicate(Door)
    def door_closed(self, door):
        pass
    
    @predicate(Door)
    def door_open(self, door):
        pass
    
    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass
    
    @predicate(Room, Room)
    def direct_connects(self, room_from, room_to):
        pass
    
    # New predicate to capture the observed northward relation
    @predicate(Room, Room)
    def north_of(self, room_from, room_to):
        pass
    
    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect
    
    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect
    
    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect
    
    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect
    
    @action(Room, Room)
    def move_south(self, room_from, room_to):
        precond = [self.at(room_from), self.direct_connects(room_from, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect
    
    @action(Room, Door, Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

### Python IR: problem class
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Retain previously observed objects
        self.rooms = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room"])
        self.doors = ExplorationDomain.Door.create_objs(["south_door_kitchen_backyard", "west_door"])
    
    @init
    def init(self):
        init_state = [
            # Agent has executed move south and is now in the driveway
            self.at(self.rooms["driveway"]),
            # Door statuses as previously observed
            self.door_open(self.doors["south_door_kitchen_backyard"]),
            self.door_closed(self.doors["west_door"]),
            # Connectivity: kitchen is connected to backyard via the south door
            self.connects(self.rooms["kitchen"], self.doors["south_door_kitchen_backyard"], self.rooms["backyard"]),
            # Direct connectivity indicates that driveway is reachable from backyard (i.e. driveway is south of backyard)
            self.direct_connects(self.rooms["backyard"], self.rooms["driveway"]),
            # Adding symmetric connectivity to allow reverse movement if needed
            self.direct_connects(self.rooms["driveway"], self.rooms["backyard"]),
            # Connectivity from backyard to west_room via the west door
            self.connects(self.rooms["backyard"], self.doors["west_door"], self.rooms["west_room"]),
            # New observation: from the driveway, the agent sees the backyard to the north
            self.north_of(self.rooms["driveway"], self.rooms["backyard"])
        ]
        return init_state
    
    @goal
    def goal(self):
        # New exploration goal: move to a not-yet visited location (here, west_room is chosen)
        return [self.at(self.rooms["west_room"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (direct_connects ?loc1 - location ?loc2 - location)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connects ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room - location
    south west - direction
  )
  (:init
    (at driveway)
    
    ;; Connectivity between kitchen and backyard using the south door
    (connects kitchen backyard south)
    (door_open kitchen backyard south)
    
    ;; Connectivity representing the move from backyard to driveway (executed move south)
    (connects backyard driveway south)
    (door_open backyard driveway south)
    (connects driveway backyard south)
    (door_open driveway backyard south)
    
    ;; Connectivity from backyard to west_room via the west door (currently closed)
    (connects backyard west_room west)
    (door_closed backyard west_room west)
    
    ;; Additional observations
    (direct_connects backyard driveway)
    (direct_connects driveway backyard)
    (north_of driveway backyard)
  )
  (:goal (at west_room))
)
Actions from solver: ['move south', 'open door to west', 'move west'] 
Raw plan text: (MOVE DRIVEWAY BACKYARD SOUTH)
(OPEN-DOOR BACKYARD WEST_ROOM WEST)
(MOVE BACKYARD WEST_ROOM WEST)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 4
	#Fluents: 5
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[1 / 2]--
--[0 / 0]--
--[0 / 3]--
Total time: 0.000154
Nodes generated during search: 6
Nodes expanded during search: 4
Plan found with cost: 3
Fast-BFS search completed in 0.000154 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_0gkwwbb_/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 3 

Successful plans:
Value: 3
 /tmp/pddl_run_0gkwwbb_/plan_tmp.txt 3

Current action_queue: ['move south', 'open door to west', 'move west'] 
> move south 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: move south. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status. 

----Larger Loop No. 1---- 
successful_actions: ['open door to south', 'move south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: move south
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    
    @predicate(Room)
    def at(self, room):
        pass
    
    @predicate(Door)
    def door_closed(self, door):
        pass
    
    @predicate(Door)
    def door_open(self, door):
        pass
    
    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass
    
    @predicate(Room, Room)
    def direct_connects(self, room_from, room_to):
        pass
    
    # New predicate to capture the observed northward relation
    @predicate(Room, Room)
    def north_of(self, room_from, room_to):
        pass
    
    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect
    
    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect
    
    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect
    
    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect
    
    @action(Room, Room)
    def move_south(self, room_from, room_to):
        precond = [self.at(room_from), self.direct_connects(room_from, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect
    
    @action(Room, Door, Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

[py_problem]
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Retain previously observed objects
        self.rooms = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room"])
        self.doors = ExplorationDomain.Door.create_objs(["south_door_kitchen_backyard", "west_door"])
    
    @init
    def init(self):
        init_state = [
            # Agent has executed move south and is now in the driveway
            self.at(self.rooms["driveway"]),
            # Door statuses as previously observed
            self.door_open(self.doors["south_door_kitchen_backyard"]),
            self.door_closed(self.doors["west_door"]),
            # Connectivity: kitchen is connected to backyard via the south door
            self.connects(self.rooms["kitchen"], self.doors["south_door_kitchen_backyard"], self.rooms["backyard"]),
            # Direct connectivity indicates that driveway is reachable from backyard (i.e. driveway is south of backyard)
            self.direct_connects(self.rooms["backyard"], self.rooms["driveway"]),
            # Adding symmetric connectivity to allow reverse movement if needed
            self.direct_connects(self.rooms["driveway"], self.rooms["backyard"]),
            # Connectivity from backyard to west_room via the west door
            self.connects(self.rooms["backyard"], self.doors["west_door"], self.rooms["west_room"]),
            # New observation: from the driveway, the agent sees the backyard to the north
            self.north_of(self.rooms["driveway"], self.rooms["backyard"])
        ]
        return init_state
    
    @goal
    def goal(self):
        # New exploration goal: move to a not-yet visited location (here, west_room is chosen)
        return [self.at(self.rooms["west_room"])]

### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (direct_connects ?loc1 - location ?loc2 - location)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connects ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room - location
    south west - direction
  )
  (:init
    (at driveway)
    
    ;; Connectivity between kitchen and backyard using the south door
    (connects kitchen backyard south)
    (door_open kitchen backyard south)
    
    ;; Connectivity representing the move from backyard to driveway (executed move south)
    (connects backyard driveway south)
    (door_open backyard driveway south)
    (connects driveway backyard south)
    (door_open driveway backyard south)
    
    ;; Connectivity from backyard to west_room via the west door (currently closed)
    (connects backyard west_room west)
    (door_closed backyard west_room west)
    
    ;; Additional observations
    (direct_connects backyard driveway)
    (direct_connects driveway backyard)
    (north_of driveway backyard)
  )
  (:goal (at west_room))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: move south. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_closed(self, door):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass

    @predicate(Room, Room)
    def direct_connects(self, room1, room2):
        pass

    @predicate(Room, Room)
    def north_of(self, room_from, room_to):
        pass

    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    # Updated move_south action now requires a door parameter and a direction check.
    @action(Room, Door, Room)
    def move_south(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to), self.north_of(room_from, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect
Generated py_problem:
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define the objects as observed in the environment
        self.rooms = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room"])
        self.doors = ExplorationDomain.Door.create_objs(["south_door_kitchen_backyard", "west_door"])

    @init
    def init(self):
        init_state = [
            # Agent starts in the kitchen so that a door-based south move is available
            self.at(self.rooms["kitchen"]),
            
            # Door statuses: the south door (between kitchen and backyard) is open, while the west door is closed
            self.door_open(self.doors["south_door_kitchen_backyard"]),
            self.door_closed(self.doors["west_door"]),
            
            # Connectivity: the south door connects the kitchen to the backyard
            self.connects(self.rooms["kitchen"], self.doors["south_door_kitchen_backyard"], self.rooms["backyard"]),
            
            # Directional relation: the kitchen is north of the backyard, hence moving south from kitchen leads to backyard
            self.north_of(self.rooms["kitchen"], self.rooms["backyard"]),
            
            # Connectivity: the west door connects the backyard to the west_room
            self.connects(self.rooms["backyard"], self.doors["west_door"], self.rooms["west_room"])
        ]
        return init_state

    @goal
    def goal(self):
        # The exploration goal is to reach the unvisited location west_room
        return [self.at(self.rooms["west_room"])]

--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move south
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (direct_connects ?loc1 - location ?loc2 - location)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connects ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room - location
    south west - direction
  )
  (:init
    (at driveway)
    
    ;; Connectivity between kitchen and backyard using the south door
    (connects kitchen backyard south)
    (door_open kitchen backyard south)
    
    ;; Connectivity representing the move from backyard to driveway (executed move south)
    (connects backyard driveway south)
    (door_open backyard driveway south)
    (connects driveway backyard south)
    (door_open driveway backyard south)
    
    ;; Connectivity from backyard to west_room via the west door (currently closed)
    (connects backyard west_room west)
    (door_closed backyard west_room west)
    
    ;; Additional observations
    (direct_connects backyard driveway)
    (direct_connects driveway backyard)
    (north_of driveway backyard)
  )
  (:goal (at west_room))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: move south. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_closed(self, door):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass

    @predicate(Room, Room)
    def direct_connects(self, room1, room2):
        pass

    @predicate(Room, Room)
    def north_of(self, room_from, room_to):
        pass

    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    # Updated move_south action now requires a door parameter and a direction check.
    @action(Room, Door, Room)
    def move_south(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to), self.north_of(room_from, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

### Python IR: problem class
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define the objects as observed in the environment
        self.rooms = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room"])
        self.doors = ExplorationDomain.Door.create_objs(["south_door_kitchen_backyard", "west_door"])

    @init
    def init(self):
        init_state = [
            # Agent starts in the kitchen so that a door-based south move is available
            self.at(self.rooms["kitchen"]),
            
            # Door statuses: the south door (between kitchen and backyard) is open, while the west door is closed
            self.door_open(self.doors["south_door_kitchen_backyard"]),
            self.door_closed(self.doors["west_door"]),
            
            # Connectivity: the south door connects the kitchen to the backyard
            self.connects(self.rooms["kitchen"], self.doors["south_door_kitchen_backyard"], self.rooms["backyard"]),
            
            # Directional relation: the kitchen is north of the backyard, hence moving south from kitchen leads to backyard
            self.north_of(self.rooms["kitchen"], self.rooms["backyard"]),
            
            # Connectivity: the west door connects the backyard to the west_room
            self.connects(self.rooms["backyard"], self.doors["west_door"], self.rooms["west_room"])
        ]
        return init_state

    @goal
    def goal(self):
        # The exploration goal is to reach the unvisited location west_room
        return [self.at(self.rooms["west_room"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (direct_connects ?loc1 - location ?loc2 - location)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connects ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room - location
    south west - direction
  )
  (:init
    (at kitchen)
    (connects kitchen backyard south)
    (door_open kitchen backyard south)
    (connects backyard west_room west)
    (door_closed backyard west_room west)
    (north_of kitchen backyard)
  )
  (:goal (at west_room))
)
Actions from solver: ['move south', 'open door to west', 'move west'] 
Raw plan text: (MOVE KITCHEN BACKYARD SOUTH)
(OPEN-DOOR BACKYARD WEST_ROOM WEST)
(MOVE BACKYARD WEST_ROOM WEST)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 3 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 3
	#Fluents: 5
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[1 / 2]--
--[0 / 0]--
--[0 / 3]--
Total time: 0.000142
Nodes generated during search: 5
Nodes expanded during search: 4
Plan found with cost: 3
Fast-BFS search completed in 0.000142 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_dirzfqg_/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 3 

Successful plans:
Value: 3
 /tmp/pddl_run_dirzfqg_/plan_tmp.txt 3

Current action_queue: ['move south', 'open door to west', 'move west'] 
> move south 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: move south. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status. 

----Larger Loop No. 2---- 
successful_actions: ['open door to south', 'move south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: move south
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_closed(self, door):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass

    @predicate(Room, Room)
    def direct_connects(self, room1, room2):
        pass

    @predicate(Room, Room)
    def north_of(self, room_from, room_to):
        pass

    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    # Updated move_south action now requires a door parameter and a direction check.
    @action(Room, Door, Room)
    def move_south(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to), self.north_of(room_from, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

[py_problem]
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define the objects as observed in the environment
        self.rooms = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room"])
        self.doors = ExplorationDomain.Door.create_objs(["south_door_kitchen_backyard", "west_door"])

    @init
    def init(self):
        init_state = [
            # Agent starts in the kitchen so that a door-based south move is available
            self.at(self.rooms["kitchen"]),
            
            # Door statuses: the south door (between kitchen and backyard) is open, while the west door is closed
            self.door_open(self.doors["south_door_kitchen_backyard"]),
            self.door_closed(self.doors["west_door"]),
            
            # Connectivity: the south door connects the kitchen to the backyard
            self.connects(self.rooms["kitchen"], self.doors["south_door_kitchen_backyard"], self.rooms["backyard"]),
            
            # Directional relation: the kitchen is north of the backyard, hence moving south from kitchen leads to backyard
            self.north_of(self.rooms["kitchen"], self.rooms["backyard"]),
            
            # Connectivity: the west door connects the backyard to the west_room
            self.connects(self.rooms["backyard"], self.doors["west_door"], self.rooms["west_room"])
        ]
        return init_state

    @goal
    def goal(self):
        # The exploration goal is to reach the unvisited location west_room
        return [self.at(self.rooms["west_room"])]

### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (direct_connects ?loc1 - location ?loc2 - location)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connects ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room - location
    south west - direction
  )
  (:init
    (at kitchen)
    (connects kitchen backyard south)
    (door_open kitchen backyard south)
    (connects backyard west_room west)
    (door_closed backyard west_room west)
    (north_of kitchen backyard)
  )
  (:goal (at west_room))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: move south. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_closed(self, door):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass

    @predicate(Room, Room)
    def direct_connects(self, room1, room2):
        pass

    @predicate(Room, Room)
    def north_of(self, room_from, room_to):
        pass

    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to), self.north_of(room_from, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect
Generated py_problem:
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.rooms = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room"])
        self.doors = ExplorationDomain.Door.create_objs(["south_door_kitchen_backyard", "west_door"])

    @init
    def init(self):
        init_state = [
            # Agent starts in the kitchen
            self.at(self.rooms["kitchen"]),
            
            # The south door is now closed, so move_south cannot be executed until it is opened
            self.door_closed(self.doors["south_door_kitchen_backyard"]),
            self.door_closed(self.doors["west_door"]),
            
            # Connectivity between kitchen and backyard via the south door
            self.connects(self.rooms["kitchen"], self.doors["south_door_kitchen_backyard"], self.rooms["backyard"]),
            
            # Kitchen is north of backyard, enabling a southward move
            self.north_of(self.rooms["kitchen"], self.rooms["backyard"]),
            
            # Connectivity between backyard and the unvisited west_room via the west door
            self.connects(self.rooms["backyard"], self.doors["west_door"], self.rooms["west_room"])
        ]
        return init_state

    @goal
    def goal(self):
        # The exploration goal remains to visit the unvisited location: west_room
        return [self.at(self.rooms["west_room"])]

--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move south
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (direct_connects ?loc1 - location ?loc2 - location)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connects ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room - location
    south west - direction
  )
  (:init
    (at kitchen)
    (connects kitchen backyard south)
    (door_open kitchen backyard south)
    (connects backyard west_room west)
    (door_closed backyard west_room west)
    (north_of kitchen backyard)
  )
  (:goal (at west_room))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: move south. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_closed(self, door):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass

    @predicate(Room, Room)
    def direct_connects(self, room1, room2):
        pass

    @predicate(Room, Room)
    def north_of(self, room_from, room_to):
        pass

    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to), self.north_of(room_from, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

### Python IR: problem class
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.rooms = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room"])
        self.doors = ExplorationDomain.Door.create_objs(["south_door_kitchen_backyard", "west_door"])

    @init
    def init(self):
        init_state = [
            # Agent starts in the kitchen
            self.at(self.rooms["kitchen"]),
            
            # The south door is now closed, so move_south cannot be executed until it is opened
            self.door_closed(self.doors["south_door_kitchen_backyard"]),
            self.door_closed(self.doors["west_door"]),
            
            # Connectivity between kitchen and backyard via the south door
            self.connects(self.rooms["kitchen"], self.doors["south_door_kitchen_backyard"], self.rooms["backyard"]),
            
            # Kitchen is north of backyard, enabling a southward move
            self.north_of(self.rooms["kitchen"], self.rooms["backyard"]),
            
            # Connectivity between backyard and the unvisited west_room via the west door
            self.connects(self.rooms["backyard"], self.doors["west_door"], self.rooms["west_room"])
        ]
        return init_state

    @goal
    def goal(self):
        # The exploration goal remains to visit the unvisited location: west_room
        return [self.at(self.rooms["west_room"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (direct_connects ?loc1 - location ?loc2 - location)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connects ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room - location
    south west - direction
  )
  (:init
    (at kitchen)
    (connects kitchen backyard south)
    (door_closed kitchen backyard south)
    (north_of kitchen backyard)
    (connects backyard west_room west)
    (door_closed backyard west_room west)
  )
  (:goal (at west_room))
)
Actions from solver: ['open door to south', 'move south', 'open door to west', 'move west'] 
Raw plan text: (OPEN-DOOR KITCHEN BACKYARD SOUTH)
(MOVE KITCHEN BACKYARD SOUTH)
(OPEN-DOOR BACKYARD WEST_ROOM WEST)
(MOVE BACKYARD WEST_ROOM WEST)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 4
	#Fluents: 7
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[1 / 2]--
--[1 / 3]--
--[0 / 0]--
--[0 / 4]--
Total time: 0.000169
Nodes generated during search: 7
Nodes expanded during search: 6
Plan found with cost: 4
Fast-BFS search completed in 0.000169 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_x6pwkz74/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 4 

Successful plans:
Value: 4
 /tmp/pddl_run_x6pwkz74/plan_tmp.txt 4

Current action_queue: ['open door to south', 'move south', 'open door to west', 'move west'] 
> open door to south 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.
 

----Larger Loop No. 3---- 
successful_actions: ['open door to south', 'move south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: open door to south
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_closed(self, door):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass

    @predicate(Room, Room)
    def direct_connects(self, room1, room2):
        pass

    @predicate(Room, Room)
    def north_of(self, room_from, room_to):
        pass

    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Room, Door, Room)
    def move_south(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to), self.north_of(room_from, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

[py_problem]
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.rooms = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room"])
        self.doors = ExplorationDomain.Door.create_objs(["south_door_kitchen_backyard", "west_door"])

    @init
    def init(self):
        init_state = [
            # Agent starts in the kitchen
            self.at(self.rooms["kitchen"]),
            
            # The south door is now closed, so move_south cannot be executed until it is opened
            self.door_closed(self.doors["south_door_kitchen_backyard"]),
            self.door_closed(self.doors["west_door"]),
            
            # Connectivity between kitchen and backyard via the south door
            self.connects(self.rooms["kitchen"], self.doors["south_door_kitchen_backyard"], self.rooms["backyard"]),
            
            # Kitchen is north of backyard, enabling a southward move
            self.north_of(self.rooms["kitchen"], self.rooms["backyard"]),
            
            # Connectivity between backyard and the unvisited west_room via the west door
            self.connects(self.rooms["backyard"], self.doors["west_door"], self.rooms["west_room"])
        ]
        return init_state

    @goal
    def goal(self):
        # The exploration goal remains to visit the unvisited location: west_room
        return [self.at(self.rooms["west_room"])]

### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (direct_connects ?loc1 - location ?loc2 - location)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connects ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room - location
    south west - direction
  )
  (:init
    (at kitchen)
    (connects kitchen backyard south)
    (door_closed kitchen backyard south)
    (north_of kitchen backyard)
    (connects backyard west_room west)
    (door_closed backyard west_room west)
  )
  (:goal (at west_room))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_closed(self, door):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass

    @predicate(Room, Room)
    def direct_connects(self, room1, room2):
        pass

    @predicate(Room, Room)
    def north_of(self, room_from, room_to):
        pass

    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, room_from, room_to):
        precond = [self.at(room_from), self.direct_connects(room_from, room_to), self.north_of(room_from, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

Generated py_problem:
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.rooms = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room"])
        # Only the west door exists since no door is present for the south direction
        self.doors = ExplorationDomain.Door.create_objs(["west_door"])

    @init
    def init(self):
        init_state = [
            # Agent starts in the kitchen
            self.at(self.rooms["kitchen"]),
            
            # Direct connectivity for moving south (no door exists for south movement)
            self.direct_connects(self.rooms["kitchen"], self.rooms["backyard"]),
            self.north_of(self.rooms["kitchen"], self.rooms["backyard"]),
            
            # Connectivity for west movement via a door from backyard to west_room
            self.connects(self.rooms["backyard"], self.doors["west_door"], self.rooms["west_room"]),
            self.door_closed(self.doors["west_door"])
        ]
        return init_state

    @goal
    def goal(self):
        # The exploration goal is to visit the unvisited location west_room
        return [self.at(self.rooms["west_room"])]


--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: open door to south
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (direct_connects ?loc1 - location ?loc2 - location)
    (north_of ?loc1 - location ?loc2 - location)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connects ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room - location
    south west - direction
  )
  (:init
    (at kitchen)
    (connects kitchen backyard south)
    (door_closed kitchen backyard south)
    (north_of kitchen backyard)
    (connects backyard west_room west)
    (door_closed backyard west_room west)
  )
  (:goal (at west_room))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_closed(self, door):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass

    @predicate(Room, Room)
    def direct_connects(self, room1, room2):
        pass

    @predicate(Room, Room)
    def north_of(self, room_from, room_to):
        pass

    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, room_from, room_to):
        precond = [self.at(room_from), self.direct_connects(room_from, room_to), self.north_of(room_from, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect


### Python IR: problem class
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.rooms = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room"])
        # Only the west door exists since no door is present for the south direction
        self.doors = ExplorationDomain.Door.create_objs(["west_door"])

    @init
    def init(self):
        init_state = [
            # Agent starts in the kitchen
            self.at(self.rooms["kitchen"]),
            
            # Direct connectivity for moving south (no door exists for south movement)
            self.direct_connects(self.rooms["kitchen"], self.rooms["backyard"]),
            self.north_of(self.rooms["kitchen"], self.rooms["backyard"]),
            
            # Connectivity for west movement via a door from backyard to west_room
            self.connects(self.rooms["backyard"], self.doors["west_door"], self.rooms["west_room"]),
            self.door_closed(self.doors["west_door"])
        ]
        return init_state

    @goal
    def goal(self):
        # The exploration goal is to visit the unvisited location west_room
        return [self.at(self.rooms["west_room"])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :strips :typing :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (direct_connects ?loc1 - location ?loc2 - location)
    (north_of ?loc1 - location ?loc2 - location)
    (no_door ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (or (and (no_door ?from ?to ?dir) (direct_connects ?from ?to) (north_of ?from ?to))
                           (and (connects ?from ?to ?dir) (door_open ?from ?to ?dir))))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room - location
    south west - direction
  )
  (:init
    (at kitchen)
    (no_door kitchen backyard south)
    (direct_connects kitchen backyard)
    (north_of kitchen backyard)
    (connects backyard west_room west)
    (door_closed backyard west_room west)
  )
  (:goal (at west_room))
)
Actions from solver: ['move south', 'open door to west', 'move west'] 
Raw plan text: (MOVE KITCHEN BACKYARD SOUTH)
(OPEN-DOOR BACKYARD WEST_ROOM WEST)
(MOVE BACKYARD WEST_ROOM WEST)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 3 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 3
	#Fluents: 5
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[1 / 2]--
--[0 / 0]--
--[0 / 3]--
Total time: 0.00015
Nodes generated during search: 5
Nodes expanded during search: 4
Plan found with cost: 3
Fast-BFS search completed in 0.00015 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_7xpa5p79/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 3 

Successful plans:
Value: 3
 /tmp/pddl_run_7xpa5p79/plan_tmp.txt 3

Current action_queue: ['move south', 'open door to west', 'move west'] 
> move south 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: move south. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status. 

----Larger Loop No. 4---- 
successful_actions: ['open door to south', 'move south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: move south
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally if possible)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_closed(self, door):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass

    @predicate(Room, Room)
    def direct_connects(self, room1, room2):
        pass

    @predicate(Room, Room)
    def north_of(self, room_from, room_to):
        pass

    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, room_from, room_to):
        precond = [self.at(room_from), self.direct_connects(room_from, room_to), self.north_of(room_from, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect


[py_problem]
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.rooms = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room"])
        # Only the west door exists since no door is present for the south direction
        self.doors = ExplorationDomain.Door.create_objs(["west_door"])

    @init
    def init(self):
        init_state = [
            # Agent starts in the kitchen
            self.at(self.rooms["kitchen"]),
            
            # Direct connectivity for moving south (no door exists for south movement)
            self.direct_connects(self.rooms["kitchen"], self.rooms["backyard"]),
            self.north_of(self.rooms["kitchen"], self.rooms["backyard"]),
            
            # Connectivity for west movement via a door from backyard to west_room
            self.connects(self.rooms["backyard"], self.doors["west_door"], self.rooms["west_room"]),
            self.door_closed(self.doors["west_door"])
        ]
        return init_state

    @goal
    def goal(self):
        # The exploration goal is to visit the unvisited location west_room
        return [self.at(self.rooms["west_room"])]


### Previous PDDL (generated from the IR)
[df]
(define (domain exploration)
  (:requirements :strips :typing :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (direct_connects ?loc1 - location ?loc2 - location)
    (north_of ?loc1 - location ?loc2 - location)
    (no_door ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (or (and (no_door ?from ?to ?dir) (direct_connects ?from ?to) (north_of ?from ?to))
                           (and (connects ?from ?to ?dir) (door_open ?from ?to ?dir))))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room - location
    south west - direction
  )
  (:init
    (at kitchen)
    (no_door kitchen backyard south)
    (direct_connects kitchen backyard)
    (north_of kitchen backyard)
    (connects backyard west_room west)
    (door_closed backyard west_room west)
  )
  (:goal (at west_room))
)
### Planner Error from previous PDDL (if any)
N/A
### Environment feedback from previous action (if any)
This is the action you take: move south. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_closed(self, door):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass

    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(self.Room, self.Door, self.Room)
    def move_south(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

    @action(self.Room, self.Door, self.Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

Generated py_problem:
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define rooms: kitchen is the start, and backyard, driveway, west_room are other locations
        self.rooms = ExplorationDomain.Room.create_objs(['kitchen', 'backyard', 'driveway', 'west_room'])
        # Now both south and west doors exist
        self.doors = ExplorationDomain.Door.create_objs(['south_door', 'west_door'])

    @init
    def init(self):
        init_state = [
            # Agent starts in the kitchen
            self.at(self.rooms['kitchen']),
            
            # Connectivity for south movement via a door between kitchen and backyard
            self.connects(self.rooms['kitchen'], self.doors['south_door'], self.rooms['backyard']),
            self.door_closed(self.doors['south_door']),
            
            # Connectivity for west movement via a door between backyard and west_room
            self.connects(self.rooms['backyard'], self.doors['west_door'], self.rooms['west_room']),
            self.door_closed(self.doors['west_door'])
        ]
        return init_state

    @goal
    def goal(self):
        # The exploration goal is to visit an unvisited location; here, the target is the backyard (south of the kitchen)
        return [self.at(self.rooms['backyard'])]


--- Attempting to Plan (Small Loop Try #1) ---
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move south
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :strips :typing :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
    (direct_connects ?loc1 - location ?loc2 - location)
    (north_of ?loc1 - location ?loc2 - location)
    (no_door ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (or (and (no_door ?from ?to ?dir) (direct_connects ?from ?to) (north_of ?from ?to))
                           (and (connects ?from ?to ?dir) (door_open ?from ?to ?dir))))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room - location
    south west - direction
  )
  (:init
    (at kitchen)
    (no_door kitchen backyard south)
    (direct_connects kitchen backyard)
    (north_of kitchen backyard)
    (connects backyard west_room west)
    (door_closed backyard west_room west)
  )
  (:goal (at west_room))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: move south. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")

    @predicate(Room)
    def at(self, room):
        pass

    @predicate(Door)
    def door_closed(self, door):
        pass

    @predicate(Door)
    def door_open(self, door):
        pass

    @predicate(Room, Door, Room)
    def connects(self, room_from, door, room_to):
        pass

    @action(Door)
    def open_door_to_south(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_south(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(Door)
    def open_door_to_west(self, door):
        precond = [self.door_closed(door)]
        effect = [~self.door_closed(door), self.door_open(door)]
        return precond, effect

    @action(Door)
    def close_door_to_west(self, door):
        precond = [self.door_open(door)]
        effect = [~self.door_open(door), self.door_closed(door)]
        return precond, effect

    @action(self.Room, self.Door, self.Room)
    def move_south(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect

    @action(self.Room, self.Door, self.Room)
    def move_west(self, room_from, door, room_to):
        precond = [self.at(room_from), self.door_open(door), self.connects(room_from, door, room_to)]
        effect = [~self.at(room_from), self.at(room_to)]
        return precond, effect


### Python IR: problem class
from py2pddl import init, goal

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define rooms: kitchen is the start, and backyard, driveway, west_room are other locations
        self.rooms = ExplorationDomain.Room.create_objs(['kitchen', 'backyard', 'driveway', 'west_room'])
        # Now both south and west doors exist
        self.doors = ExplorationDomain.Door.create_objs(['south_door', 'west_door'])

    @init
    def init(self):
        init_state = [
            # Agent starts in the kitchen
            self.at(self.rooms['kitchen']),
            
            # Connectivity for south movement via a door between kitchen and backyard
            self.connects(self.rooms['kitchen'], self.doors['south_door'], self.rooms['backyard']),
            self.door_closed(self.doors['south_door']),
            
            # Connectivity for west movement via a door between backyard and west_room
            self.connects(self.rooms['backyard'], self.doors['west_door'], self.rooms['west_room']),
            self.door_closed(self.doors['west_door'])
        ]
        return init_state

    @goal
    def goal(self):
        # The exploration goal is to visit an unvisited location; here, the target is the backyard (south of the kitchen)
        return [self.at(self.rooms['backyard'])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :strips :typing)
  (:types location direction)
  (:predicates
    (at ?loc - location)
    (connects ?loc1 - location ?loc2 - location ?dir - direction)
    (door_closed ?loc1 - location ?loc2 - location ?dir - direction)
    (door_open ?loc1 - location ?loc2 - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (connects ?loc1 ?loc2 ?dir) (door_closed ?loc1 ?loc2 ?dir))
    :effect (and (not (door_closed ?loc1 ?loc2 ?dir)) (door_open ?loc1 ?loc2 ?dir))
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (connects ?from ?to ?dir) (door_open ?from ?to ?dir))
    :effect (and (not (at ?from)) (at ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room - location
    south west - direction
  )
  (:init
    (at kitchen)
    (connects kitchen backyard south)
    (door_closed kitchen backyard south)
    (connects backyard west_room west)
    (door_closed backyard west_room west)
  )
  (:goal (at backyard))
)
Actions from solver: ['open door to south', 'move south'] 
Raw plan text: (OPEN-DOOR KITCHEN BACKYARD SOUTH)
(MOVE KITCHEN BACKYARD SOUTH)
 
Solver stderr:
                    ── SOLVER LOG ─────────────────────────────────
                    --- OK.
 Match tree built with 4 nodes.

PDDL problem description loaded: 
	Domain: EXPLORATION
	Problem: EXPLORATION-PROBLEM
	#Actions: 4
	#Fluents: 7
Goals found: 1
Goals_Edges found: 1
Starting search with 1-BFWS...
--[1 / 0]--
--[1 / 1]--
--[0 / 0]--
--[0 / 2]--
Total time: 0.000132
Nodes generated during search: 5
Nodes expanded during search: 2
Plan found with cost: 2
Fast-BFS search completed in 0.000132 secs
                    ── VAL LOG ────────────────────────────────────
                    Checking plan: /tmp/pddl_run_vgni7yap/plan_tmp.txt
Plan executed successfully - checking goal
Plan valid
Final value: 2 

Successful plans:
Value: 2
 /tmp/pddl_run_vgni7yap/plan_tmp.txt 2

Current action_queue: ['open door to south', 'move south'] 
> open door to south 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.
 
