[Baseline] Trial 1 (Attempt 1) | Model: meta-llama/Llama-3.3-70B-Instruct | Failed: CUDA out of memory. Tried to allocate 2.96 GiB. GPU 0 has a total capacity of 93.10 GiB of which 2.40 GiB is free. Including non-PyTorch memory, this process has 90.66 GiB memory in use. Of the allocated memory 83.52 GiB is allocated by PyTorch, and 6.48 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[Baseline] Trial 1 (Attempt 2) | Model: meta-llama/Llama-3.3-70B-Instruct | Failed: CUDA out of memory. Tried to allocate 3.02 GiB. GPU 0 has a total capacity of 93.10 GiB of which 1.97 GiB is free. Including non-PyTorch memory, this process has 91.09 GiB memory in use. Of the allocated memory 82.79 GiB is allocated by PyTorch, and 7.64 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[Baseline] Trial 2 (Attempt 1) | Model: meta-llama/Llama-3.3-70B-Instruct | Failed: CUDA out of memory. Tried to allocate 3.14 GiB. GPU 0 has a total capacity of 93.10 GiB of which 1.09 GiB is free. Including non-PyTorch memory, this process has 91.97 GiB memory in use. Of the allocated memory 83.28 GiB is allocated by PyTorch, and 8.03 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[Baseline] Trial 2 (Attempt 2) | Model: meta-llama/Llama-3.3-70B-Instruct | Failed: CUDA out of memory. Tried to allocate 3.21 GiB. GPU 0 has a total capacity of 93.10 GiB of which 798.00 MiB is free. Including non-PyTorch memory, this process has 92.28 GiB memory in use. Of the allocated memory 84.78 GiB is allocated by PyTorch, and 6.84 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[PDDLego+] Trial 0 (Attempt 1) | Model: meta-llama/Llama-3.3-70B-Instruct | Goal Type: detailed | Failed: CUDA out of memory. Tried to allocate 3.29 GiB. GPU 0 has a total capacity of 93.10 GiB of which 152.00 MiB is free. Including non-PyTorch memory, this process has 92.91 GiB memory in use. Of the allocated memory 84.11 GiB is allocated by PyTorch, and 8.15 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[PDDLego+] Trial 0 (Attempt 2) | Model: meta-llama/Llama-3.3-70B-Instruct | Goal Type: detailed | Failed: CUDA out of memory. Tried to allocate 3.38 GiB. GPU 0 has a total capacity of 93.10 GiB of which 2.86 GiB is free. Including non-PyTorch memory, this process has 90.20 GiB memory in use. Of the allocated memory 82.66 GiB is allocated by PyTorch, and 6.88 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[PDDLego+] Trial 1 (Attempt 1) | Model: meta-llama/Llama-3.3-70B-Instruct | Goal Type: detailed | Failed: CUDA out of memory. Tried to allocate 3.46 GiB. GPU 0 has a total capacity of 93.10 GiB of which 2.35 GiB is free. Including non-PyTorch memory, this process has 90.71 GiB memory in use. Of the allocated memory 82.59 GiB is allocated by PyTorch, and 7.46 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[PDDLego+] Trial 1 (Attempt 2) | Model: meta-llama/Llama-3.3-70B-Instruct | Goal Type: detailed | Failed: CUDA out of memory. Tried to allocate 3.55 GiB. GPU 0 has a total capacity of 93.10 GiB of which 1.99 GiB is free. Including non-PyTorch memory, this process has 91.07 GiB memory in use. Of the allocated memory 82.50 GiB is allocated by PyTorch, and 7.90 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[PDDLego+] Trial 2 (Attempt 1) | Model: meta-llama/Llama-3.3-70B-Instruct | Goal Type: detailed | Failed: CUDA out of memory. Tried to allocate 3.64 GiB. GPU 0 has a total capacity of 93.10 GiB of which 1.65 GiB is free. Including non-PyTorch memory, this process has 91.41 GiB memory in use. Of the allocated memory 83.17 GiB is allocated by PyTorch, and 7.58 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[PDDLego+] Trial 2 (Attempt 2) | Model: meta-llama/Llama-3.3-70B-Instruct | Goal Type: detailed | Failed: CUDA out of memory. Tried to allocate 3.72 GiB. GPU 0 has a total capacity of 93.10 GiB of which 3.43 GiB is free. Including non-PyTorch memory, this process has 89.63 GiB memory in use. Of the allocated memory 80.93 GiB is allocated by PyTorch, and 8.05 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[PDDLego+] Trial 0 (Attempt 1) | Model: meta-llama/Llama-3.3-70B-Instruct | Goal Type: detailed | Failed: Max retries exceeded. Failed to get result from solver.
[PDDLego+] Trial 0 (Attempt 2) | Model: meta-llama/Llama-3.3-70B-Instruct | Goal Type: detailed | Failed: Max retries exceeded. Failed to get result from solver.
[PDDLego+] Trial 1 (Attempt 1) | Model: meta-llama/Llama-3.3-70B-Instruct | Goal Type: detailed | Failed: Max retries exceeded. Failed to get result from solver.
[PDDLego+] Trial 1 (Attempt 2) | Model: meta-llama/Llama-3.3-70B-Instruct | Goal Type: detailed | Failed: Max retries exceeded. Failed to get result from solver.
[PDDLego+] Trial 2 (Attempt 1) | Model: meta-llama/Llama-3.3-70B-Instruct | Goal Type: detailed | Failed: Max retries exceeded. Failed to get result from solver.
[PDDLego+] Trial 2 (Attempt 2) | Model: meta-llama/Llama-3.3-70B-Instruct | Goal Type: detailed | Failed: Max retries exceeded. Failed to get result from solver.
