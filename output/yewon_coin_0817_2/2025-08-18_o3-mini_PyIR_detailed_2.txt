Observations: You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. 
To the South you see a closed patio door. To the West you see a closed plain door.  
Gold path: ['look around', 'open door to south', 'open door to west', 'move south', 'open door to west', 'move west', 'open door to south', 'move east', 'move south', 'move north', 'move north', 'move south', 'move east', 'open door to north', 'move west', 'move south', 'move north', 'move east', 'move west', 'move east', 'move north', 'take coin'] 
Valid Actions: ['look around', 'close door to west', 'move west', 'open door to south', 'open door to west', 'inventory', 'move south', 'close door to south'] 
taskDescription: Your task is to search the environment and find the coin.  Once you find the coin, take it. 
brief_obs: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 
 


====Step 0==== 

----Larger Loop No. 0---- 
successful_actions: [] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")
    
    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass
    
    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass
    
    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction dir"""
        pass
    
    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass
    
    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, "south"), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect
    
    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, "west"), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect
    
    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, "south"), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect
    
    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, "west"), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect
    
    @action(Room, Door, Room)
    def move_south(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, "south"), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect
    
    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, "west"), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect
Generated py_problem:
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "south_room", "west_room"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "plain_door"])
        self.dirObjs = ExplorationDomain.Direction.create_objs(["south", "west"])
    
    @init
    def init(self):
        return [
            self.at(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["kitchen"]),
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["plain_door"], self.dirObjs["west"])
        ]
    
    @goal
    def goal(self):
        return [self.at(self.roomObjs["south_room"])]
--Small Loop--: 0 
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
N/A

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")
    
    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass
    
    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass
    
    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction dir"""
        pass
    
    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass
    
    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, "south"), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect
    
    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, "west"), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect
    
    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, "south"), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect
    
    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, "west"), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect
    
    @action(Room, Door, Room)
    def move_south(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, "south"), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect
    
    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, "west"), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

### Python IR: problem class
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "south_room", "west_room"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "plain_door"])
        self.dirObjs = ExplorationDomain.Direction.create_objs(["south", "west"])
    
    @init
    def init(self):
        return [
            self.at(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["kitchen"]),
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["plain_door"], self.dirObjs["west"])
        ]
    
    @goal
    def goal(self):
        return [self.at(self.roomObjs["south_room"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?l1 - location ?l2 - location ?d - direction)
    (open ?l1 - location ?l2 - location ?d - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (door ?from ?to ?dir) (open ?from ?to ?dir) (not (visited ?to)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen south_room west_room - location
    south west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (door kitchen south_room south)
    (door kitchen west_room west)
  )
  (:goal (at south_room))
)
Actions from solver(df, pf): ['open door to south', 'move south'] 
Raw plan text: (OPEN-DOOR KITCHEN SOUTH_ROOM SOUTH)
(MOVE KITCHEN SOUTH_ROOM SOUTH)
 
Current action_queue: ['open door to south', 'move south'] 
> open door to south 
 You open the patio door, revealing the backyard.  
Small Loop, action_queue: ['move south'] 
Current action_queue: ['move south'] 
> move south 
 You are in the backyard. In one part of the room you see a barbeque. There is also a workbench, that has nothing on it. You also see a patio chair, that has nothing on it. In another part of the room you see a patio table, that has nothing on it. In one part of the room you see a clothes line, that has nothing on it. There is also a garden, that has nothing on it. 
Through an open patio door, to the North you see the kitchen. To the South you see the driveway. To the East you see the street. To the West you see a closed patio door.  


====Step 1==== 

----Larger Loop No. 0---- 
successful_actions: ['open door to south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: open door to south
You open the patio door, revealing the backyard. 

Action: move south
You are in the backyard. Through an open patio door, to the North you see the kitchen. To the South you see the driveway. To the East you see the street. To the West you see a closed patio door. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")
    
    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass
    
    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass
    
    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction dir"""
        pass
    
    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass
    
    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, "south"), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect
    
    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, "west"), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect
    
    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, "south"), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect
    
    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, "west"), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect
    
    @action(Room, Door, Room)
    def move_south(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, "south"), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect
    
    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, "west"), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

[py_problem]
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "south_room", "west_room"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "plain_door"])
        self.dirObjs = ExplorationDomain.Direction.create_objs(["south", "west"])
    
    @init
    def init(self):
        return [
            self.at(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["kitchen"]),
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["plain_door"], self.dirObjs["west"])
        ]
    
    @goal
    def goal(self):
        return [self.at(self.roomObjs["south_room"])]

### Previous PDDL (edit minimally)
[df]
(define (domain exploration)
  (:requirements :typing :strips)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?l1 - location ?l2 - location ?d - direction)
    (open ?l1 - location ?l2 - location ?d - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (door ?from ?to ?dir) (open ?from ?to ?dir) (not (visited ?to)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen south_room west_room - location
    south west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (door kitchen south_room south)
    (door kitchen west_room west)
  )
  (:goal (at south_room))
)
### Environment feedback (if any)
N/A

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type('Room')
    Door = create_type('Door')
    Direction = create_type('Direction')
    
    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass
    
    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass
    
    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction dir"""
        pass
    
    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass
    
    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect
    
    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect
    
    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect
    
    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect
    
    @action(Room, Door, Room)
    def move_south(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect
    
    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect
Generated py_problem:
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define rooms observed: the agent started in 'kitchen', then moved to 'backyard'.
        # From the backyard, the agent sees a 'driveway', a room to the west ('west_room') and to the east ('street').
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room", "street"])
        
        # Define doors observed:
        # 'patio_door' connects the kitchen and backyard and is open.
        # 'backyard_south_door' connects backyard to driveway (closed initially).
        # 'backyard_west_door' connects backyard to west_room (closed initially).
        # 'backyard_east_door' connects backyard to street (observed but not actionable).
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "backyard_south_door", "backyard_west_door", "backyard_east_door"])
        
        # Define all directions that occur in observations
        self.dirObjs = ExplorationDomain.Direction.create_objs(["north", "south", "west", "east"])
    
    @init
    def init(self):
        init_state = [
            # The agent has moved from the kitchen to the backyard
            self.at(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            
            # Door between kitchen and backyard via the patio door
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["patio_door"], self.dirObjs["north"]),
            self.open_door(self.doorObjs["patio_door"]),
            
            # Additional door relations in the backyard
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_south_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_west_door"], self.dirObjs["west"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_east_door"], self.dirObjs["east"])
        ]
        return init_state
    
    @goal
    def goal(self):
        # The agent's objective is to explore a new (unvisited) area.
        # Here, we set the goal to be moving south into the driveway from the backyard.
        return [self.at(self.roomObjs["driveway"])]
--Small Loop--: 1 
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: open door to south
You open the patio door, revealing the backyard. 

Action: move south
You are in the backyard. Through an open patio door, to the North you see the kitchen. To the South you see the driveway. To the East you see the street. To the West you see a closed patio door. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :strips)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?l1 - location ?l2 - location ?d - direction)
    (open ?l1 - location ?l2 - location ?d - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (door ?from ?to ?dir) (open ?from ?to ?dir) (not (visited ?to)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen south_room west_room - location
    south west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (door kitchen south_room south)
    (door kitchen west_room west)
  )
  (:goal (at south_room))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type('Room')
    Door = create_type('Door')
    Direction = create_type('Direction')
    
    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass
    
    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass
    
    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction dir"""
        pass
    
    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass
    
    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect
    
    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect
    
    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect
    
    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect
    
    @action(Room, Door, Room)
    def move_south(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect
    
    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

### Python IR: problem class
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define rooms observed: the agent started in 'kitchen', then moved to 'backyard'.
        # From the backyard, the agent sees a 'driveway', a room to the west ('west_room') and to the east ('street').
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room", "street"])
        
        # Define doors observed:
        # 'patio_door' connects the kitchen and backyard and is open.
        # 'backyard_south_door' connects backyard to driveway (closed initially).
        # 'backyard_west_door' connects backyard to west_room (closed initially).
        # 'backyard_east_door' connects backyard to street (observed but not actionable).
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "backyard_south_door", "backyard_west_door", "backyard_east_door"])
        
        # Define all directions that occur in observations
        self.dirObjs = ExplorationDomain.Direction.create_objs(["north", "south", "west", "east"])
    
    @init
    def init(self):
        init_state = [
            # The agent has moved from the kitchen to the backyard
            self.at(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            
            # Door between kitchen and backyard via the patio door
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["patio_door"], self.dirObjs["north"]),
            self.open_door(self.doorObjs["patio_door"]),
            
            # Additional door relations in the backyard
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_south_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_west_door"], self.dirObjs["west"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_east_door"], self.dirObjs["east"])
        ]
        return init_state
    
    @goal
    def goal(self):
        # The agent's objective is to explore a new (unvisited) area.
        # Here, we set the goal to be moving south into the driveway from the backyard.
        return [self.at(self.roomObjs["driveway"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?d - direction)
    (open ?loc1 - location ?loc2 - location ?d - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (door ?from ?to ?dir) (open ?from ?to ?dir) (not (visited ?to)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at backyard)
    (visited kitchen)
    (visited backyard)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (door backyard driveway south)
    (door backyard west_room west)
    (door backyard street east)
    (open backyard kitchen north)
  )
  (:goal (at driveway))
)
Actions from solver(df, pf): ['open door to south', 'move south'] 
Raw plan text: (OPEN-DOOR BACKYARD DRIVEWAY SOUTH)
(MOVE BACKYARD DRIVEWAY SOUTH)
 
Current action_queue: ['open door to south', 'move south'] 
> open door to south 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.
 

----Larger Loop No. 1---- 
successful_actions: ['open door to south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: open door to south
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type('Room')
    Door = create_type('Door')
    Direction = create_type('Direction')
    
    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass
    
    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass
    
    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction dir"""
        pass
    
    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass
    
    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect
    
    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect
    
    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect
    
    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect
    
    @action(Room, Door, Room)
    def move_south(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect
    
    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

[py_problem]
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define rooms observed: the agent started in 'kitchen', then moved to 'backyard'.
        # From the backyard, the agent sees a 'driveway', a room to the west ('west_room') and to the east ('street').
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room", "street"])
        
        # Define doors observed:
        # 'patio_door' connects the kitchen and backyard and is open.
        # 'backyard_south_door' connects backyard to driveway (closed initially).
        # 'backyard_west_door' connects backyard to west_room (closed initially).
        # 'backyard_east_door' connects backyard to street (observed but not actionable).
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "backyard_south_door", "backyard_west_door", "backyard_east_door"])
        
        # Define all directions that occur in observations
        self.dirObjs = ExplorationDomain.Direction.create_objs(["north", "south", "west", "east"])
    
    @init
    def init(self):
        init_state = [
            # The agent has moved from the kitchen to the backyard
            self.at(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            
            # Door between kitchen and backyard via the patio door
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["patio_door"], self.dirObjs["north"]),
            self.open_door(self.doorObjs["patio_door"]),
            
            # Additional door relations in the backyard
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_south_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_west_door"], self.dirObjs["west"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_east_door"], self.dirObjs["east"])
        ]
        return init_state
    
    @goal
    def goal(self):
        # The agent's objective is to explore a new (unvisited) area.
        # Here, we set the goal to be moving south into the driveway from the backyard.
        return [self.at(self.roomObjs["driveway"])]

### Previous PDDL (edit minimally)
[df]
(define (domain exploration)
  (:requirements :typing :strips)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?d - direction)
    (open ?loc1 - location ?loc2 - location ?d - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (door ?from ?to ?dir) (open ?from ?to ?dir) (not (visited ?to)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at backyard)
    (visited kitchen)
    (visited backyard)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (door backyard driveway south)
    (door backyard west_room west)
    (door backyard street east)
    (open backyard kitchen north)
  )
  (:goal (at driveway))
)
### Environment feedback (if any)
This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type('Room')
    Door = create_type('Door')
    Direction = create_type('Direction')

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r in the given direction without a door"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    # Updated move_south: if there is no door, the agent can directly move south using an adjacent connection.
    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

Generated py_problem:
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Rooms in the environment
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room", "street"])
        
        # Doors observed - note that the south door has been removed since no door exists in that direction
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "backyard_west_door", "backyard_east_door"])
        
        # Directions
        self.dirObjs = ExplorationDomain.Direction.create_objs(["north", "south", "west", "east"])
        
    @init
    def init(self):
        init_state = [
            # Agent is at the backyard, having visited the kitchen and backyard
            self.at(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            
            # Door connection between kitchen and backyard via the patio door
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["patio_door"], self.dirObjs["north"]),
            self.open_door(self.doorObjs["patio_door"]),
            
            # Door connections in the backyard for west and east
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_west_door"], self.dirObjs["west"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_east_door"], self.dirObjs["east"]),
            
            # For the south direction from the backyard, no door exists; add an adjacent relationship instead
            self.adjacent(self.roomObjs["backyard"], self.roomObjs["driveway"], self.dirObjs["south"])
        ]
        return init_state
    
    @goal
    def goal(self):
        # Goal: explore the new (unvisited) area to the south (driveway)
        return [self.at(self.roomObjs["driveway"])]

--Small Loop--: 2 
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: open door to south
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :strips)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?d - direction)
    (open ?loc1 - location ?loc2 - location ?d - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (door ?from ?to ?dir) (open ?from ?to ?dir) (not (visited ?to)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at backyard)
    (visited kitchen)
    (visited backyard)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (door backyard driveway south)
    (door backyard west_room west)
    (door backyard street east)
    (open backyard kitchen north)
  )
  (:goal (at driveway))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: open door to south. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type('Room')
    Door = create_type('Door')
    Direction = create_type('Direction')

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r in the given direction without a door"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    # Updated move_south: if there is no door, the agent can directly move south using an adjacent connection.
    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect


### Python IR: problem class
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Rooms in the environment
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room", "street"])
        
        # Doors observed - note that the south door has been removed since no door exists in that direction
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "backyard_west_door", "backyard_east_door"])
        
        # Directions
        self.dirObjs = ExplorationDomain.Direction.create_objs(["north", "south", "west", "east"])
        
    @init
    def init(self):
        init_state = [
            # Agent is at the backyard, having visited the kitchen and backyard
            self.at(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            
            # Door connection between kitchen and backyard via the patio door
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["patio_door"], self.dirObjs["north"]),
            self.open_door(self.doorObjs["patio_door"]),
            
            # Door connections in the backyard for west and east
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_west_door"], self.dirObjs["west"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_east_door"], self.dirObjs["east"]),
            
            # For the south direction from the backyard, no door exists; add an adjacent relationship instead
            self.adjacent(self.roomObjs["backyard"], self.roomObjs["driveway"], self.dirObjs["south"])
        ]
        return init_state
    
    @goal
    def goal(self):
        # Goal: explore the new (unvisited) area to the south (driveway)
        return [self.at(self.roomObjs["driveway"])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at backyard)
    (visited kitchen)
    (visited backyard)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (door backyard west_room west)
    (door backyard street east)
    (open backyard kitchen north)
    (adjacent backyard driveway south)
  )
  (:goal (at driveway))
)
Actions from solver(df, pf): ['move south'] 
Raw plan text: (MOVE BACKYARD DRIVEWAY SOUTH)
 
Current action_queue: ['move south'] 
> move south 
 You are in the driveway. 
To the North you see the backyard.  


====Step 2==== 

----Larger Loop No. 0---- 
successful_actions: ['open door to south', 'move south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: move south
You are in the driveway. To the North you see the backyard. 

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type('Room')
    Door = create_type('Door')
    Direction = create_type('Direction')

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r in the given direction without a door"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    # Updated move_south: if there is no door, the agent can directly move south using an adjacent connection.
    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect


[py_problem]
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Rooms in the environment
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room", "street"])
        
        # Doors observed - note that the south door has been removed since no door exists in that direction
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "backyard_west_door", "backyard_east_door"])
        
        # Directions
        self.dirObjs = ExplorationDomain.Direction.create_objs(["north", "south", "west", "east"])
        
    @init
    def init(self):
        init_state = [
            # Agent is at the backyard, having visited the kitchen and backyard
            self.at(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            
            # Door connection between kitchen and backyard via the patio door
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["patio_door"], self.dirObjs["north"]),
            self.open_door(self.doorObjs["patio_door"]),
            
            # Door connections in the backyard for west and east
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_west_door"], self.dirObjs["west"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_east_door"], self.dirObjs["east"]),
            
            # For the south direction from the backyard, no door exists; add an adjacent relationship instead
            self.adjacent(self.roomObjs["backyard"], self.roomObjs["driveway"], self.dirObjs["south"])
        ]
        return init_state
    
    @goal
    def goal(self):
        # Goal: explore the new (unvisited) area to the south (driveway)
        return [self.at(self.roomObjs["driveway"])]


### Previous PDDL (edit minimally)
[df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at backyard)
    (visited kitchen)
    (visited backyard)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (door backyard west_room west)
    (door backyard street east)
    (open backyard kitchen north)
    (adjacent backyard driveway south)
  )
  (:goal (at driveway))
)
### Environment feedback (if any)
N/A

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type('Room')
    Door = create_type('Door')
    Direction = create_type('Direction')

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r1 in the given direction without a door"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

Generated py_problem:
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define the rooms observed in the environment
        self.roomObjs = ExplorationDomain.Room.create_objs(['kitchen', 'backyard', 'driveway', 'west_room', 'street'])
        
        # Doors observed in the environment
        self.doorObjs = ExplorationDomain.Door.create_objs(['patio_door', 'backyard_west_door', 'backyard_east_door'])
        
        # Directions available
        self.dirObjs = ExplorationDomain.Direction.create_objs(['north', 'south', 'west', 'east'])

    @init
    def init(self):
        init_state = [
            # After executing move south, the agent is now in the driveway
            self.at(self.roomObjs['driveway']),
            self.visited(self.roomObjs['kitchen']),
            self.visited(self.roomObjs['backyard']),
            self.visited(self.roomObjs['driveway']),
            
            # Door connections as previously observed
            self.door_at(self.roomObjs['kitchen'], self.doorObjs['patio_door'], self.dirObjs['south']),
            self.door_at(self.roomObjs['backyard'], self.doorObjs['patio_door'], self.dirObjs['north']),
            self.open_door(self.doorObjs['patio_door']),
            self.door_at(self.roomObjs['backyard'], self.doorObjs['backyard_west_door'], self.dirObjs['west']),
            self.door_at(self.roomObjs['backyard'], self.doorObjs['backyard_east_door'], self.dirObjs['east']),
            
            # Existing adjacent fact: driveway is to the south of the backyard
            self.adjacent(self.roomObjs['backyard'], self.roomObjs['driveway'], self.dirObjs['south']),
            
            # New observation: from the driveway, the backyard is seen to the north
            self.adjacent(self.roomObjs['driveway'], self.roomObjs['backyard'], self.dirObjs['north'])
        ]
        return init_state

    @goal
    def goal(self):
        # Previously, the goal was to reach the driveway. Although the agent is now in the driveway,
        # we retain this goal for consistency. In a continuing exploration setting the next target should
        # be an unvisited location, but current observations do not specify a direct connection to one.
        return [self.at(self.roomObjs['driveway'])]

--Small Loop--: 1 
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move south
You are in the driveway. To the North you see the backyard. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at backyard)
    (visited kitchen)
    (visited backyard)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (door backyard west_room west)
    (door backyard street east)
    (open backyard kitchen north)
    (adjacent backyard driveway south)
  )
  (:goal (at driveway))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type('Room')
    Door = create_type('Door')
    Direction = create_type('Direction')

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r1 in the given direction without a door"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect


### Python IR: problem class
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define the rooms observed in the environment
        self.roomObjs = ExplorationDomain.Room.create_objs(['kitchen', 'backyard', 'driveway', 'west_room', 'street'])
        
        # Doors observed in the environment
        self.doorObjs = ExplorationDomain.Door.create_objs(['patio_door', 'backyard_west_door', 'backyard_east_door'])
        
        # Directions available
        self.dirObjs = ExplorationDomain.Direction.create_objs(['north', 'south', 'west', 'east'])

    @init
    def init(self):
        init_state = [
            # After executing move south, the agent is now in the driveway
            self.at(self.roomObjs['driveway']),
            self.visited(self.roomObjs['kitchen']),
            self.visited(self.roomObjs['backyard']),
            self.visited(self.roomObjs['driveway']),
            
            # Door connections as previously observed
            self.door_at(self.roomObjs['kitchen'], self.doorObjs['patio_door'], self.dirObjs['south']),
            self.door_at(self.roomObjs['backyard'], self.doorObjs['patio_door'], self.dirObjs['north']),
            self.open_door(self.doorObjs['patio_door']),
            self.door_at(self.roomObjs['backyard'], self.doorObjs['backyard_west_door'], self.dirObjs['west']),
            self.door_at(self.roomObjs['backyard'], self.doorObjs['backyard_east_door'], self.dirObjs['east']),
            
            # Existing adjacent fact: driveway is to the south of the backyard
            self.adjacent(self.roomObjs['backyard'], self.roomObjs['driveway'], self.dirObjs['south']),
            
            # New observation: from the driveway, the backyard is seen to the north
            self.adjacent(self.roomObjs['driveway'], self.roomObjs['backyard'], self.dirObjs['north'])
        ]
        return init_state

    @goal
    def goal(self):
        # Previously, the goal was to reach the driveway. Although the agent is now in the driveway,
        # we retain this goal for consistency. In a continuing exploration setting the next target should
        # be an unvisited location, but current observations do not specify a direct connection to one.
        return [self.at(self.roomObjs['driveway'])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)
    (door backyard west_room west)
    (door backyard street east)
    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
  )
  (:goal (at driveway))
)
Actions from solver(df, pf): None 
Raw plan text:  
--Small Loop--: 1 
[IR→PDDL Prompt Retry] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move south
You are in the driveway. To the North you see the backyard. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)
    (door backyard west_room west)
    (door backyard street east)
    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
  )
  (:goal (at driveway))
)

### (Optional) Planner/validator feedback to fix
── SOLVER LOG ─────────────────────────────────
ff: goal can be simplified to TRUE. The empty plan solves it
── VAL LOG ────────────────────────────────────
No validation log.


### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type('Room')
    Door = create_type('Door')
    Direction = create_type('Direction')

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r1 in the given direction without a door"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect


### Python IR: problem class
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define the rooms observed in the environment
        self.roomObjs = ExplorationDomain.Room.create_objs(['kitchen', 'backyard', 'driveway', 'west_room', 'street'])
        
        # Doors observed in the environment
        self.doorObjs = ExplorationDomain.Door.create_objs(['patio_door', 'backyard_west_door', 'backyard_east_door'])
        
        # Directions available
        self.dirObjs = ExplorationDomain.Direction.create_objs(['north', 'south', 'west', 'east'])

    @init
    def init(self):
        init_state = [
            # After executing move south, the agent is now in the driveway
            self.at(self.roomObjs['driveway']),
            self.visited(self.roomObjs['kitchen']),
            self.visited(self.roomObjs['backyard']),
            self.visited(self.roomObjs['driveway']),
            
            # Door connections as previously observed
            self.door_at(self.roomObjs['kitchen'], self.doorObjs['patio_door'], self.dirObjs['south']),
            self.door_at(self.roomObjs['backyard'], self.doorObjs['patio_door'], self.dirObjs['north']),
            self.open_door(self.doorObjs['patio_door']),
            self.door_at(self.roomObjs['backyard'], self.doorObjs['backyard_west_door'], self.dirObjs['west']),
            self.door_at(self.roomObjs['backyard'], self.doorObjs['backyard_east_door'], self.dirObjs['east']),
            
            # Existing adjacent fact: driveway is to the south of the backyard
            self.adjacent(self.roomObjs['backyard'], self.roomObjs['driveway'], self.dirObjs['south']),
            
            # New observation: from the driveway, the backyard is seen to the north
            self.adjacent(self.roomObjs['driveway'], self.roomObjs['backyard'], self.dirObjs['north'])
        ]
        return init_state

    @goal
    def goal(self):
        # Previously, the goal was to reach the driveway. Although the agent is now in the driveway,
        # we retain this goal for consistency. In a continuing exploration setting the next target should
        # be an unvisited location, but current observations do not specify a direct connection to one.
        return [self.at(self.roomObjs['driveway'])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)
    (door backyard west_room west)
    (door backyard street east)
    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
  )
  (:goal (at driveway))
)
Actions from solver(df, pf): None 
Raw plan text:  
--Small Loop--: 2 
[IR→PDDL Prompt Retry] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move south
You are in the driveway. To the North you see the backyard. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)
    (door backyard west_room west)
    (door backyard street east)
    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
  )
  (:goal (at driveway))
)

### (Optional) Planner/validator feedback to fix
── SOLVER LOG ─────────────────────────────────
ff: goal can be simplified to TRUE. The empty plan solves it
── VAL LOG ────────────────────────────────────
No validation log.


### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type('Room')
    Door = create_type('Door')
    Direction = create_type('Direction')

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r1 in the given direction without a door"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect


### Python IR: problem class
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define the rooms observed in the environment
        self.roomObjs = ExplorationDomain.Room.create_objs(['kitchen', 'backyard', 'driveway', 'west_room', 'street'])
        
        # Doors observed in the environment
        self.doorObjs = ExplorationDomain.Door.create_objs(['patio_door', 'backyard_west_door', 'backyard_east_door'])
        
        # Directions available
        self.dirObjs = ExplorationDomain.Direction.create_objs(['north', 'south', 'west', 'east'])

    @init
    def init(self):
        init_state = [
            # After executing move south, the agent is now in the driveway
            self.at(self.roomObjs['driveway']),
            self.visited(self.roomObjs['kitchen']),
            self.visited(self.roomObjs['backyard']),
            self.visited(self.roomObjs['driveway']),
            
            # Door connections as previously observed
            self.door_at(self.roomObjs['kitchen'], self.doorObjs['patio_door'], self.dirObjs['south']),
            self.door_at(self.roomObjs['backyard'], self.doorObjs['patio_door'], self.dirObjs['north']),
            self.open_door(self.doorObjs['patio_door']),
            self.door_at(self.roomObjs['backyard'], self.doorObjs['backyard_west_door'], self.dirObjs['west']),
            self.door_at(self.roomObjs['backyard'], self.doorObjs['backyard_east_door'], self.dirObjs['east']),
            
            # Existing adjacent fact: driveway is to the south of the backyard
            self.adjacent(self.roomObjs['backyard'], self.roomObjs['driveway'], self.dirObjs['south']),
            
            # New observation: from the driveway, the backyard is seen to the north
            self.adjacent(self.roomObjs['driveway'], self.roomObjs['backyard'], self.dirObjs['north'])
        ]
        return init_state

    @goal
    def goal(self):
        # Previously, the goal was to reach the driveway. Although the agent is now in the driveway,
        # we retain this goal for consistency. In a continuing exploration setting the next target should
        # be an unvisited location, but current observations do not specify a direct connection to one.
        return [self.at(self.roomObjs['driveway'])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)
    (door backyard west_room west)
    (door backyard street east)
    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
  )
  (:goal (at driveway))
)
Actions from solver(df, pf): None 
Raw plan text:  
--Small Loop--: 3 
[IR→PDDL Prompt Retry] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move south
You are in the driveway. To the North you see the backyard. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)
    (door backyard west_room west)
    (door backyard street east)
    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
  )
  (:goal (at driveway))
)

### (Optional) Planner/validator feedback to fix
── SOLVER LOG ─────────────────────────────────
ff: goal can be simplified to TRUE. The empty plan solves it
── VAL LOG ────────────────────────────────────
No validation log.


### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type('Room')
    Door = create_type('Door')
    Direction = create_type('Direction')

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r1 in the given direction without a door"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

### Python IR: problem class
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define the rooms observed in the environment
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room", "street"])
        
        # Define the doors observed
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "backyard_west_door", "backyard_east_door"])
        
        # Define the directions
        self.dirObjs = ExplorationDomain.Direction.create_objs(["north", "south", "west", "east"])
        
    @init
    def init(self):
        init_state = [
            # After executing the move south action, the agent is now in the driveway
            self.at(self.roomObjs["driveway"]),
            self.visited(self.roomObjs["driveway"]),
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            
            # Door connections as observed earlier
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["patio_door"], self.dirObjs["north"]),
            self.open_door(self.doorObjs["patio_door"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_west_door"], self.dirObjs["west"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_east_door"], self.dirObjs["east"]),
            
            # Previously observed adjacent connection from backyard to driveway
            self.adjacent(self.roomObjs["backyard"], self.roomObjs["driveway"], self.dirObjs["south"]),
            
            # New observation: from the driveway, the backyard lies to the north
            self.adjacent(self.roomObjs["driveway"], self.roomObjs["backyard"], self.dirObjs["north"])
        ]
        return init_state
    
    @goal
    def goal(self):
        # Updated goal: keep exploring by moving to a room that has not yet been visited
        return [self.at(self.roomObjs["west_room"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited driveway)
    (visited kitchen)
    (visited backyard)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)
    (door backyard west_room west)
    (door backyard street east)
    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
  )
  (:goal (at west_room))
)
Actions from solver(df, pf): None 
Raw plan text:  
--Small Loop--: 4 
[IR→PDDL Prompt Retry] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move south
You are in the driveway. To the North you see the backyard. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited driveway)
    (visited kitchen)
    (visited backyard)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)
    (door backyard west_room west)
    (door backyard street east)
    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
  )
  (:goal (at west_room))
)

### (Optional) Planner/validator feedback to fix
── SOLVER LOG ─────────────────────────────────
ff: goal can be simplified to FALSE. No plan will solve it
── VAL LOG ────────────────────────────────────
No validation log.


### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type('Room')
    Door = create_type('Door')
    Direction = create_type('Direction')

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r1 in the given direction without a door"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

### Python IR: problem class
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define the rooms observed in the environment
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room", "street"])
        
        # Define the doors observed
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "backyard_west_door", "backyard_east_door"])
        
        # Define the directions
        self.dirObjs = ExplorationDomain.Direction.create_objs(["north", "south", "west", "east"])
        
    @init
    def init(self):
        init_state = [
            # After executing the move south action, the agent is now in the driveway
            self.at(self.roomObjs["driveway"]),
            self.visited(self.roomObjs["driveway"]),
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            
            # Door connections as observed earlier
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["patio_door"], self.dirObjs["north"]),
            self.open_door(self.doorObjs["patio_door"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_west_door"], self.dirObjs["west"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_east_door"], self.dirObjs["east"]),
            
            # Previously observed adjacent connection from backyard to driveway
            self.adjacent(self.roomObjs["backyard"], self.roomObjs["driveway"], self.dirObjs["south"]),
            
            # New observation: from the driveway, the backyard lies to the north
            self.adjacent(self.roomObjs["driveway"], self.roomObjs["backyard"], self.dirObjs["north"])
        ]
        return init_state
    
    @goal
    def goal(self):
        # Updated goal: keep exploring by moving to a room that has not yet been visited
        return [self.at(self.roomObjs["west_room"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited driveway)
    (visited kitchen)
    (visited backyard)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)
    (door backyard west_room west)
    (door backyard street east)
    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
  )
  (:goal (at west_room))
)
Actions from solver(df, pf): None 
Raw plan text:  
--Small Loop--: 5 
[IR→PDDL Prompt Retry] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move south
You are in the driveway. To the North you see the backyard. 


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited driveway)
    (visited kitchen)
    (visited backyard)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)
    (door backyard west_room west)
    (door backyard street east)
    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
  )
  (:goal (at west_room))
)

### (Optional) Planner/validator feedback to fix
── SOLVER LOG ─────────────────────────────────
ff: goal can be simplified to FALSE. No plan will solve it
── VAL LOG ────────────────────────────────────
No validation log.


### (Optional) Environment feedback to fix
N/A

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type('Room')
    Door = create_type('Door')
    Direction = create_type('Direction')

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r1 in the given direction without a door"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect


### Python IR: problem class
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Rooms in the environment
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room", "street"])
        
        # Doors observed in the environment
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "backyard_west_door", "backyard_east_door"])
        
        # Directions
        self.dirObjs = ExplorationDomain.Direction.create_objs(["north", "south", "west", "east"])
        
    @init
    def init(self):
        init_state = [
            # Agent has executed move south and is now in the driveway
            self.at(self.roomObjs["driveway"]),
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            
            # Door connection between kitchen and backyard via the patio door
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["patio_door"], self.dirObjs["north"]),
            self.open_door(self.doorObjs["patio_door"]),
            
            # Update: The west door connection is now observed from the driveway
            self.door_at(self.roomObjs["driveway"], self.doorObjs["backyard_west_door"], self.dirObjs["west"]),
            
            # The east door connection remains associated with the backyard
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_east_door"], self.dirObjs["east"]),
            
            # Adjacent relationships based on observation
            self.adjacent(self.roomObjs["backyard"], self.roomObjs["driveway"], self.dirObjs["south"]),
            self.adjacent(self.roomObjs["driveway"], self.roomObjs["backyard"], self.dirObjs["north"])
        ]
        return init_state
        
    @goal
    def goal(self):
        # New goal: continue exploration by moving to an unvisited room (west_room)
        return [self.at(self.roomObjs["west_room"])]


Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited driveway)
    (visited kitchen)
    (visited backyard)

    ; The patio door between kitchen and backyard (already open)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)

    ; The west door observed from the driveway leads to the goal room
    (door driveway west_room west)

    ; An east door from backyard to street (for completeness)
    (door backyard street east)

    ; Adjacent relationships
    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
  )
  (:goal (at west_room))
)
Actions from solver(df, pf): ['open door to west', 'move west'] 
Raw plan text: (OPEN-DOOR DRIVEWAY WEST_ROOM WEST)
(MOVE DRIVEWAY WEST_ROOM WEST)
 
Current action_queue: ['open door to west', 'move west'] 
> open door to west 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: open door to west. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.
 

----Larger Loop No. 1---- 
successful_actions: ['open door to south', 'move south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: open door to west
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type('Room')
    Door = create_type('Door')
    Direction = create_type('Direction')

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r1 in the given direction without a door"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect


[py_problem]
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Rooms in the environment
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room", "street"])
        
        # Doors observed in the environment
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "backyard_west_door", "backyard_east_door"])
        
        # Directions
        self.dirObjs = ExplorationDomain.Direction.create_objs(["north", "south", "west", "east"])
        
    @init
    def init(self):
        init_state = [
            # Agent has executed move south and is now in the driveway
            self.at(self.roomObjs["driveway"]),
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            
            # Door connection between kitchen and backyard via the patio door
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["patio_door"], self.dirObjs["north"]),
            self.open_door(self.doorObjs["patio_door"]),
            
            # Update: The west door connection is now observed from the driveway
            self.door_at(self.roomObjs["driveway"], self.doorObjs["backyard_west_door"], self.dirObjs["west"]),
            
            # The east door connection remains associated with the backyard
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_east_door"], self.dirObjs["east"]),
            
            # Adjacent relationships based on observation
            self.adjacent(self.roomObjs["backyard"], self.roomObjs["driveway"], self.dirObjs["south"]),
            self.adjacent(self.roomObjs["driveway"], self.roomObjs["backyard"], self.dirObjs["north"])
        ]
        return init_state
        
    @goal
    def goal(self):
        # New goal: continue exploration by moving to an unvisited room (west_room)
        return [self.at(self.roomObjs["west_room"])]


### Previous PDDL (edit minimally)
[df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited driveway)
    (visited kitchen)
    (visited backyard)

    ; The patio door between kitchen and backyard (already open)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)

    ; The west door observed from the driveway leads to the goal room
    (door driveway west_room west)

    ; An east door from backyard to street (for completeness)
    (door backyard street east)

    ; Adjacent relationships
    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
  )
  (:goal (at west_room))
)
### Environment feedback (if any)
This is the action you take: open door to west. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type('Room')
    Door = create_type('Door')
    Direction = create_type('Direction')

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r1 in the given direction (without a door)"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    # Updated move_west to allow moving directly when no door exists
    @action(Room, Room)
    def move_west(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'west'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect
Generated py_problem:
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define rooms in the environment
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room", "street"])
        
        # Define doors observed; note that the west door is no longer observed
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "backyard_east_door"])
        
        # Define directions
        self.dirObjs = ExplorationDomain.Direction.create_objs(["north", "south", "west", "east"])

    @init
    def init(self):
        init_state = [
            # Agent is currently in the driveway
            self.at(self.roomObjs["driveway"]),
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            
            # Patio door connection between kitchen and backyard
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["patio_door"], self.dirObjs["north"]),
            self.open_door(self.doorObjs["patio_door"]),
            
            # East door from backyard to street remains observed
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_east_door"], self.dirObjs["east"]),
            
            # Adjacent relationships
            self.adjacent(self.roomObjs["backyard"], self.roomObjs["driveway"], self.dirObjs["south"]),
            self.adjacent(self.roomObjs["driveway"], self.roomObjs["backyard"], self.dirObjs["north"]),
            
            # Newly observed adjacency: driveway is directly adjacent to west_room to the west (no door present)
            self.adjacent(self.roomObjs["driveway"], self.roomObjs["west_room"], self.dirObjs["west"])
        ]
        return init_state
    
    @goal
    def goal(self):
        # The exploration goal remains: move to the unvisited west_room
        return [self.at(self.roomObjs["west_room"])]
--Small Loop--: 2 
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: open door to west
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited driveway)
    (visited kitchen)
    (visited backyard)

    ; The patio door between kitchen and backyard (already open)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)

    ; The west door observed from the driveway leads to the goal room
    (door driveway west_room west)

    ; An east door from backyard to street (for completeness)
    (door backyard street east)

    ; Adjacent relationships
    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
  )
  (:goal (at west_room))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: open door to west. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type('Room')
    Door = create_type('Door')
    Direction = create_type('Direction')

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r1 in the given direction (without a door)"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    # Updated move_west to allow moving directly when no door exists
    @action(Room, Room)
    def move_west(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'west'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

### Python IR: problem class
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define rooms in the environment
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room", "street"])
        
        # Define doors observed; note that the west door is no longer observed
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "backyard_east_door"])
        
        # Define directions
        self.dirObjs = ExplorationDomain.Direction.create_objs(["north", "south", "west", "east"])

    @init
    def init(self):
        init_state = [
            # Agent is currently in the driveway
            self.at(self.roomObjs["driveway"]),
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            
            # Patio door connection between kitchen and backyard
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["patio_door"], self.dirObjs["north"]),
            self.open_door(self.doorObjs["patio_door"]),
            
            # East door from backyard to street remains observed
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_east_door"], self.dirObjs["east"]),
            
            # Adjacent relationships
            self.adjacent(self.roomObjs["backyard"], self.roomObjs["driveway"], self.dirObjs["south"]),
            self.adjacent(self.roomObjs["driveway"], self.roomObjs["backyard"], self.dirObjs["north"]),
            
            # Newly observed adjacency: driveway is directly adjacent to west_room to the west (no door present)
            self.adjacent(self.roomObjs["driveway"], self.roomObjs["west_room"], self.dirObjs["west"])
        ]
        return init_state
    
    @goal
    def goal(self):
        # The exploration goal remains: move to the unvisited west_room
        return [self.at(self.roomObjs["west_room"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited backyard)
    (visited driveway)

    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)

    (door backyard street east)

    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
    (adjacent driveway west_room west)
  )
  (:goal (at west_room))
)
Actions from solver(df, pf): ['move west'] 
Raw plan text: (MOVE DRIVEWAY WEST_ROOM WEST)
 
Current action_queue: ['move west'] 
> move west 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: move west. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status. 

----Larger Loop No. 2---- 
successful_actions: ['open door to south', 'move south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: move west
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type('Room')
    Door = create_type('Door')
    Direction = create_type('Direction')

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r1 in the given direction (without a door)"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    # Updated move_west to allow moving directly when no door exists
    @action(Room, Room)
    def move_west(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'west'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

[py_problem]
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define rooms in the environment
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room", "street"])
        
        # Define doors observed; note that the west door is no longer observed
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "backyard_east_door"])
        
        # Define directions
        self.dirObjs = ExplorationDomain.Direction.create_objs(["north", "south", "west", "east"])

    @init
    def init(self):
        init_state = [
            # Agent is currently in the driveway
            self.at(self.roomObjs["driveway"]),
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            
            # Patio door connection between kitchen and backyard
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["patio_door"], self.dirObjs["north"]),
            self.open_door(self.doorObjs["patio_door"]),
            
            # East door from backyard to street remains observed
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_east_door"], self.dirObjs["east"]),
            
            # Adjacent relationships
            self.adjacent(self.roomObjs["backyard"], self.roomObjs["driveway"], self.dirObjs["south"]),
            self.adjacent(self.roomObjs["driveway"], self.roomObjs["backyard"], self.dirObjs["north"]),
            
            # Newly observed adjacency: driveway is directly adjacent to west_room to the west (no door present)
            self.adjacent(self.roomObjs["driveway"], self.roomObjs["west_room"], self.dirObjs["west"])
        ]
        return init_state
    
    @goal
    def goal(self):
        # The exploration goal remains: move to the unvisited west_room
        return [self.at(self.roomObjs["west_room"])]

### Previous PDDL (edit minimally)
[df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited backyard)
    (visited driveway)

    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)

    (door backyard street east)

    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
    (adjacent driveway west_room west)
  )
  (:goal (at west_room))
)
### Environment feedback (if any)
This is the action you take: move west. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r1 in the given direction (without a door)"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect
Generated py_problem:
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define rooms in the environment
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room", "street"])
        
        # Define doors observed; added a door for the west direction
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "backyard_east_door", "driveway_west_door"])
        
        # Define directions
        self.dirObjs = ExplorationDomain.Direction.create_objs(["north", "south", "west", "east"])

    @init
    def init(self):
        init_state = [
            # Agent is currently in the driveway
            self.at(self.roomObjs["driveway"]),
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            
            # Patio door connection between kitchen and backyard, and it is open
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["patio_door"], self.dirObjs["north"]),
            self.open_door(self.doorObjs["patio_door"]),
            
            # East door from backyard to street
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_east_door"], self.dirObjs["east"]),
            
            # West door connection between driveway and west_room; door is initially closed
            self.door_at(self.roomObjs["driveway"], self.doorObjs["driveway_west_door"], self.dirObjs["west"]),
            self.door_at(self.roomObjs["west_room"], self.doorObjs["driveway_west_door"], self.dirObjs["east"]),
            
            # Adjacent relationships for move south
            self.adjacent(self.roomObjs["backyard"], self.roomObjs["driveway"], self.dirObjs["south"]),
            self.adjacent(self.roomObjs["driveway"], self.roomObjs["backyard"], self.dirObjs["north"])
        ]
        return init_state
    
    @goal
    def goal(self):
        # The exploration goal: move to the unvisited west_room
        return [self.at(self.roomObjs["west_room"])]
--Small Loop--: 3 
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move west
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited backyard)
    (visited driveway)

    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)

    (door backyard street east)

    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
    (adjacent driveway west_room west)
  )
  (:goal (at west_room))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: move west. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r1 in the given direction (without a door)"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

### Python IR: problem class
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define rooms in the environment
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room", "street"])
        
        # Define doors observed; added a door for the west direction
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "backyard_east_door", "driveway_west_door"])
        
        # Define directions
        self.dirObjs = ExplorationDomain.Direction.create_objs(["north", "south", "west", "east"])

    @init
    def init(self):
        init_state = [
            # Agent is currently in the driveway
            self.at(self.roomObjs["driveway"]),
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            
            # Patio door connection between kitchen and backyard, and it is open
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["patio_door"], self.dirObjs["north"]),
            self.open_door(self.doorObjs["patio_door"]),
            
            # East door from backyard to street
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_east_door"], self.dirObjs["east"]),
            
            # West door connection between driveway and west_room; door is initially closed
            self.door_at(self.roomObjs["driveway"], self.doorObjs["driveway_west_door"], self.dirObjs["west"]),
            self.door_at(self.roomObjs["west_room"], self.doorObjs["driveway_west_door"], self.dirObjs["east"]),
            
            # Adjacent relationships for move south
            self.adjacent(self.roomObjs["backyard"], self.roomObjs["driveway"], self.dirObjs["south"]),
            self.adjacent(self.roomObjs["driveway"], self.roomObjs["backyard"], self.dirObjs["north"])
        ]
        return init_state
    
    @goal
    def goal(self):
        # The exploration goal: move to the unvisited west_room
        return [self.at(self.roomObjs["west_room"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited backyard)
    (visited driveway)

    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)

    (door backyard street east)

    (door driveway west_room west)
    (door west_room driveway east)

    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
  )
  (:goal (at west_room))
)
Actions from solver(df, pf): ['open door to west', 'move west'] 
Raw plan text: (OPEN-DOOR DRIVEWAY WEST_ROOM WEST)
(MOVE DRIVEWAY WEST_ROOM WEST)
 
Current action_queue: ['open door to west', 'move west'] 
> open door to west 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: open door to west. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.
 

----Larger Loop No. 3---- 
successful_actions: ['open door to south', 'move south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: open door to west
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r1 in the given direction (without a door)"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

[py_problem]
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define rooms in the environment
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room", "street"])
        
        # Define doors observed; added a door for the west direction
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "backyard_east_door", "driveway_west_door"])
        
        # Define directions
        self.dirObjs = ExplorationDomain.Direction.create_objs(["north", "south", "west", "east"])

    @init
    def init(self):
        init_state = [
            # Agent is currently in the driveway
            self.at(self.roomObjs["driveway"]),
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),
            
            # Patio door connection between kitchen and backyard, and it is open
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["patio_door"], self.dirObjs["north"]),
            self.open_door(self.doorObjs["patio_door"]),
            
            # East door from backyard to street
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_east_door"], self.dirObjs["east"]),
            
            # West door connection between driveway and west_room; door is initially closed
            self.door_at(self.roomObjs["driveway"], self.doorObjs["driveway_west_door"], self.dirObjs["west"]),
            self.door_at(self.roomObjs["west_room"], self.doorObjs["driveway_west_door"], self.dirObjs["east"]),
            
            # Adjacent relationships for move south
            self.adjacent(self.roomObjs["backyard"], self.roomObjs["driveway"], self.dirObjs["south"]),
            self.adjacent(self.roomObjs["driveway"], self.roomObjs["backyard"], self.dirObjs["north"])
        ]
        return init_state
    
    @goal
    def goal(self):
        # The exploration goal: move to the unvisited west_room
        return [self.at(self.roomObjs["west_room"])]

### Previous PDDL (edit minimally)
[df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited backyard)
    (visited driveway)

    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)

    (door backyard street east)

    (door driveway west_room west)
    (door west_room driveway east)

    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
  )
  (:goal (at west_room))
)
### Environment feedback (if any)
This is the action you take: open door to west. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r1 in the given direction (without a door)"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    # Updated move_west action: moves without a door since no door exists in that direction
    @action(Room, Room)
    def move_west(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'west'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect
Generated py_problem:
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define the rooms in the environment
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room", "street"])
        
        # Based on the current observation, the door to the west has been attempted but does not exist.
        # Hence, we only include the observed doors
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "backyard_east_door"])
        
        # Define available directions
        self.dirObjs = ExplorationDomain.Direction.create_objs(["north", "south", "west", "east"])

    @init
    def init(self):
        init_state = [
            # Agent is currently in the driveway
            self.at(self.roomObjs["driveway"]),
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),

            # Patio door connection between kitchen and backyard; door is open
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["patio_door"], self.dirObjs["north"]),
            self.open_door(self.doorObjs["patio_door"]),

            # East door from backyard to street
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_east_door"], self.dirObjs["east"]),

            # Adjacent relationships for movement without doors
            self.adjacent(self.roomObjs["backyard"], self.roomObjs["driveway"], self.dirObjs["south"]),
            self.adjacent(self.roomObjs["driveway"], self.roomObjs["backyard"], self.dirObjs["north"]),
            # West adjacent relation: since there is no door, moving west is via adjacent connection
            self.adjacent(self.roomObjs["driveway"], self.roomObjs["west_room"], self.dirObjs["west"])
        ]
        return init_state

    @goal
    def goal(self):
        # The exploration goal is to move to the unvisited west_room
        return [self.at(self.roomObjs["west_room"])]
--Small Loop--: 4 
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: open door to west
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited backyard)
    (visited driveway)

    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)

    (door backyard street east)

    (door driveway west_room west)
    (door west_room driveway east)

    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
  )
  (:goal (at west_room))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: open door to west. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.


### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r1 in the given direction (without a door)"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    # Updated move_west action: moves without a door since no door exists in that direction
    @action(Room, Room)
    def move_west(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'west'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

### Python IR: problem class
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define the rooms in the environment
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room", "street"])
        
        # Based on the current observation, the door to the west has been attempted but does not exist.
        # Hence, we only include the observed doors
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "backyard_east_door"])
        
        # Define available directions
        self.dirObjs = ExplorationDomain.Direction.create_objs(["north", "south", "west", "east"])

    @init
    def init(self):
        init_state = [
            # Agent is currently in the driveway
            self.at(self.roomObjs["driveway"]),
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),

            # Patio door connection between kitchen and backyard; door is open
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["patio_door"], self.dirObjs["north"]),
            self.open_door(self.doorObjs["patio_door"]),

            # East door from backyard to street
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_east_door"], self.dirObjs["east"]),

            # Adjacent relationships for movement without doors
            self.adjacent(self.roomObjs["backyard"], self.roomObjs["driveway"], self.dirObjs["south"]),
            self.adjacent(self.roomObjs["driveway"], self.roomObjs["backyard"], self.dirObjs["north"]),
            # West adjacent relation: since there is no door, moving west is via adjacent connection
            self.adjacent(self.roomObjs["driveway"], self.roomObjs["west_room"], self.dirObjs["west"])
        ]
        return init_state

    @goal
    def goal(self):
        # The exploration goal is to move to the unvisited west_room
        return [self.at(self.roomObjs["west_room"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)
    (door backyard street east)
    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
    (adjacent driveway west_room west)
  )
  (:goal (at west_room))
)
Actions from solver(df, pf): ['move west'] 
Raw plan text: (MOVE DRIVEWAY WEST_ROOM WEST)
 
Current action_queue: ['move west'] 
> move west 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: move west. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status. 

----Larger Loop No. 4---- 
successful_actions: ['open door to south', 'move south', 'move south'] 
Small Loop, action_queue: [] 
[PyIR Prompt] 
You will be given a natural language domain description and problem description.
Your task is to generate a Python representation of Planning Domain Definition Language (PDDL) — one domain class and one problem class — using a simple, class-based intermediate representation (IR). 
Python representation of PDDL domain file contains domain name, requirements, types of objects in the domain, predicates, and actions.
Based on the natural language domain description, identify the actions that are possible.
Identify action sematics i.e. understand the preconditions under which that action could be done and the effects of the action.
Then identify appropriate predicates that could enable action semantics i.e. preconditions and effects.
Python representation of PDDL domain file has a definitive syntax that must be followed for any domain. An abstract example is given below:

In the following Python domain file, the example class DomainName has been created. Its structure is similar to how a PDDL domain should be defined.

Name of the domain is the name of the Python class (DomainName).
Types are defined as class variables at the top (Type1, Type2).
Predicates are defined as instance methods decorated with @predicate.
Actions are defined as instance methods decorated with @action

The positional arguments of @predicate and @action decorators are the types of the respective arguments.
Methods decorated with @predicate should have empty bodies.
Methods decorated with @action return a tuple of two lists

<domain_file>
# imports stays exactly same for all domain files
# this python code should be executed without any python syntax errors
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class DomainName(Domain):
	# let's think step by step and correctly define all the aspects of a domain file
	# making sure that the list of types, predicates, and actions comprehensively define the give domain
    Type1 = create_type("Type1")
    Type2 = create_type("Type2")

	# making sure that all the predicates needed are defined below
	# predicates have all the arguments needed along with the types
    # let's not have two predicates with the same name
    # let's make sure two arguments of a predicate function doesn't have same names. That would be a python syntax error.
    @predicate(Type1, Type2)
    def predicate1(self, arg1, arg2):
        """Complete the method signature and specify
        the respective types in the decorator"""

    @predicate(Type1)
    def predicate2(self, arg1):
        """Complete the method signature and specify
        the respective types in the decorator"""

	# let's define a list of actions that comprehensively define the given domain
	# the names for actions are always given precisely in the domain description, using only those actions
	# making sure that each action is defined with :parameters where every arguments needed for preconditions and effects are specified

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure preconditions is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure effects is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1, Type2, Type2)
    def action1(self, arg1, arg2, arg3):
        precond = [self.predicate1(arg1, arg3), self.predicate2(arg1)]
        effect = [~self.predicate1(arg1, arg2), self.predicate2(arg3)]
        return precond, effect

	# writing the definition of action1 which is one of the action given in domain description
	# first defining all the parameters needed for predicates in preconditions and effects
	# making sure :precondition is logically correct and aligns with the pre-conditions where action1 could be performed
	# making sure :effect is logically correct and aligns with the post-conditions or results of action being performed
    @action(Type1)
    def action2(self, arg1):
        precond = [self.predicate2(arg1)]
        effect = [~self.predicate2(arg1)]
        return precond, effect
</domain_file>

Notes for generating domain file: 
- the above example file is only for understanding the syntax
- type1 & type2 are only representative and should be replaced with appropriate types. There could be any number of types.
- predicate1 & predicate2 are only representative and should be replaced with appropriate predicates. There could be any number of predicates.
- action1 & action2 are only representative and should be replaced with appropriate actions. There could be any number of actions.
- arg1 & arg2 are only representative and should be replaced with appropriate arguments for predicates and in preconditions and effects.
- Use predicates with arguments of the right type as declared in domain file
- All the arguments to any :precondition or :effect of an action should be declared in :parameters as input arguments
- Verify and reason about correctness by reiterating the reasoning behind different predicates and actions




Python representation of PDDL problem file contains problem name, domain name, objects in this problem instance, init state of objects, and goal state of objects.
Based on the natural language problem description, identify the relevant objects for this problems with their names and types.
Represent the initial state with the appropriate predicates and object arguments. Represent the goal state with the appropriate predicates and object arguments.
Python representation of PDDL problem file has a definitive syntax that must be followed for any problem. An abstract example is given below.

<problem_file>
# imports stays the same for all problem files
# Assume DomainName is declared just before the problem file
# this python code should be executed correctly without any syntax errors
from py2pddl import goal, init

# let's define all the aspects of a problem file below starting with domain, objects, init state, and goal state

class ProblemName(DomainName):
	# making sure of defining all the objects that are required to define init state and goal state
    # defining the objects with a list of strings will generate a dict and the object should be retrieve as a dict as in the example below in goal function
    def __init__(self):
        super().__init__()
        self.type1Objs = DomainName.Type1.create_objs([1, 2], prefix="type1Obj")
        self.type2Objs = DomainName.Type2.create_objs(["type2Obj1", "type2Obj2"])

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @init
    def init(self):
        at = [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj1"]),
              self.predicate2(self.type1Objs[1]),]
        return at

	# reasoning about the validity of init state that captures the properties of objects in the initial state
	# defining the correct init state that represent the problem file below
    # let's index correctly for lists and dicts
    @goal
    def goal(self):
        return [self.predicate1(self.type1Objs[1], self.type2Objs["type2Obj2"]),
                self.predicate2(self.type1Objs[2])]
</problem_file>

Notes for generating problem file:
- No need to import DomainName for python problem file. Python Domain file and python problem file would be merged and executed.
- type1Objs, type2Oobjs, ... are only representative and should be replaced with appropriate objects. There could be any number of obects with their types.
- init state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define init state
- goal state with predicate1 & predicate2 is only representative and should be replaced with appropriate predicates that define goal state
- Use predicates with arguments of the right type as declared in domain file
- All the objects that would be arguments of predicates in init and goal states should be declared in __init__


Here is the natural language description of the domain and problem:

You are in an environment that you explore step by step. You must build and update the Python Representation of PDDL files of the environment based on only your observations.
Do not create something not appeared in the observations and also do not miss any observations e.g. through closed doors you may assume a room behind.
Do not assume that there will be a door connecting rooms.
Your task is always to keep exploration and go to a location you have not visited yet.
In other words, your goal should go to other not visited location.
Here are your current observations: Action: move west
Unknown action: I'm not sure what you mean.

Here are some valid actions you can take: ['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

Return output in strict JSON with two fields only, no extra text:
{
  "py_domain": "<python code for the domain class that represents the PDDL domain>",
  "py_problem": "<python code for the problem class that represents the PDDL problem>"
}

        ### Previous IR and PDDL history:
        ### Previous Python IR (edit minimally)
[py_domain]
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r1 in the given direction (without a door)"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    # Updated move_west action: moves without a door since no door exists in that direction
    @action(Room, Room)
    def move_west(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'west'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

[py_problem]
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        # Define the rooms in the environment
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room", "street"])
        
        # Based on the current observation, the door to the west has been attempted but does not exist.
        # Hence, we only include the observed doors
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "backyard_east_door"])
        
        # Define available directions
        self.dirObjs = ExplorationDomain.Direction.create_objs(["north", "south", "west", "east"])

    @init
    def init(self):
        init_state = [
            # Agent is currently in the driveway
            self.at(self.roomObjs["driveway"]),
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),

            # Patio door connection between kitchen and backyard; door is open
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["patio_door"], self.dirObjs["north"]),
            self.open_door(self.doorObjs["patio_door"]),

            # East door from backyard to street
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_east_door"], self.dirObjs["east"]),

            # Adjacent relationships for movement without doors
            self.adjacent(self.roomObjs["backyard"], self.roomObjs["driveway"], self.dirObjs["south"]),
            self.adjacent(self.roomObjs["driveway"], self.roomObjs["backyard"], self.dirObjs["north"]),
            # West adjacent relation: since there is no door, moving west is via adjacent connection
            self.adjacent(self.roomObjs["driveway"], self.roomObjs["west_room"], self.dirObjs["west"])
        ]
        return init_state

    @goal
    def goal(self):
        # The exploration goal is to move to the unvisited west_room
        return [self.at(self.roomObjs["west_room"])]

### Previous PDDL (edit minimally)
[df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)
    (door backyard street east)
    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
    (adjacent driveway west_room west)
  )
  (:goal (at west_room))
)
### Environment feedback (if any)
This is the action you take: move west. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

        ### End of history.

        Now, based on the above history and your current observation, update the Python representation of PDDL files. 
        
Generated py_domain:
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r1 in the given direction (without a door)"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.door_at(dest, d, 'east'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect
Generated py_problem:
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room", "street"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "backyard_east_door", "west_door"])
        self.dirObjs = ExplorationDomain.Direction.create_objs(["north", "south", "west", "east"])

    @init
    def init(self):
        init_state = [
            # Agent is currently in the driveway
            self.at(self.roomObjs["driveway"]),
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),

            # Patio door connection between kitchen and backyard; door is open
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["patio_door"], self.dirObjs["north"]),
            self.open_door(self.doorObjs["patio_door"]),

            # East door from backyard to street
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_east_door"], self.dirObjs["east"]),

            # Adjacent relationships for south movement
            self.adjacent(self.roomObjs["backyard"], self.roomObjs["driveway"], self.dirObjs["south"]),
            self.adjacent(self.roomObjs["driveway"], self.roomObjs["backyard"], self.dirObjs["north"]),

            # Door-based connectivity for west movement
            self.door_at(self.roomObjs["driveway"], self.doorObjs["west_door"], self.dirObjs["west"]),
            self.door_at(self.roomObjs["west_room"], self.doorObjs["west_door"], self.dirObjs["east"])
        ]
        return init_state

    @goal
    def goal(self):
        # The goal is to reach the unvisited west_room
        return [self.at(self.roomObjs["west_room"])]
--Small Loop--: 5 
[IR→PDDL Prompt] 
You will be given a class-based Python IR for a PDDL domain (one domain class) and a PDDL problem instance (one problem class),
plus the current observations and valid actions. Convert that IR into syntactically correct and mutually consistent PDDL.

### Hard constraints (must follow exactly)
- Declare EXACTLY these two actions with these names and parameter orders:
  1) :action open-door
     :parameters (?loc1 - location ?loc2 - location ?dir - direction)
  2) :action move
     :parameters (?from - location ?to - location ?dir - direction)
- Use typed PDDL (declare `location` and `direction` in :types).
- In problem file's init, you shouldn't have "not ()" but only the single status.
- The goal must be ground (e.g., (at loc_2)), never (at ?l) or quantifiers.
- Keep edits minimal if previous PDDL is provided.

### Current observations
Action: move west
Unknown action: I'm not sure what you mean.


### Valid actions
['close door to south', 'close door to west', 'move south', 'move west', 'open door to south', 'open door to west']

### (Optional) Previous PDDL (use as base with minimal fixes)
[Domain file]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1)
                       (door ?loc1 ?loc2 ?dir)
                       (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from)
                       (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from))
                 (at ?to)
                 (visited ?to))
  )
)

[Problem file]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)
    (door backyard street east)
    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
    (adjacent driveway west_room west)
  )
  (:goal (at west_room))
)

### (Optional) Planner/validator feedback to fix
N/A

### (Optional) Environment feedback to fix
This is the action you take: move west. You cannot move to that direction. Review the predicate of your actions and the problem files to check the status.

### Python IR: domain class
from py2pddl import Domain, create_type
from py2pddl import predicate, action

class ExplorationDomain(Domain):
    Room = create_type("Room")
    Door = create_type("Door")
    Direction = create_type("Direction")

    @predicate(Room)
    def at(self, r):
        """Indicates the agent is at room r"""
        pass

    @predicate(Room)
    def visited(self, r):
        """Indicates room r has been visited"""
        pass

    @predicate(Room, Door, Direction)
    def door_at(self, r, d, dir):
        """Specifies that door d is located in room r in the given direction"""
        pass

    @predicate(Door)
    def open_door(self, d):
        """Indicates that door d is open"""
        pass

    @predicate(Room, Room, Direction)
    def adjacent(self, r1, r2, dir):
        """Indicates that room r2 is adjacent to room r1 in the given direction (without a door)"""
        pass

    @action(Room, Door)
    def open_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def open_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), ~self.open_door(d)]
        effect = [self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_south(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'south'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Door)
    def close_door_to_west(self, r, d):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.open_door(d)]
        effect = [~self.open_door(d)]
        return precond, effect

    @action(Room, Room)
    def move_south(self, r, dest):
        precond = [self.at(r), self.adjacent(r, dest, 'south'), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

    @action(Room, Door, Room)
    def move_west(self, r, d, dest):
        precond = [self.at(r), self.door_at(r, d, 'west'), self.door_at(dest, d, 'east'), self.open_door(d), ~self.visited(dest)]
        effect = [~self.at(r), self.at(dest), self.visited(dest)]
        return precond, effect

### Python IR: problem class
from py2pddl import goal, init

class ExplorationProblem(ExplorationDomain):
    def __init__(self):
        super().__init__()
        self.roomObjs = ExplorationDomain.Room.create_objs(["kitchen", "backyard", "driveway", "west_room", "street"])
        self.doorObjs = ExplorationDomain.Door.create_objs(["patio_door", "backyard_east_door", "west_door"])
        self.dirObjs = ExplorationDomain.Direction.create_objs(["north", "south", "west", "east"])

    @init
    def init(self):
        init_state = [
            # Agent is currently in the driveway
            self.at(self.roomObjs["driveway"]),
            self.visited(self.roomObjs["kitchen"]),
            self.visited(self.roomObjs["backyard"]),
            self.visited(self.roomObjs["driveway"]),

            # Patio door connection between kitchen and backyard; door is open
            self.door_at(self.roomObjs["kitchen"], self.doorObjs["patio_door"], self.dirObjs["south"]),
            self.door_at(self.roomObjs["backyard"], self.doorObjs["patio_door"], self.dirObjs["north"]),
            self.open_door(self.doorObjs["patio_door"]),

            # East door from backyard to street
            self.door_at(self.roomObjs["backyard"], self.doorObjs["backyard_east_door"], self.dirObjs["east"]),

            # Adjacent relationships for south movement
            self.adjacent(self.roomObjs["backyard"], self.roomObjs["driveway"], self.dirObjs["south"]),
            self.adjacent(self.roomObjs["driveway"], self.roomObjs["backyard"], self.dirObjs["north"]),

            # Door-based connectivity for west movement
            self.door_at(self.roomObjs["driveway"], self.doorObjs["west_door"], self.dirObjs["west"]),
            self.door_at(self.roomObjs["west_room"], self.doorObjs["west_door"], self.dirObjs["east"])
        ]
        return init_state

    @goal
    def goal(self):
        # The goal is to reach the unvisited west_room
        return [self.at(self.roomObjs["west_room"])]

Return output in STRICT JSON with two keys only, no extra commentary:
{
  "df": "<PDDL domain file text>",
  "pf": "<PDDL problem file text>"
}
 
[PDDL df]
(define (domain exploration)
  (:requirements :typing :strips :disjunctive-preconditions)
  (:types location direction)
  (:predicates
    (at ?l - location)
    (visited ?l - location)
    (door ?loc1 - location ?loc2 - location ?dir - direction)
    (open ?loc1 - location ?loc2 - location ?dir - direction)
    (adjacent ?from - location ?to - location ?dir - direction)
  )

  (:action open-door
    :parameters (?loc1 - location ?loc2 - location ?dir - direction)
    :precondition (and (at ?loc1) (door ?loc1 ?loc2 ?dir) (not (open ?loc1 ?loc2 ?dir)))
    :effect (open ?loc1 ?loc2 ?dir)
  )

  (:action move
    :parameters (?from - location ?to - location ?dir - direction)
    :precondition (and (at ?from) (not (visited ?to))
                       (or (and (door ?from ?to ?dir) (open ?from ?to ?dir))
                           (adjacent ?from ?to ?dir)))
    :effect (and (not (at ?from)) (at ?to) (visited ?to))
  )
)

[PDDL pf]
(define (problem exploration-problem)
  (:domain exploration)
  (:objects
    kitchen backyard driveway west_room street - location
    north south west east - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited backyard)
    (visited driveway)
    (door kitchen backyard south)
    (door backyard kitchen north)
    (open backyard kitchen north)
    (door backyard street east)
    (door driveway west_room west)
    (door west_room driveway east)
    (adjacent backyard driveway south)
    (adjacent driveway backyard north)
  )
  (:goal (at west_room))
)
Actions from solver(df, pf): ['open door to west', 'move west'] 
Raw plan text: (OPEN-DOOR DRIVEWAY WEST_ROOM WEST)
(MOVE DRIVEWAY WEST_ROOM WEST)
 
Current action_queue: ['open door to west', 'move west'] 
> open door to west 
 Unknown action: I'm not sure what you mean. 
Large loop error message: This is the action you take: open door to west. When you try to open door, there is no door here or there is nothing in this direction. If there is no door, you can directly move to that direction.
 
